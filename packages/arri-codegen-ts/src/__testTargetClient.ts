// this file was autogenerated by arri-codegen-ts
/* eslint-disable */
import { arriRequest } from "arri-client";

interface ClientOptions {
    baseUrl?: string;
    headers?: Record<string, string>;
}

export class Client {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    users: ClientUsersService;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "11", ...options.headers };
        this.users = new ClientUsersService(options);
    }

    getStatus() {
        return arriRequest<GetStatusResponse, undefined>({
            url: `${this.baseUrl}/status`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: $$GetStatusResponse.parse,
            serializer: (_) => {},
        });
    }
}

export class ClientUsersService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    settings: ClientUsersSettingsService;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "11", ...options.headers };
        this.settings = new ClientUsersSettingsService(options);
    }

    getUser(params: UserParams) {
        return arriRequest<User, UserParams>({
            url: `${this.baseUrl}/users/get-user`,
            method: "get",
            headers: this.headers,
            params,
            parser: $$User.parse,
            serializer: $$UserParams.serialize,
        });
    }

    updateUser(params: UpdateUserParams) {
        return arriRequest<User, UpdateUserParams>({
            url: `${this.baseUrl}/users/update-user`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$User.parse,
            serializer: $$UpdateUserParams.serialize,
        });
    }
}

export class ClientUsersSettingsService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "11", ...options.headers };
    }

    getUserSettings() {
        return arriRequest<undefined, undefined>({
            url: `${this.baseUrl}/users/settings/get-user-settings`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: (_) => {},
            serializer: (_) => {},
        });
    }
}

export interface GetStatusResponse {
    message: string;
}
export const $$GetStatusResponse = {
    parse(input: Record<any, any>): GetStatusResponse {
        return {
            message: typeof input.message === "string" ? input.message : "",
        };
    },
    serialize(input: GetStatusResponse): string {
        let json = "";
        json += "{";
        json += `"message":"${input.message.replace(/[\n]/g, "\\n")}"`;
        json += "}";
        return json;
    },
};

export interface User {
    id: string;
    role: UserRole;
    photo: UserPhoto | null;
    createdAt: Date;
    numFollowers: number;
    settings: UserSettings;
    recentNotifications: Array<UserRecentNotificationsItem>;
    bookmarks: UserBookmarks;
    metadata: UserMetadata;
    randomList: Array<any>;
    bio?: string;
}
export const $$User = {
    parse(input: Record<any, any>): User {
        return {
            id: typeof input.id === "string" ? input.id : "",
            role: $$UserRole.parse(input.role),
            photo:
                typeof input.photo === "object" && input.photo !== null
                    ? $$UserPhoto.parse(input.photo)
                    : null,
            createdAt:
                typeof input.createdAt === "string"
                    ? new Date(input.createdAt)
                    : new Date(0),
            numFollowers:
                typeof input.numFollowers === "number" ? input.numFollowers : 0,
            settings: $$UserSettings.parse(input.settings),
            recentNotifications: Array.isArray(input.recentNotifications)
                ? input.recentNotifications.map((item) =>
                      $$UserRecentNotificationsItem.parse(item),
                  )
                : [],
            bookmarks:
                typeof input.bookmarks === "object" && input.bookmarks !== null
                    ? $$UserBookmarks.parse(input.bookmarks)
                    : {},
            metadata:
                typeof input.metadata === "object" && input.metadata !== null
                    ? $$UserMetadata.parse(input.metadata)
                    : {},
            randomList: Array.isArray(input.randomList)
                ? input.randomList.map((item) => item)
                : [],
            bio: typeof input.bio === "string" ? input.bio : undefined,
        };
    },
    serialize(input: User): string {
        let json = "";
        json += "{";
        json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
        json += `,"role":"${input.role}"`;
        if (typeof input.photo === "object" && input.photo !== null) {
            json += ',"photo":{';
            json += `"url":"${input.photo.url.replace(/[\n]/g, "\\n")}"`;
            json += `,"width":${input.photo.width}`;
            json += `,"height":${input.photo.height}`;
            json += `,"bytes":"${input.photo.bytes.toString()}"`;
            json += `,"nanoseconds":"${input.photo.nanoseconds.toString()}"`;
            json += "}";
        } else {
            json += ',"photo":null';
        }
        json += `,"createdAt":"${input.createdAt.toISOString()}"`;
        json += `,"numFollowers":${input.numFollowers}`;
        json += ',"settings":{';
        json += `"notificationsEnabled":${input.settings.notificationsEnabled}`;
        json += `,"preferredTheme":"${input.settings.preferredTheme}"`;
        json += "}";
        json += ',"recentNotifications":[';
        for (let i = 0; i < input.recentNotifications.length; i++) {
            const arrayItem = input.recentNotifications[i];
            if (i !== 0) {
                json += ",";
            }
            switch (arrayItem.notificationType) {
                case "POST_LIKE": {
                    json += "{";
                    json += `"notificationType":"POST_LIKE"`;
                    json += `,"postId":"${arrayItem.postId.replace(
                        /[\n]/g,
                        "\\n",
                    )}"`;
                    json += `,"userId":"${arrayItem.userId.replace(
                        /[\n]/g,
                        "\\n",
                    )}"`;
                    json += "}";
                    break;
                }
                case "POST_COMMENT": {
                    json += "{";
                    json += `"notificationType":"POST_COMMENT"`;
                    json += `,"postId":"${arrayItem.postId.replace(
                        /[\n]/g,
                        "\\n",
                    )}"`;
                    json += `,"userId":"${arrayItem.userId.replace(
                        /[\n]/g,
                        "\\n",
                    )}"`;
                    json += `,"commentText":"${arrayItem.commentText.replace(
                        /[\n]/g,
                        "\\n",
                    )}"`;
                    json += "}";
                    break;
                }
            }
        }
        json += "]";
        const bookmarksKeys = Object.keys(input.bookmarks);
        json += ',"bookmarks":{';
        for (let i = 0; i < bookmarksKeys.length; i++) {
            const key = bookmarksKeys[i];
            const innerVal = input.bookmarks[key];
            if (i !== 0) {
                json += `,"${key}":`;
            } else {
                json += `"${key}":`;
            }
            json += "{";
            json += `"postId":"${innerVal.postId.replace(/[\n]/g, "\\n")}"`;
            json += `,"userId":"${innerVal.userId.replace(/[\n]/g, "\\n")}"`;
            json += "}";
        }
        json += "}";
        const metadataKeys = Object.keys(input.metadata);
        json += ',"metadata":{';
        for (let i = 0; i < metadataKeys.length; i++) {
            const key = metadataKeys[i];
            const innerVal = input.metadata[key];
            if (i !== 0) {
                json += `,"${key}":`;
            } else {
                json += `"${key}":`;
            }
            json += JSON.stringify(innerVal);
        }
        json += "}";
        json += ',"randomList":[';
        for (let i = 0; i < input.randomList.length; i++) {
            const arrayItem = input.randomList[i];
            if (i !== 0) {
                json += ",";
            }
            json += JSON.stringify(arrayItem);
        }
        json += "]";
        if (typeof input.bio !== "undefined") {
            json += `,"bio":"${input.bio.replace(/[\n]/g, "\\n")}"`;
        }
        json += "}";
        return json;
    },
};

export type UserRole = "standard" | "admin";
export const $$UserRole = {
    parse(input: any): UserRole {
        const vals = ["standard", "admin"];
        if (typeof input !== "string" || !vals.includes(input)) {
            throw new Error(
                `Invalid input for UserRole. Expected one of the following [standard, admin]. Got ${input}.`,
            );
        }
        return input as UserRole;
    },
    serialize(input: UserRole): string {
        return input;
    },
};

export interface UserPhoto {
    url: string;
    width: number;
    height: number;
    bytes: bigint;
    nanoseconds: bigint;
}
export const $$UserPhoto = {
    parse(input: Record<any, any>): UserPhoto {
        return {
            url: typeof input.url === "string" ? input.url : "",
            width: typeof input.width === "number" ? input.width : 0,
            height: typeof input.height === "number" ? input.height : 0,
            bytes:
                typeof input.bytes === "string"
                    ? BigInt(input.bytes)
                    : BigInt("0"),
            nanoseconds:
                typeof input.nanoseconds === "string"
                    ? BigInt(input.nanoseconds)
                    : BigInt("0"),
        };
    },
    serialize(input: UserPhoto): string {
        let json = "";
        if (typeof input === "object" && input !== null) {
            json += "{";
            json += `"url":"${input.url.replace(/[\n]/g, "\\n")}"`;
            json += `,"width":${input.width}`;
            json += `,"height":${input.height}`;
            json += `,"bytes":"${input.bytes.toString()}"`;
            json += `,"nanoseconds":"${input.nanoseconds.toString()}"`;
            json += "}";
        } else {
            json += "null";
        }
        return json;
    },
};

export interface UserSettings {
    notificationsEnabled: boolean;
    preferredTheme: UserSettingsPreferredTheme;
}
export const $$UserSettings = {
    parse(input: Record<any, any>): UserSettings {
        return {
            notificationsEnabled:
                typeof input.notificationsEnabled === "boolean"
                    ? input.notificationsEnabled
                    : false,
            preferredTheme: $$UserSettingsPreferredTheme.parse(
                input.preferredTheme,
            ),
        };
    },
    serialize(input: UserSettings): string {
        let json = "";
        json += "{";
        json += `"notificationsEnabled":${input.notificationsEnabled}`;
        json += `,"preferredTheme":"${input.preferredTheme}"`;
        json += "}";
        return json;
    },
};

export type UserSettingsPreferredTheme = "dark-mode" | "light-mode" | "system";
export const $$UserSettingsPreferredTheme = {
    parse(input: any): UserSettingsPreferredTheme {
        const vals = ["dark-mode", "light-mode", "system"];
        if (typeof input !== "string" || !vals.includes(input)) {
            throw new Error(
                `Invalid input for UserSettingsPreferredTheme. Expected one of the following [dark-mode, light-mode, system]. Got ${input}.`,
            );
        }
        return input as UserSettingsPreferredTheme;
    },
    serialize(input: UserSettingsPreferredTheme): string {
        return input;
    },
};
export type UserRecentNotificationsItem =
    | UserRecentNotificationsItemPostLike
    | UserRecentNotificationsItemPostComment;
export const $$UserRecentNotificationsItem = {
    parse(input: Record<any, any>): UserRecentNotificationsItem {
        switch (input.notificationType) {
            case "POST_LIKE":
                return $$UserRecentNotificationsItemPostLike.parse(input);
            case "POST_COMMENT":
                return $$UserRecentNotificationsItemPostComment.parse(input);
            default:
                break;
        }
        throw new Error(
            "Invalid input for UserRecentNotificationsItem. Input didn't match one of the specified union schemas.",
        );
    },
    serialize(input: UserRecentNotificationsItem): string {
        let json = "";
        switch (input.notificationType) {
            case "POST_LIKE": {
                json += "{";
                json += `"notificationType":"POST_LIKE"`;
                json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
                json += `,"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
                json += "}";
                break;
            }
            case "POST_COMMENT": {
                json += "{";
                json += `"notificationType":"POST_COMMENT"`;
                json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
                json += `,"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
                json += `,"commentText":"${input.commentText.replace(
                    /[\n]/g,
                    "\\n",
                )}"`;
                json += "}";
                break;
            }
        }
        return json;
    },
};
export interface UserRecentNotificationsItemPostLike {
    notificationType: "POST_LIKE";
    postId: string;
    userId: string;
}
export const $$UserRecentNotificationsItemPostLike = {
    parse(input: Record<any, any>): UserRecentNotificationsItemPostLike {
        return {
            notificationType: "POST_LIKE",
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
        };
    },
    serialize(input: UserRecentNotificationsItemPostLike): string {
        let json = "";
        json += "{";
        json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
        json += "}";
        return json;
    },
};

export interface UserRecentNotificationsItemPostComment {
    notificationType: "POST_COMMENT";
    postId: string;
    userId: string;
    commentText: string;
}
export const $$UserRecentNotificationsItemPostComment = {
    parse(input: Record<any, any>): UserRecentNotificationsItemPostComment {
        return {
            notificationType: "POST_COMMENT",
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
            commentText:
                typeof input.commentText === "string" ? input.commentText : "",
        };
    },
    serialize(input: UserRecentNotificationsItemPostComment): string {
        let json = "";
        json += "{";
        json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
        json += `,"commentText":"${input.commentText.replace(/[\n]/g, "\\n")}"`;
        json += "}";
        return json;
    },
};

export type UserBookmarks = Record<string, UserBookmarksValue>;
export const $$UserBookmarks = {
    parse(input: Record<any, any>): UserBookmarks {
        const result: UserBookmarks = {};
        for (const key of Object.keys(input)) {
            result[key] = $$UserBookmarksValue.parse(input[key]);
        }
        return result;
    },
    serialize(input: UserBookmarks): string {
        let json = "";
        const inputKeys = Object.keys(input);
        json += "{";
        for (let i = 0; i < inputKeys.length; i++) {
            const key = inputKeys[i];
            const innerVal = input[key];
            if (i !== 0) {
                json += `,"${key}":`;
            } else {
                json += `"${key}":`;
            }
            json += "{";
            json += `"postId":"${innerVal.postId.replace(/[\n]/g, "\\n")}"`;
            json += `,"userId":"${innerVal.userId.replace(/[\n]/g, "\\n")}"`;
            json += "}";
        }
        json += "}";
        return json;
    },
};

export interface UserBookmarksValue {
    postId: string;
    userId: string;
}
export const $$UserBookmarksValue = {
    parse(input: Record<any, any>): UserBookmarksValue {
        return {
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
        };
    },
    serialize(input: UserBookmarksValue): string {
        let json = "";
        json += "{";
        json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
        json += "}";
        return json;
    },
};

export type UserMetadata = Record<string, any>;
export const $$UserMetadata = {
    parse(input: Record<any, any>): UserMetadata {
        const result: UserMetadata = {};
        for (const key of Object.keys(input)) {
            result[key] = input[key];
        }
        return result;
    },
    serialize(input: UserMetadata): string {
        let json = "";
        const inputKeys = Object.keys(input);
        json += "{";
        for (let i = 0; i < inputKeys.length; i++) {
            const key = inputKeys[i];
            const innerVal = input[key];
            if (i !== 0) {
                json += `,"${key}":`;
            } else {
                json += `"${key}":`;
            }
            json += JSON.stringify(innerVal);
        }
        json += "}";
        return json;
    },
};

export interface UserParams {
    userId: string;
}
export const $$UserParams = {
    parse(input: Record<any, any>): UserParams {
        return {
            userId: typeof input.userId === "string" ? input.userId : "",
        };
    },
    serialize(input: UserParams): string {
        let json = "";
        json += "{";
        json += `"userId":"${input.userId.replace(/[\n]/g, "\\n")}"`;
        json += "}";
        return json;
    },
};

export interface UpdateUserParams {
    id: string;
    photo: UserPhoto | null;
    bio?: string;
}
export const $$UpdateUserParams = {
    parse(input: Record<any, any>): UpdateUserParams {
        return {
            id: typeof input.id === "string" ? input.id : "",
            photo:
                typeof input.photo === "object" && input.photo !== null
                    ? $$UserPhoto.parse(input.photo)
                    : null,
            bio: typeof input.bio === "string" ? input.bio : undefined,
        };
    },
    serialize(input: UpdateUserParams): string {
        let json = "";
        json += "{";
        json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
        if (typeof input.photo === "object" && input.photo !== null) {
            json += ',"photo":{';
            json += `"url":"${input.photo.url.replace(/[\n]/g, "\\n")}"`;
            json += `,"width":${input.photo.width}`;
            json += `,"height":${input.photo.height}`;
            json += `,"bytes":"${input.photo.bytes.toString()}"`;
            json += `,"nanoseconds":"${input.photo.nanoseconds.toString()}"`;
            json += "}";
        } else {
            json += ',"photo":null';
        }
        if (typeof input.bio !== "undefined") {
            json += `,"bio":"${input.bio.replace(/[\n]/g, "\\n")}"`;
        }
        json += "}";
        return json;
    },
};
