/* eslint-disable */
// @ts-nocheck
// this file was autogenerated by arri-codegen-ts
import { arriRequest } from "arri-client";

interface TestClientOptions {
  baseUrl?: string;
  headers?: Record<string, string>;
}

export class TestClient {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;
  miscTests: TestClientMiscTestsService;
  posts: TestClientPostsService;
  videos: TestClientVideosService;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
    this.miscTests = new TestClientMiscTestsService(options);
    this.posts = new TestClientPostsService(options);
    this.videos = new TestClientVideosService(options);
  }
}

export class TestClientMiscTestsService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
  }
  testEveryType(params: ProcessEveryTypeParams) {
    return arriRequest<ProcessEveryTypeParams, ProcessEveryTypeParams>({
      url: `${this.baseUrl}/rpcs/misc-tests/test-every-type`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$ProcessEveryTypeParams.parse,
      serializer: $$ProcessEveryTypeParams.serialize,
    });
  }
}

export class TestClientPostsService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
  }
  getPost(params: PostParams) {
    return arriRequest<Post, PostParams>({
      url: `${this.baseUrl}/rpcs/posts/get-post`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$Post.parse,
      serializer: $$PostParams.serialize,
    });
  }
  getPosts(params: PostListParams) {
    return arriRequest<PostListResponse, PostListParams>({
      url: `${this.baseUrl}/rpcs/posts/get-posts`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$PostListResponse.parse,
      serializer: $$PostListParams.serialize,
    });
  }
  logEvent(params: PostEvent) {
    return arriRequest<LogPostEventResponse, PostEvent>({
      url: `${this.baseUrl}/rpcs/posts/log-event`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$LogPostEventResponse.parse,
      serializer: $$PostEvent.serialize,
    });
  }
  updatePost(params: UpdatePostParams) {
    return arriRequest<Post, UpdatePostParams>({
      url: `${this.baseUrl}/rpcs/posts/update-post`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$Post.parse,
      serializer: $$UpdatePostParams.serialize,
    });
  }
}

export class TestClientVideosService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
  }
  getAnnotation(params: AnnotationId) {
    return arriRequest<Annotation, AnnotationId>({
      url: `${this.baseUrl}/rpcs/videos/get-annotation`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$Annotation.parse,
      serializer: $$AnnotationId.serialize,
    });
  }
  updateAnnotation(params: UpdateAnnotationParams) {
    return arriRequest<Annotation, UpdateAnnotationParams>({
      url: `${this.baseUrl}/rpcs/videos/update-annotation`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$Annotation.parse,
      serializer: $$UpdateAnnotationParams.serialize,
    });
  }
}

export interface ProcessEveryTypeParams {
  any: any;
  boolean: boolean;
  string: string;
  timestamp: Date;
  float32: number;
  float64: number;
  int8: number;
  uint8: number;
  int16: number;
  uint16: number;
  int32: number;
  uint32: number;
  int64: bigint;
  uint64: bigint;
  enumerator: ProcessEveryTypeParamsEnumerator;
  array: Array<boolean>;
  object: ProcessEveryTypeParamsObject;
  record: ProcessEveryTypeParamsRecord;
  discriminator: ProcessEveryTypeParamsDiscriminator;
  nestedObject: ProcessEveryTypeParamsNestedObject;
  nestedArray: Array<Array<ProcessEveryTypeParamsNestedArrayItemItem>>;
}
const $$ProcessEveryTypeParams = {
  parse(input: Record<any, any>): ProcessEveryTypeParams {
    class $ValidationErrorprocessEveryTypeParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorprocessEveryTypeParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        jsonInnerVal.any = json.any;
        if (typeof json.boolean === "boolean") {
          jsonInnerVal.boolean = json.boolean;
        } else {
          $fallback(
            "/boolean",
            "/properties/boolean/type",
            "Expected boolean for /boolean",
          );
        }
        if (typeof json.string === "string") {
          jsonInnerVal.string = json.string;
        } else {
          $fallback(
            "/string",
            "/properties/string/type",
            "Expected string at /string",
          );
        }
        if (
          typeof json.timestamp === "object" &&
          json.timestamp instanceof Date
        ) {
          jsonInnerVal.timestamp = json.timestamp;
        } else if (typeof json.timestamp === "string") {
          jsonInnerVal.timestamp = new Date(json.timestamp);
        } else {
          $fallback(
            "/timestamp",
            "/properties/timestamp",
            "Expected instanceof Date or ISO Date string at /timestamp",
          );
        }
        if (typeof json.float32 === "number" && !Number.isNaN(json.float32)) {
          jsonInnerVal.float32 = json.float32;
        } else {
          $fallback(
            "/float32",
            "/properties/float32/type",
            "Expected number at /float32",
          );
        }
        if (typeof json.float64 === "number" && !Number.isNaN(json.float64)) {
          jsonInnerVal.float64 = json.float64;
        } else {
          $fallback(
            "/float64",
            "/properties/float64/type",
            "Expected number at /float64",
          );
        }
        if (
          typeof json.int8 === "number" &&
          Number.isInteger(json.int8) &&
          json.int8 >= -128 &&
          json.int8 <= 127
        ) {
          jsonInnerVal.int8 = json.int8;
        } else {
          $fallback(
            "/int8",
            "/properties/int8",
            "Expected valid integer between -128 and 127",
          );
        }
        if (
          typeof json.uint8 === "number" &&
          Number.isInteger(json.uint8) &&
          json.uint8 >= 0 &&
          json.uint8 <= 255
        ) {
          jsonInnerVal.uint8 = json.uint8;
        } else {
          $fallback(
            "/uint8",
            "/properties/uint8",
            "Expected valid integer between 0 and 255",
          );
        }
        if (
          typeof json.int16 === "number" &&
          Number.isInteger(json.int16) &&
          json.int16 >= -32768 &&
          json.int16 <= 32767
        ) {
          jsonInnerVal.int16 = json.int16;
        } else {
          $fallback(
            "/int16",
            "/properties/int16",
            "Expected valid integer between -32768 and 32767",
          );
        }
        if (
          typeof json.uint16 === "number" &&
          Number.isInteger(json.uint16) &&
          json.uint16 >= 0 &&
          json.uint16 <= 65535
        ) {
          jsonInnerVal.uint16 = json.uint16;
        } else {
          $fallback(
            "/uint16",
            "/properties/uint16",
            "Expected valid integer between 0 and 65535",
          );
        }
        if (
          typeof json.int32 === "number" &&
          Number.isInteger(json.int32) &&
          json.int32 >= -2147483648 &&
          json.int32 <= 2147483647
        ) {
          jsonInnerVal.int32 = json.int32;
        } else {
          $fallback(
            "/int32",
            "/properties/int32",
            "Expected valid integer between -2147483648 and 2147483647",
          );
        }
        if (
          typeof json.uint32 === "number" &&
          Number.isInteger(json.uint32) &&
          json.uint32 >= 0 &&
          json.uint32 <= 4294967295
        ) {
          jsonInnerVal.uint32 = json.uint32;
        } else {
          $fallback(
            "/uint32",
            "/properties/uint32",
            "Expected valid integer between 0 and 4294967295",
          );
        }
        if (typeof json.int64 === "string" || typeof json.int64 === "number") {
          try {
            const val = BigInt(json.int64);
            jsonInnerVal.int64 = val;
          } catch (err) {
            $fallback(
              "/int64",
              "/properties/int64",
              "Unable to parse BigInt from json.int64.",
            );
          }
        } else if (typeof json.int64 === "bigint") {
          jsonInnerVal.int64 = json.int64;
        } else {
          $fallback(
            "/int64",
            "/properties/int64",
            "Expected BigInt or Integer string. Got ${json.int64}",
          );
        }
        if (
          typeof json.uint64 === "string" ||
          typeof json.uint64 === "number"
        ) {
          try {
            const val = BigInt(json.uint64);
            if (val >= BigInt("0")) {
              jsonInnerVal.uint64 = val;
            } else {
              $fallback(
                "/uint64",
                "/properties/uint64",
                "Unsigned int must be greater than or equal to 0.",
              );
            }
          } catch (err) {
            $fallback(
              "/uint64",
              "/properties/uint64",
              "Unable to parse BigInt from json.uint64.",
            );
          }
        } else if (typeof json.uint64 === "bigint") {
          if (json.uint64 >= BigInt("0")) {
            jsonInnerVal.uint64 = json.uint64;
          } else {
            $fallback(
              "/uint64",
              "/properties/uint64",
              "Unsigned int must be greater than or equal to 0.",
            );
          }
        } else {
          $fallback(
            "/uint64",
            "/properties/uint64",
            "Expected BigInt or Integer string. Got ${json.uint64}",
          );
        }
        if (typeof json.enumerator === "string") {
          if (
            json.enumerator === "A" ||
            json.enumerator === "B" ||
            json.enumerator === "C"
          ) {
            jsonInnerVal.enumerator = json.enumerator;
          } else {
            $fallback(
              "/enumerator",
              "/properties/enumerator",
              "Expected one of the following values: [A, B, C] at /enumerator.",
            );
          }
        } else {
          $fallback(
            "/enumerator",
            "/properties/enumerator",
            "Expected one of the following values: [A, B, C] at /enumerator.",
          );
        }
        if (Array.isArray(json.array)) {
          const jsonInnerValArrayInnerResult = [];
          for (const jsonInnerValArrayInnerResultItem of json.array) {
            let jsonInnerValArrayInnerResultItemResult;
            if (typeof jsonInnerValArrayInnerResultItem === "boolean") {
              jsonInnerValArrayInnerResultItemResult =
                jsonInnerValArrayInnerResultItem;
            } else {
              $fallback(
                "/array/[0]",
                "/properties/array/elements/type",
                "Expected boolean for /array/[0]",
              );
            }
            jsonInnerValArrayInnerResult.push(
              jsonInnerValArrayInnerResultItemResult,
            );
          }
          jsonInnerVal.array = jsonInnerValArrayInnerResult;
        } else {
          $fallback("/array", "/properties/array", "Expected Array");
        }
        if (typeof json.object === "object" && json.object !== null) {
          const jsonObjectInnerVal = {};
          if (typeof json.object.string === "string") {
            jsonObjectInnerVal.string = json.object.string;
          } else {
            $fallback(
              "/object/string",
              "/properties/object/properties/string/type",
              "Expected string at /object/string",
            );
          }
          if (typeof json.object.boolean === "boolean") {
            jsonObjectInnerVal.boolean = json.object.boolean;
          } else {
            $fallback(
              "/object/boolean",
              "/properties/object/properties/boolean/type",
              "Expected boolean for /object/boolean",
            );
          }
          if (
            typeof json.object.timestamp === "object" &&
            json.object.timestamp instanceof Date
          ) {
            jsonObjectInnerVal.timestamp = json.object.timestamp;
          } else if (typeof json.object.timestamp === "string") {
            jsonObjectInnerVal.timestamp = new Date(json.object.timestamp);
          } else {
            $fallback(
              "/object/timestamp",
              "/properties/object/properties/timestamp",
              "Expected instanceof Date or ISO Date string at /object/timestamp",
            );
          }
          jsonInnerVal.object = jsonObjectInnerVal;
        } else {
          $fallback("/object", "/properties/object", "Expected object");
        }
        if (typeof json.record === "object" && json.record !== null) {
          const jsonRecordResult = {};
          for (const jsonRecordKey of Object.keys(json.record)) {
            let jsonRecordKeyVal;
            if (typeof json.record[jsonRecordKey] === "boolean") {
              jsonRecordKeyVal = json.record[jsonRecordKey];
            } else {
              $fallback(
                "/record/[key]",
                "/properties/record/values/type",
                "Expected boolean for /record/[key]",
              );
            }
            jsonRecordResult[jsonRecordKey] = jsonRecordKeyVal;
          }
          jsonInnerVal.record = jsonRecordResult;
        } else {
          $fallback("/record", "/properties/record", "Expected object.");
        }
        if (
          typeof json.discriminator === "object" &&
          json.discriminator !== null
        ) {
          switch (json.discriminator.type) {
            case "A": {
              if (
                typeof json.discriminator === "object" &&
                json.discriminator !== null
              ) {
                const jsonDiscriminatorInnerVal = {};
                jsonDiscriminatorInnerVal.type = "A";
                if (typeof json.discriminator.title === "string") {
                  jsonDiscriminatorInnerVal.title = json.discriminator.title;
                } else {
                  $fallback(
                    "/discriminator/title",
                    "/properties/discriminator/mapping/properties/title/type",
                    "Expected string at /discriminator/title",
                  );
                }
                jsonInnerVal.discriminator = jsonDiscriminatorInnerVal;
              } else {
                $fallback(
                  "/discriminator",
                  "/properties/discriminator/mapping",
                  "Expected object",
                );
              }
              break;
            }
            case "B": {
              if (
                typeof json.discriminator === "object" &&
                json.discriminator !== null
              ) {
                const jsonDiscriminatorInnerVal = {};
                jsonDiscriminatorInnerVal.type = "B";
                if (typeof json.discriminator.title === "string") {
                  jsonDiscriminatorInnerVal.title = json.discriminator.title;
                } else {
                  $fallback(
                    "/discriminator/title",
                    "/properties/discriminator/mapping/properties/title/type",
                    "Expected string at /discriminator/title",
                  );
                }
                if (typeof json.discriminator.description === "string") {
                  jsonDiscriminatorInnerVal.description =
                    json.discriminator.description;
                } else {
                  $fallback(
                    "/discriminator/description",
                    "/properties/discriminator/mapping/properties/description/type",
                    "Expected string at /discriminator/description",
                  );
                }
                jsonInnerVal.discriminator = jsonDiscriminatorInnerVal;
              } else {
                $fallback(
                  "/discriminator",
                  "/properties/discriminator/mapping",
                  "Expected object",
                );
              }
              break;
            }
            default:
              $fallback(
                "/discriminator",
                "/properties/discriminator/mapping",
                "json.discriminator.type did not match one of the specified values",
              );
              break;
          }
        } else {
          $fallback(
            "/discriminator",
            "/properties/discriminator",
            "Expected Object.",
          );
        }
        if (
          typeof json.nestedObject === "object" &&
          json.nestedObject !== null
        ) {
          const jsonNestedObjectInnerVal = {};
          if (typeof json.nestedObject.id === "string") {
            jsonNestedObjectInnerVal.id = json.nestedObject.id;
          } else {
            $fallback(
              "/nestedObject/id",
              "/properties/nestedObject/properties/id/type",
              "Expected string at /nestedObject/id",
            );
          }
          if (
            typeof json.nestedObject.timestamp === "object" &&
            json.nestedObject.timestamp instanceof Date
          ) {
            jsonNestedObjectInnerVal.timestamp = json.nestedObject.timestamp;
          } else if (typeof json.nestedObject.timestamp === "string") {
            jsonNestedObjectInnerVal.timestamp = new Date(
              json.nestedObject.timestamp,
            );
          } else {
            $fallback(
              "/nestedObject/timestamp",
              "/properties/nestedObject/properties/timestamp",
              "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
            );
          }
          if (
            typeof json.nestedObject.data === "object" &&
            json.nestedObject.data !== null
          ) {
            const jsonNestedObjectDataInnerVal = {};
            if (typeof json.nestedObject.data.id === "string") {
              jsonNestedObjectDataInnerVal.id = json.nestedObject.data.id;
            } else {
              $fallback(
                "/nestedObject/data/id",
                "/properties/nestedObject/properties/data/properties/id/type",
                "Expected string at /nestedObject/data/id",
              );
            }
            if (
              typeof json.nestedObject.data.timestamp === "object" &&
              json.nestedObject.data.timestamp instanceof Date
            ) {
              jsonNestedObjectDataInnerVal.timestamp =
                json.nestedObject.data.timestamp;
            } else if (typeof json.nestedObject.data.timestamp === "string") {
              jsonNestedObjectDataInnerVal.timestamp = new Date(
                json.nestedObject.data.timestamp,
              );
            } else {
              $fallback(
                "/nestedObject/data/timestamp",
                "/properties/nestedObject/properties/data/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
              );
            }
            if (
              typeof json.nestedObject.data.data === "object" &&
              json.nestedObject.data.data !== null
            ) {
              const jsonNestedObjectDataDataInnerVal = {};
              if (typeof json.nestedObject.data.data.id === "string") {
                jsonNestedObjectDataDataInnerVal.id =
                  json.nestedObject.data.data.id;
              } else {
                $fallback(
                  "/nestedObject/data/data/id",
                  "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                  "Expected string at /nestedObject/data/data/id",
                );
              }
              if (
                typeof json.nestedObject.data.data.timestamp === "object" &&
                json.nestedObject.data.data.timestamp instanceof Date
              ) {
                jsonNestedObjectDataDataInnerVal.timestamp =
                  json.nestedObject.data.data.timestamp;
              } else if (
                typeof json.nestedObject.data.data.timestamp === "string"
              ) {
                jsonNestedObjectDataDataInnerVal.timestamp = new Date(
                  json.nestedObject.data.data.timestamp,
                );
              } else {
                $fallback(
                  "/nestedObject/data/data/timestamp",
                  "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                );
              }
              jsonNestedObjectDataInnerVal.data =
                jsonNestedObjectDataDataInnerVal;
            } else {
              $fallback(
                "/nestedObject/data/data",
                "/properties/nestedObject/properties/data/properties/data",
                "Expected object",
              );
            }
            jsonNestedObjectInnerVal.data = jsonNestedObjectDataInnerVal;
          } else {
            $fallback(
              "/nestedObject/data",
              "/properties/nestedObject/properties/data",
              "Expected object",
            );
          }
          jsonInnerVal.nestedObject = jsonNestedObjectInnerVal;
        } else {
          $fallback(
            "/nestedObject",
            "/properties/nestedObject",
            "Expected object",
          );
        }
        if (Array.isArray(json.nestedArray)) {
          const jsonInnerValNestedArrayInnerResult = [];
          for (const jsonInnerValNestedArrayInnerResultItem of json.nestedArray) {
            let jsonInnerValNestedArrayInnerResultItemResult;
            if (Array.isArray(jsonInnerValNestedArrayInnerResultItem)) {
              const jsonInnerValNestedArrayInnerResultItemResultInnerResult =
                [];
              for (const jsonInnerValNestedArrayInnerResultItemResultInnerResultItem of jsonInnerValNestedArrayInnerResultItem) {
                let jsonInnerValNestedArrayInnerResultItemResultInnerResultItemResult;
                if (
                  typeof jsonInnerValNestedArrayInnerResultItemResultInnerResultItem ===
                    "object" &&
                  jsonInnerValNestedArrayInnerResultItemResultInnerResultItem !==
                    null
                ) {
                  const jsonInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal =
                    {};
                  if (
                    typeof jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.id ===
                    "string"
                  ) {
                    jsonInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.id =
                      jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.id;
                  } else {
                    $fallback(
                      "/nestedArray/[0]/[0]/id",
                      "/properties/nestedArray/elements/elements/properties/id/type",
                      "Expected string at /nestedArray/[0]/[0]/id",
                    );
                  }
                  if (
                    typeof jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp ===
                      "object" &&
                    jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp instanceof
                      Date
                  ) {
                    jsonInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.timestamp =
                      jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp;
                  } else if (
                    typeof jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp ===
                    "string"
                  ) {
                    jsonInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.timestamp =
                      new Date(
                        jsonInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp,
                      );
                  } else {
                    $fallback(
                      "/nestedArray/[0]/[0]/timestamp",
                      "/properties/nestedArray/elements/elements/properties/timestamp",
                      "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                    );
                  }
                  jsonInnerValNestedArrayInnerResultItemResultInnerResultItemResult =
                    jsonInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal;
                } else {
                  $fallback(
                    "/nestedArray/[0]/[0]",
                    "/properties/nestedArray/elements/elements",
                    "Expected object",
                  );
                }
                jsonInnerValNestedArrayInnerResultItemResultInnerResult.push(
                  jsonInnerValNestedArrayInnerResultItemResultInnerResultItemResult,
                );
              }
              jsonInnerValNestedArrayInnerResultItemResult =
                jsonInnerValNestedArrayInnerResultItemResultInnerResult;
            } else {
              $fallback(
                "/nestedArray/[0]",
                "/properties/nestedArray/elements",
                "Expected Array",
              );
            }
            jsonInnerValNestedArrayInnerResult.push(
              jsonInnerValNestedArrayInnerResultItemResult,
            );
          }
          jsonInnerVal.nestedArray = jsonInnerValNestedArrayInnerResult;
        } else {
          $fallback(
            "/nestedArray",
            "/properties/nestedArray",
            "Expected Array",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      inputInnerVal.any = input.any;
      if (typeof input.boolean === "boolean") {
        inputInnerVal.boolean = input.boolean;
      } else {
        $fallback(
          "/boolean",
          "/properties/boolean/type",
          "Expected boolean for /boolean",
        );
      }
      if (typeof input.string === "string") {
        inputInnerVal.string = input.string;
      } else {
        $fallback(
          "/string",
          "/properties/string/type",
          "Expected string at /string",
        );
      }
      if (
        typeof input.timestamp === "object" &&
        input.timestamp instanceof Date
      ) {
        inputInnerVal.timestamp = input.timestamp;
      } else if (typeof input.timestamp === "string") {
        inputInnerVal.timestamp = new Date(input.timestamp);
      } else {
        $fallback(
          "/timestamp",
          "/properties/timestamp",
          "Expected instanceof Date or ISO Date string at /timestamp",
        );
      }
      if (typeof input.float32 === "number" && !Number.isNaN(input.float32)) {
        inputInnerVal.float32 = input.float32;
      } else {
        $fallback(
          "/float32",
          "/properties/float32/type",
          "Expected number at /float32",
        );
      }
      if (typeof input.float64 === "number" && !Number.isNaN(input.float64)) {
        inputInnerVal.float64 = input.float64;
      } else {
        $fallback(
          "/float64",
          "/properties/float64/type",
          "Expected number at /float64",
        );
      }
      if (
        typeof input.int8 === "number" &&
        Number.isInteger(input.int8) &&
        input.int8 >= -128 &&
        input.int8 <= 127
      ) {
        inputInnerVal.int8 = input.int8;
      } else {
        $fallback(
          "/int8",
          "/properties/int8",
          "Expected valid integer between -128 and 127",
        );
      }
      if (
        typeof input.uint8 === "number" &&
        Number.isInteger(input.uint8) &&
        input.uint8 >= 0 &&
        input.uint8 <= 255
      ) {
        inputInnerVal.uint8 = input.uint8;
      } else {
        $fallback(
          "/uint8",
          "/properties/uint8",
          "Expected valid integer between 0 and 255",
        );
      }
      if (
        typeof input.int16 === "number" &&
        Number.isInteger(input.int16) &&
        input.int16 >= -32768 &&
        input.int16 <= 32767
      ) {
        inputInnerVal.int16 = input.int16;
      } else {
        $fallback(
          "/int16",
          "/properties/int16",
          "Expected valid integer between -32768 and 32767",
        );
      }
      if (
        typeof input.uint16 === "number" &&
        Number.isInteger(input.uint16) &&
        input.uint16 >= 0 &&
        input.uint16 <= 65535
      ) {
        inputInnerVal.uint16 = input.uint16;
      } else {
        $fallback(
          "/uint16",
          "/properties/uint16",
          "Expected valid integer between 0 and 65535",
        );
      }
      if (
        typeof input.int32 === "number" &&
        Number.isInteger(input.int32) &&
        input.int32 >= -2147483648 &&
        input.int32 <= 2147483647
      ) {
        inputInnerVal.int32 = input.int32;
      } else {
        $fallback(
          "/int32",
          "/properties/int32",
          "Expected valid integer between -2147483648 and 2147483647",
        );
      }
      if (
        typeof input.uint32 === "number" &&
        Number.isInteger(input.uint32) &&
        input.uint32 >= 0 &&
        input.uint32 <= 4294967295
      ) {
        inputInnerVal.uint32 = input.uint32;
      } else {
        $fallback(
          "/uint32",
          "/properties/uint32",
          "Expected valid integer between 0 and 4294967295",
        );
      }
      if (typeof input.int64 === "string" || typeof input.int64 === "number") {
        try {
          const val = BigInt(input.int64);
          inputInnerVal.int64 = val;
        } catch (err) {
          $fallback(
            "/int64",
            "/properties/int64",
            "Unable to parse BigInt from input.int64.",
          );
        }
      } else if (typeof input.int64 === "bigint") {
        inputInnerVal.int64 = input.int64;
      } else {
        $fallback(
          "/int64",
          "/properties/int64",
          "Expected BigInt or Integer string. Got ${input.int64}",
        );
      }
      if (
        typeof input.uint64 === "string" ||
        typeof input.uint64 === "number"
      ) {
        try {
          const val = BigInt(input.uint64);
          if (val >= BigInt("0")) {
            inputInnerVal.uint64 = val;
          } else {
            $fallback(
              "/uint64",
              "/properties/uint64",
              "Unsigned int must be greater than or equal to 0.",
            );
          }
        } catch (err) {
          $fallback(
            "/uint64",
            "/properties/uint64",
            "Unable to parse BigInt from input.uint64.",
          );
        }
      } else if (typeof input.uint64 === "bigint") {
        if (input.uint64 >= BigInt("0")) {
          inputInnerVal.uint64 = input.uint64;
        } else {
          $fallback(
            "/uint64",
            "/properties/uint64",
            "Unsigned int must be greater than or equal to 0.",
          );
        }
      } else {
        $fallback(
          "/uint64",
          "/properties/uint64",
          "Expected BigInt or Integer string. Got ${input.uint64}",
        );
      }
      if (typeof input.enumerator === "string") {
        if (
          input.enumerator === "A" ||
          input.enumerator === "B" ||
          input.enumerator === "C"
        ) {
          inputInnerVal.enumerator = input.enumerator;
        } else {
          $fallback(
            "/enumerator",
            "/properties/enumerator",
            "Expected one of the following values: [A, B, C] at /enumerator.",
          );
        }
      } else {
        $fallback(
          "/enumerator",
          "/properties/enumerator",
          "Expected one of the following values: [A, B, C] at /enumerator.",
        );
      }
      if (Array.isArray(input.array)) {
        const inputInnerValArrayInnerResult = [];
        for (const inputInnerValArrayInnerResultItem of input.array) {
          let inputInnerValArrayInnerResultItemResult;
          if (typeof inputInnerValArrayInnerResultItem === "boolean") {
            inputInnerValArrayInnerResultItemResult =
              inputInnerValArrayInnerResultItem;
          } else {
            $fallback(
              "/array/[0]",
              "/properties/array/elements/type",
              "Expected boolean for /array/[0]",
            );
          }
          inputInnerValArrayInnerResult.push(
            inputInnerValArrayInnerResultItemResult,
          );
        }
        inputInnerVal.array = inputInnerValArrayInnerResult;
      } else {
        $fallback("/array", "/properties/array", "Expected Array");
      }
      if (typeof input.object === "object" && input.object !== null) {
        const inputObjectInnerVal = {};
        if (typeof input.object.string === "string") {
          inputObjectInnerVal.string = input.object.string;
        } else {
          $fallback(
            "/object/string",
            "/properties/object/properties/string/type",
            "Expected string at /object/string",
          );
        }
        if (typeof input.object.boolean === "boolean") {
          inputObjectInnerVal.boolean = input.object.boolean;
        } else {
          $fallback(
            "/object/boolean",
            "/properties/object/properties/boolean/type",
            "Expected boolean for /object/boolean",
          );
        }
        if (
          typeof input.object.timestamp === "object" &&
          input.object.timestamp instanceof Date
        ) {
          inputObjectInnerVal.timestamp = input.object.timestamp;
        } else if (typeof input.object.timestamp === "string") {
          inputObjectInnerVal.timestamp = new Date(input.object.timestamp);
        } else {
          $fallback(
            "/object/timestamp",
            "/properties/object/properties/timestamp",
            "Expected instanceof Date or ISO Date string at /object/timestamp",
          );
        }
        inputInnerVal.object = inputObjectInnerVal;
      } else {
        $fallback("/object", "/properties/object", "Expected object");
      }
      if (typeof input.record === "object" && input.record !== null) {
        const inputRecordResult = {};
        for (const inputRecordKey of Object.keys(input.record)) {
          let inputRecordKeyVal;
          if (typeof input.record[inputRecordKey] === "boolean") {
            inputRecordKeyVal = input.record[inputRecordKey];
          } else {
            $fallback(
              "/record/[key]",
              "/properties/record/values/type",
              "Expected boolean for /record/[key]",
            );
          }
          inputRecordResult[inputRecordKey] = inputRecordKeyVal;
        }
        inputInnerVal.record = inputRecordResult;
      } else {
        $fallback("/record", "/properties/record", "Expected object.");
      }
      if (
        typeof input.discriminator === "object" &&
        input.discriminator !== null
      ) {
        switch (input.discriminator.type) {
          case "A": {
            if (
              typeof input.discriminator === "object" &&
              input.discriminator !== null
            ) {
              const inputDiscriminatorInnerVal = {};
              inputDiscriminatorInnerVal.type = "A";
              if (typeof input.discriminator.title === "string") {
                inputDiscriminatorInnerVal.title = input.discriminator.title;
              } else {
                $fallback(
                  "/discriminator/title",
                  "/properties/discriminator/mapping/properties/title/type",
                  "Expected string at /discriminator/title",
                );
              }
              inputInnerVal.discriminator = inputDiscriminatorInnerVal;
            } else {
              $fallback(
                "/discriminator",
                "/properties/discriminator/mapping",
                "Expected object",
              );
            }
            break;
          }
          case "B": {
            if (
              typeof input.discriminator === "object" &&
              input.discriminator !== null
            ) {
              const inputDiscriminatorInnerVal = {};
              inputDiscriminatorInnerVal.type = "B";
              if (typeof input.discriminator.title === "string") {
                inputDiscriminatorInnerVal.title = input.discriminator.title;
              } else {
                $fallback(
                  "/discriminator/title",
                  "/properties/discriminator/mapping/properties/title/type",
                  "Expected string at /discriminator/title",
                );
              }
              if (typeof input.discriminator.description === "string") {
                inputDiscriminatorInnerVal.description =
                  input.discriminator.description;
              } else {
                $fallback(
                  "/discriminator/description",
                  "/properties/discriminator/mapping/properties/description/type",
                  "Expected string at /discriminator/description",
                );
              }
              inputInnerVal.discriminator = inputDiscriminatorInnerVal;
            } else {
              $fallback(
                "/discriminator",
                "/properties/discriminator/mapping",
                "Expected object",
              );
            }
            break;
          }
          default:
            $fallback(
              "/discriminator",
              "/properties/discriminator/mapping",
              "input.discriminator.type did not match one of the specified values",
            );
            break;
        }
      } else {
        $fallback(
          "/discriminator",
          "/properties/discriminator",
          "Expected Object.",
        );
      }
      if (
        typeof input.nestedObject === "object" &&
        input.nestedObject !== null
      ) {
        const inputNestedObjectInnerVal = {};
        if (typeof input.nestedObject.id === "string") {
          inputNestedObjectInnerVal.id = input.nestedObject.id;
        } else {
          $fallback(
            "/nestedObject/id",
            "/properties/nestedObject/properties/id/type",
            "Expected string at /nestedObject/id",
          );
        }
        if (
          typeof input.nestedObject.timestamp === "object" &&
          input.nestedObject.timestamp instanceof Date
        ) {
          inputNestedObjectInnerVal.timestamp = input.nestedObject.timestamp;
        } else if (typeof input.nestedObject.timestamp === "string") {
          inputNestedObjectInnerVal.timestamp = new Date(
            input.nestedObject.timestamp,
          );
        } else {
          $fallback(
            "/nestedObject/timestamp",
            "/properties/nestedObject/properties/timestamp",
            "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
          );
        }
        if (
          typeof input.nestedObject.data === "object" &&
          input.nestedObject.data !== null
        ) {
          const inputNestedObjectDataInnerVal = {};
          if (typeof input.nestedObject.data.id === "string") {
            inputNestedObjectDataInnerVal.id = input.nestedObject.data.id;
          } else {
            $fallback(
              "/nestedObject/data/id",
              "/properties/nestedObject/properties/data/properties/id/type",
              "Expected string at /nestedObject/data/id",
            );
          }
          if (
            typeof input.nestedObject.data.timestamp === "object" &&
            input.nestedObject.data.timestamp instanceof Date
          ) {
            inputNestedObjectDataInnerVal.timestamp =
              input.nestedObject.data.timestamp;
          } else if (typeof input.nestedObject.data.timestamp === "string") {
            inputNestedObjectDataInnerVal.timestamp = new Date(
              input.nestedObject.data.timestamp,
            );
          } else {
            $fallback(
              "/nestedObject/data/timestamp",
              "/properties/nestedObject/properties/data/properties/timestamp",
              "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
            );
          }
          if (
            typeof input.nestedObject.data.data === "object" &&
            input.nestedObject.data.data !== null
          ) {
            const inputNestedObjectDataDataInnerVal = {};
            if (typeof input.nestedObject.data.data.id === "string") {
              inputNestedObjectDataDataInnerVal.id =
                input.nestedObject.data.data.id;
            } else {
              $fallback(
                "/nestedObject/data/data/id",
                "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                "Expected string at /nestedObject/data/data/id",
              );
            }
            if (
              typeof input.nestedObject.data.data.timestamp === "object" &&
              input.nestedObject.data.data.timestamp instanceof Date
            ) {
              inputNestedObjectDataDataInnerVal.timestamp =
                input.nestedObject.data.data.timestamp;
            } else if (
              typeof input.nestedObject.data.data.timestamp === "string"
            ) {
              inputNestedObjectDataDataInnerVal.timestamp = new Date(
                input.nestedObject.data.data.timestamp,
              );
            } else {
              $fallback(
                "/nestedObject/data/data/timestamp",
                "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
              );
            }
            inputNestedObjectDataInnerVal.data =
              inputNestedObjectDataDataInnerVal;
          } else {
            $fallback(
              "/nestedObject/data/data",
              "/properties/nestedObject/properties/data/properties/data",
              "Expected object",
            );
          }
          inputNestedObjectInnerVal.data = inputNestedObjectDataInnerVal;
        } else {
          $fallback(
            "/nestedObject/data",
            "/properties/nestedObject/properties/data",
            "Expected object",
          );
        }
        inputInnerVal.nestedObject = inputNestedObjectInnerVal;
      } else {
        $fallback(
          "/nestedObject",
          "/properties/nestedObject",
          "Expected object",
        );
      }
      if (Array.isArray(input.nestedArray)) {
        const inputInnerValNestedArrayInnerResult = [];
        for (const inputInnerValNestedArrayInnerResultItem of input.nestedArray) {
          let inputInnerValNestedArrayInnerResultItemResult;
          if (Array.isArray(inputInnerValNestedArrayInnerResultItem)) {
            const inputInnerValNestedArrayInnerResultItemResultInnerResult = [];
            for (const inputInnerValNestedArrayInnerResultItemResultInnerResultItem of inputInnerValNestedArrayInnerResultItem) {
              let inputInnerValNestedArrayInnerResultItemResultInnerResultItemResult;
              if (
                typeof inputInnerValNestedArrayInnerResultItemResultInnerResultItem ===
                  "object" &&
                inputInnerValNestedArrayInnerResultItemResultInnerResultItem !==
                  null
              ) {
                const inputInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal =
                  {};
                if (
                  typeof inputInnerValNestedArrayInnerResultItemResultInnerResultItem.id ===
                  "string"
                ) {
                  inputInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.id =
                    inputInnerValNestedArrayInnerResultItemResultInnerResultItem.id;
                } else {
                  $fallback(
                    "/nestedArray/[0]/[0]/id",
                    "/properties/nestedArray/elements/elements/properties/id/type",
                    "Expected string at /nestedArray/[0]/[0]/id",
                  );
                }
                if (
                  typeof inputInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp ===
                    "object" &&
                  inputInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp instanceof
                    Date
                ) {
                  inputInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.timestamp =
                    inputInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp;
                } else if (
                  typeof inputInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp ===
                  "string"
                ) {
                  inputInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal.timestamp =
                    new Date(
                      inputInnerValNestedArrayInnerResultItemResultInnerResultItem.timestamp,
                    );
                } else {
                  $fallback(
                    "/nestedArray/[0]/[0]/timestamp",
                    "/properties/nestedArray/elements/elements/properties/timestamp",
                    "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                  );
                }
                inputInnerValNestedArrayInnerResultItemResultInnerResultItemResult =
                  inputInnerValNestedArrayInnerResultItemResultInnerResultItemInnerVal;
              } else {
                $fallback(
                  "/nestedArray/[0]/[0]",
                  "/properties/nestedArray/elements/elements",
                  "Expected object",
                );
              }
              inputInnerValNestedArrayInnerResultItemResultInnerResult.push(
                inputInnerValNestedArrayInnerResultItemResultInnerResultItemResult,
              );
            }
            inputInnerValNestedArrayInnerResultItemResult =
              inputInnerValNestedArrayInnerResultItemResultInnerResult;
          } else {
            $fallback(
              "/nestedArray/[0]",
              "/properties/nestedArray/elements",
              "Expected Array",
            );
          }
          inputInnerValNestedArrayInnerResult.push(
            inputInnerValNestedArrayInnerResultItemResult,
          );
        }
        inputInnerVal.nestedArray = inputInnerValNestedArrayInnerResult;
      } else {
        $fallback("/nestedArray", "/properties/nestedArray", "Expected Array");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: ProcessEveryTypeParams): string {
    let json = "";
    json += "{";
    if (typeof input.any !== "undefined") {
      json += '"any":' + JSON.stringify(input.any);
    }
    json += `,"boolean":${input.boolean}`;
    json += `,"string":"${input.string.replace(/[\n]/g, "\\n")}"`;
    json += `,"timestamp":"${input.timestamp.toISOString()}"`;
    json += `,"float32":${input.float32}`;
    json += `,"float64":${input.float64}`;
    json += `,"int8":${input.int8}`;
    json += `,"uint8":${input.uint8}`;
    json += `,"int16":${input.int16}`;
    json += `,"uint16":${input.uint16}`;
    json += `,"int32":${input.int32}`;
    json += `,"uint32":${input.uint32}`;
    json += `,"int64":"${input.int64.toString()}"`;
    json += `,"uint64":"${input.uint64.toString()}"`;
    json += `,"enumerator":"${input.enumerator}"`;
    json += ',"array":[';
    for (let i = 0; i < input.array.length; i++) {
      const inputArrayItem = input.array[i];
      if (i !== 0) {
        json += ",";
      }
      json += `${inputArrayItem}`;
    }
    json += "]";
    json += ',"object":{';
    json += `"string":"${input.object.string.replace(/[\n]/g, "\\n")}"`;
    json += `,"boolean":${input.object.boolean}`;
    json += `,"timestamp":"${input.object.timestamp.toISOString()}"`;
    json += "}";
    const recordKeys = Object.keys(input.record);
    json += ',"record":{';
    for (let i = 0; i < recordKeys.length; i++) {
      const key = recordKeys[i];
      const innerVal = input.record[key];
      if (i !== 0) {
        json += `,"${key}":`;
      } else {
        json += `"${key}":`;
      }
      json += `${innerVal}`;
    }
    json += "}";
    switch (input.discriminator.type) {
      case "A": {
        json += ',"discriminator":{';
        json += `"type":"A"`;
        json += `,"title":"${input.discriminator.title.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
        break;
      }
      case "B": {
        json += ',"discriminator":{';
        json += `"type":"B"`;
        json += `,"title":"${input.discriminator.title.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += `,"description":"${input.discriminator.description.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
        break;
      }
    }
    json += ',"nestedObject":{';
    json += `"id":"${input.nestedObject.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"timestamp":"${input.nestedObject.timestamp.toISOString()}"`;
    json += ',"data":{';
    json += `"id":"${input.nestedObject.data.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"timestamp":"${input.nestedObject.data.timestamp.toISOString()}"`;
    json += ',"data":{';
    json += `"id":"${input.nestedObject.data.data.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"timestamp":"${input.nestedObject.data.data.timestamp.toISOString()}"`;
    json += "}";
    json += "}";
    json += "}";
    json += ',"nestedArray":[';
    for (let i = 0; i < input.nestedArray.length; i++) {
      const inputNestedArrayItem = input.nestedArray[i];
      if (i !== 0) {
        json += ",";
      }
      json += "[";
      for (let i = 0; i < inputNestedArrayItem.length; i++) {
        const inputNestedArrayItemItem = inputNestedArrayItem[i];
        if (i !== 0) {
          json += ",";
        }
        json += "{";
        json += `"id":"${inputNestedArrayItemItem.id.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${inputNestedArrayItemItem.timestamp.toISOString()}"`;
        json += "}";
      }
      json += "]";
    }
    json += "]";
    json += "}";
    return json;
  },
};
export type ProcessEveryTypeParamsEnumerator = "A" | "B" | "C";
export interface ProcessEveryTypeParamsObject {
  string: string;
  boolean: boolean;
  timestamp: Date;
}

export type ProcessEveryTypeParamsRecord = Record<string, boolean>;

export type ProcessEveryTypeParamsDiscriminator =
  | ProcessEveryTypeParamsDiscriminatorA
  | ProcessEveryTypeParamsDiscriminatorB;

export interface ProcessEveryTypeParamsDiscriminatorA {
  type: "A";
  title: string;
}

export interface ProcessEveryTypeParamsDiscriminatorB {
  type: "B";
  title: string;
  description: string;
}

export interface ProcessEveryTypeParamsNestedObject {
  id: string;
  timestamp: Date;
  data: ProcessEveryTypeParamsNestedObjectData;
}

export interface ProcessEveryTypeParamsNestedObjectData {
  id: string;
  timestamp: Date;
  data: ProcessEveryTypeParamsNestedObjectDataData;
}

export interface ProcessEveryTypeParamsNestedObjectDataData {
  id: string;
  timestamp: Date;
}

export interface ProcessEveryTypeParamsNestedArrayItemItem {
  id: string;
  timestamp: Date;
}

export interface PostParams {
  postId: string;
}
const $$PostParams = {
  parse(input: Record<any, any>): PostParams {
    class $ValidationErrorpostParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.postId === "string") {
          jsonInnerVal.postId = json.postId;
        } else {
          $fallback(
            "/postId",
            "/properties/postId/type",
            "Expected string at /postId",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.postId === "string") {
        inputInnerVal.postId = input.postId;
      } else {
        $fallback(
          "/postId",
          "/properties/postId/type",
          "Expected string at /postId",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostParams): string {
    let json = "";
    json += "{";
    json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    return json;
  },
};

export interface Post {
  id: string;
  title: string;
  type: PostType;
  description: string | null;
  content: string;
  tags: Array<string>;
  authorId: string;
  author: Author;
  createdAt: Date;
  updatedAt: Date;
}
const $$Post = {
  parse(input: Record<any, any>): Post {
    class $ValidationErrorpost extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpost({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.id === "string") {
          jsonInnerVal.id = json.id;
        } else {
          $fallback("/id", "/properties/id/type", "Expected string at /id");
        }
        if (typeof json.title === "string") {
          jsonInnerVal.title = json.title;
        } else {
          $fallback(
            "/title",
            "/properties/title/type",
            "Expected string at /title",
          );
        }
        if (typeof json.type === "string") {
          if (
            json.type === "text" ||
            json.type === "image" ||
            json.type === "video"
          ) {
            jsonInnerVal.type = json.type;
          } else {
            $fallback(
              "/type",
              "/properties/type",
              "Expected one of the following values: [text, image, video] at /type.",
            );
          }
        } else {
          $fallback(
            "/type",
            "/properties/type",
            "Expected one of the following values: [text, image, video] at /type.",
          );
        }
        if (json.description === null) {
          jsonInnerVal.description = json.description;
        } else {
          if (typeof json.description === "string") {
            jsonInnerVal.description = json.description;
          } else {
            $fallback(
              "/description",
              "/properties/description/type",
              "Expected string at /description",
            );
          }
        }
        if (typeof json.content === "string") {
          jsonInnerVal.content = json.content;
        } else {
          $fallback(
            "/content",
            "/properties/content/type",
            "Expected string at /content",
          );
        }
        if (Array.isArray(json.tags)) {
          const jsonInnerValTagsInnerResult = [];
          for (const jsonInnerValTagsInnerResultItem of json.tags) {
            let jsonInnerValTagsInnerResultItemResult;
            if (typeof jsonInnerValTagsInnerResultItem === "string") {
              jsonInnerValTagsInnerResultItemResult =
                jsonInnerValTagsInnerResultItem;
            } else {
              $fallback(
                "/tags/[0]",
                "/properties/tags/elements/type",
                "Expected string at /tags/[0]",
              );
            }
            jsonInnerValTagsInnerResult.push(
              jsonInnerValTagsInnerResultItemResult,
            );
          }
          jsonInnerVal.tags = jsonInnerValTagsInnerResult;
        } else {
          $fallback("/tags", "/properties/tags", "Expected Array");
        }
        if (typeof json.authorId === "string") {
          jsonInnerVal.authorId = json.authorId;
        } else {
          $fallback(
            "/authorId",
            "/properties/authorId/type",
            "Expected string at /authorId",
          );
        }
        if (typeof json.author === "object" && json.author !== null) {
          const jsonAuthorInnerVal = {};
          if (typeof json.author.id === "string") {
            jsonAuthorInnerVal.id = json.author.id;
          } else {
            $fallback(
              "/author/id",
              "/properties/author/properties/id/type",
              "Expected string at /author/id",
            );
          }
          if (typeof json.author.name === "string") {
            jsonAuthorInnerVal.name = json.author.name;
          } else {
            $fallback(
              "/author/name",
              "/properties/author/properties/name/type",
              "Expected string at /author/name",
            );
          }
          if (json.author.bio === null) {
            jsonAuthorInnerVal.bio = json.author.bio;
          } else {
            if (typeof json.author.bio === "string") {
              jsonAuthorInnerVal.bio = json.author.bio;
            } else {
              $fallback(
                "/author/bio",
                "/properties/author/properties/bio/type",
                "Expected string at /author/bio",
              );
            }
          }
          if (
            typeof json.author.createdAt === "object" &&
            json.author.createdAt instanceof Date
          ) {
            jsonAuthorInnerVal.createdAt = json.author.createdAt;
          } else if (typeof json.author.createdAt === "string") {
            jsonAuthorInnerVal.createdAt = new Date(json.author.createdAt);
          } else {
            $fallback(
              "/author/createdAt",
              "/properties/author/properties/createdAt",
              "Expected instanceof Date or ISO Date string at /author/createdAt",
            );
          }
          if (
            typeof json.author.updatedAt === "object" &&
            json.author.updatedAt instanceof Date
          ) {
            jsonAuthorInnerVal.updatedAt = json.author.updatedAt;
          } else if (typeof json.author.updatedAt === "string") {
            jsonAuthorInnerVal.updatedAt = new Date(json.author.updatedAt);
          } else {
            $fallback(
              "/author/updatedAt",
              "/properties/author/properties/updatedAt",
              "Expected instanceof Date or ISO Date string at /author/updatedAt",
            );
          }
          jsonInnerVal.author = jsonAuthorInnerVal;
        } else {
          $fallback("/author", "/properties/author", "Expected object");
        }
        if (
          typeof json.createdAt === "object" &&
          json.createdAt instanceof Date
        ) {
          jsonInnerVal.createdAt = json.createdAt;
        } else if (typeof json.createdAt === "string") {
          jsonInnerVal.createdAt = new Date(json.createdAt);
        } else {
          $fallback(
            "/createdAt",
            "/properties/createdAt",
            "Expected instanceof Date or ISO Date string at /createdAt",
          );
        }
        if (
          typeof json.updatedAt === "object" &&
          json.updatedAt instanceof Date
        ) {
          jsonInnerVal.updatedAt = json.updatedAt;
        } else if (typeof json.updatedAt === "string") {
          jsonInnerVal.updatedAt = new Date(json.updatedAt);
        } else {
          $fallback(
            "/updatedAt",
            "/properties/updatedAt",
            "Expected instanceof Date or ISO Date string at /updatedAt",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.id === "string") {
        inputInnerVal.id = input.id;
      } else {
        $fallback("/id", "/properties/id/type", "Expected string at /id");
      }
      if (typeof input.title === "string") {
        inputInnerVal.title = input.title;
      } else {
        $fallback(
          "/title",
          "/properties/title/type",
          "Expected string at /title",
        );
      }
      if (typeof input.type === "string") {
        if (
          input.type === "text" ||
          input.type === "image" ||
          input.type === "video"
        ) {
          inputInnerVal.type = input.type;
        } else {
          $fallback(
            "/type",
            "/properties/type",
            "Expected one of the following values: [text, image, video] at /type.",
          );
        }
      } else {
        $fallback(
          "/type",
          "/properties/type",
          "Expected one of the following values: [text, image, video] at /type.",
        );
      }
      if (input.description === null) {
        inputInnerVal.description = input.description;
      } else {
        if (typeof input.description === "string") {
          inputInnerVal.description = input.description;
        } else {
          $fallback(
            "/description",
            "/properties/description/type",
            "Expected string at /description",
          );
        }
      }
      if (typeof input.content === "string") {
        inputInnerVal.content = input.content;
      } else {
        $fallback(
          "/content",
          "/properties/content/type",
          "Expected string at /content",
        );
      }
      if (Array.isArray(input.tags)) {
        const inputInnerValTagsInnerResult = [];
        for (const inputInnerValTagsInnerResultItem of input.tags) {
          let inputInnerValTagsInnerResultItemResult;
          if (typeof inputInnerValTagsInnerResultItem === "string") {
            inputInnerValTagsInnerResultItemResult =
              inputInnerValTagsInnerResultItem;
          } else {
            $fallback(
              "/tags/[0]",
              "/properties/tags/elements/type",
              "Expected string at /tags/[0]",
            );
          }
          inputInnerValTagsInnerResult.push(
            inputInnerValTagsInnerResultItemResult,
          );
        }
        inputInnerVal.tags = inputInnerValTagsInnerResult;
      } else {
        $fallback("/tags", "/properties/tags", "Expected Array");
      }
      if (typeof input.authorId === "string") {
        inputInnerVal.authorId = input.authorId;
      } else {
        $fallback(
          "/authorId",
          "/properties/authorId/type",
          "Expected string at /authorId",
        );
      }
      if (typeof input.author === "object" && input.author !== null) {
        const inputAuthorInnerVal = {};
        if (typeof input.author.id === "string") {
          inputAuthorInnerVal.id = input.author.id;
        } else {
          $fallback(
            "/author/id",
            "/properties/author/properties/id/type",
            "Expected string at /author/id",
          );
        }
        if (typeof input.author.name === "string") {
          inputAuthorInnerVal.name = input.author.name;
        } else {
          $fallback(
            "/author/name",
            "/properties/author/properties/name/type",
            "Expected string at /author/name",
          );
        }
        if (input.author.bio === null) {
          inputAuthorInnerVal.bio = input.author.bio;
        } else {
          if (typeof input.author.bio === "string") {
            inputAuthorInnerVal.bio = input.author.bio;
          } else {
            $fallback(
              "/author/bio",
              "/properties/author/properties/bio/type",
              "Expected string at /author/bio",
            );
          }
        }
        if (
          typeof input.author.createdAt === "object" &&
          input.author.createdAt instanceof Date
        ) {
          inputAuthorInnerVal.createdAt = input.author.createdAt;
        } else if (typeof input.author.createdAt === "string") {
          inputAuthorInnerVal.createdAt = new Date(input.author.createdAt);
        } else {
          $fallback(
            "/author/createdAt",
            "/properties/author/properties/createdAt",
            "Expected instanceof Date or ISO Date string at /author/createdAt",
          );
        }
        if (
          typeof input.author.updatedAt === "object" &&
          input.author.updatedAt instanceof Date
        ) {
          inputAuthorInnerVal.updatedAt = input.author.updatedAt;
        } else if (typeof input.author.updatedAt === "string") {
          inputAuthorInnerVal.updatedAt = new Date(input.author.updatedAt);
        } else {
          $fallback(
            "/author/updatedAt",
            "/properties/author/properties/updatedAt",
            "Expected instanceof Date or ISO Date string at /author/updatedAt",
          );
        }
        inputInnerVal.author = inputAuthorInnerVal;
      } else {
        $fallback("/author", "/properties/author", "Expected object");
      }
      if (
        typeof input.createdAt === "object" &&
        input.createdAt instanceof Date
      ) {
        inputInnerVal.createdAt = input.createdAt;
      } else if (typeof input.createdAt === "string") {
        inputInnerVal.createdAt = new Date(input.createdAt);
      } else {
        $fallback(
          "/createdAt",
          "/properties/createdAt",
          "Expected instanceof Date or ISO Date string at /createdAt",
        );
      }
      if (
        typeof input.updatedAt === "object" &&
        input.updatedAt instanceof Date
      ) {
        inputInnerVal.updatedAt = input.updatedAt;
      } else if (typeof input.updatedAt === "string") {
        inputInnerVal.updatedAt = new Date(input.updatedAt);
      } else {
        $fallback(
          "/updatedAt",
          "/properties/updatedAt",
          "Expected instanceof Date or ISO Date string at /updatedAt",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: Post): string {
    let json = "";
    json += "{";
    json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"title":"${input.title.replace(/[\n]/g, "\\n")}"`;
    json += `,"type":"${input.type}"`;
    if (typeof input.description === "string") {
      json += `,"description":"${input.description.replace(/[\n]/g, "\\n")}"`;
    } else {
      json += ',"description":null';
    }
    json += `,"content":"${input.content.replace(/[\n]/g, "\\n")}"`;
    json += ',"tags":[';
    for (let i = 0; i < input.tags.length; i++) {
      const inputTagsItem = input.tags[i];
      if (i !== 0) {
        json += ",";
      }
      json += `"${inputTagsItem.replace(/[\n]/g, "\\n")}"`;
    }
    json += "]";
    json += `,"authorId":"${input.authorId.replace(/[\n]/g, "\\n")}"`;
    json += ',"author":{';
    json += `"id":"${input.author.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"name":"${input.author.name.replace(/[\n]/g, "\\n")}"`;
    if (typeof input.author.bio === "string") {
      json += `,"bio":"${input.author.bio.replace(/[\n]/g, "\\n")}"`;
    } else {
      json += ',"bio":null';
    }
    json += `,"createdAt":"${input.author.createdAt.toISOString()}"`;
    json += `,"updatedAt":"${input.author.updatedAt.toISOString()}"`;
    json += "}";
    json += `,"createdAt":"${input.createdAt.toISOString()}"`;
    json += `,"updatedAt":"${input.updatedAt.toISOString()}"`;
    json += "}";
    return json;
  },
};
export type PostType = "text" | "image" | "video";
export interface Author {
  id: string;
  name: string;
  bio: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface PostListParams {
  limit: number;
  type?: PostType;
}
const $$PostListParams = {
  parse(input: Record<any, any>): PostListParams {
    class $ValidationErrorpostListParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostListParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (
          typeof json.limit === "number" &&
          Number.isInteger(json.limit) &&
          json.limit >= -128 &&
          json.limit <= 127
        ) {
          jsonInnerVal.limit = json.limit;
        } else {
          $fallback(
            "/limit",
            "/properties/limit",
            "Expected valid integer between -128 and 127",
          );
        }
        if (typeof json.type === "undefined") {
          // ignore undefined
        } else {
          if (typeof json.type === "string") {
            if (
              json.type === "text" ||
              json.type === "image" ||
              json.type === "video"
            ) {
              jsonInnerVal.type = json.type;
            } else {
              $fallback(
                "/type",
                "/optionalProperties/type",
                "Expected one of the following values: [text, image, video] at /type.",
              );
            }
          } else {
            $fallback(
              "/type",
              "/optionalProperties/type",
              "Expected one of the following values: [text, image, video] at /type.",
            );
          }
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.limit === "number" &&
        Number.isInteger(input.limit) &&
        input.limit >= -128 &&
        input.limit <= 127
      ) {
        inputInnerVal.limit = input.limit;
      } else {
        $fallback(
          "/limit",
          "/properties/limit",
          "Expected valid integer between -128 and 127",
        );
      }
      if (typeof input.type === "undefined") {
        // ignore undefined
      } else {
        if (typeof input.type === "string") {
          if (
            input.type === "text" ||
            input.type === "image" ||
            input.type === "video"
          ) {
            inputInnerVal.type = input.type;
          } else {
            $fallback(
              "/type",
              "/optionalProperties/type",
              "Expected one of the following values: [text, image, video] at /type.",
            );
          }
        } else {
          $fallback(
            "/type",
            "/optionalProperties/type",
            "Expected one of the following values: [text, image, video] at /type.",
          );
        }
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostListParams): string {
    let json = "";
    json += "{";
    json += `"limit":${input.limit}`;
    if (typeof input.type !== "undefined") {
      json += `,"type":"${input.type}"`;
    }
    json += "}";
    return json;
  },
};

export interface PostListResponse {
  total: number;
  items: Array<Post>;
}
const $$PostListResponse = {
  parse(input: Record<any, any>): PostListResponse {
    class $ValidationErrorpostListResponse extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostListResponse({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (
          typeof json.total === "number" &&
          Number.isInteger(json.total) &&
          json.total >= -2147483648 &&
          json.total <= 2147483647
        ) {
          jsonInnerVal.total = json.total;
        } else {
          $fallback(
            "/total",
            "/properties/total",
            "Expected valid integer between -2147483648 and 2147483647",
          );
        }
        if (Array.isArray(json.items)) {
          const jsonInnerValItemsInnerResult = [];
          for (const jsonInnerValItemsInnerResultItem of json.items) {
            let jsonInnerValItemsInnerResultItemResult;
            if (
              typeof jsonInnerValItemsInnerResultItem === "object" &&
              jsonInnerValItemsInnerResultItem !== null
            ) {
              const jsonInnerValItemsInnerResultItemInnerVal = {};
              if (typeof jsonInnerValItemsInnerResultItem.id === "string") {
                jsonInnerValItemsInnerResultItemInnerVal.id =
                  jsonInnerValItemsInnerResultItem.id;
              } else {
                $fallback(
                  "/items/[0]/id",
                  "/properties/items/elements/properties/id/type",
                  "Expected string at /items/[0]/id",
                );
              }
              if (typeof jsonInnerValItemsInnerResultItem.title === "string") {
                jsonInnerValItemsInnerResultItemInnerVal.title =
                  jsonInnerValItemsInnerResultItem.title;
              } else {
                $fallback(
                  "/items/[0]/title",
                  "/properties/items/elements/properties/title/type",
                  "Expected string at /items/[0]/title",
                );
              }
              if (typeof jsonInnerValItemsInnerResultItem.type === "string") {
                if (
                  jsonInnerValItemsInnerResultItem.type === "text" ||
                  jsonInnerValItemsInnerResultItem.type === "image" ||
                  jsonInnerValItemsInnerResultItem.type === "video"
                ) {
                  jsonInnerValItemsInnerResultItemInnerVal.type =
                    jsonInnerValItemsInnerResultItem.type;
                } else {
                  $fallback(
                    "/items/[0]/type",
                    "/properties/items/elements/properties/type",
                    "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                  );
                }
              } else {
                $fallback(
                  "/items/[0]/type",
                  "/properties/items/elements/properties/type",
                  "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                );
              }
              if (jsonInnerValItemsInnerResultItem.description === null) {
                jsonInnerValItemsInnerResultItemInnerVal.description =
                  jsonInnerValItemsInnerResultItem.description;
              } else {
                if (
                  typeof jsonInnerValItemsInnerResultItem.description ===
                  "string"
                ) {
                  jsonInnerValItemsInnerResultItemInnerVal.description =
                    jsonInnerValItemsInnerResultItem.description;
                } else {
                  $fallback(
                    "/items/[0]/description",
                    "/properties/items/elements/properties/description/type",
                    "Expected string at /items/[0]/description",
                  );
                }
              }
              if (
                typeof jsonInnerValItemsInnerResultItem.content === "string"
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.content =
                  jsonInnerValItemsInnerResultItem.content;
              } else {
                $fallback(
                  "/items/[0]/content",
                  "/properties/items/elements/properties/content/type",
                  "Expected string at /items/[0]/content",
                );
              }
              if (Array.isArray(jsonInnerValItemsInnerResultItem.tags)) {
                const jsonInnerValItemsInnerResultItemInnerValTagsInnerResult =
                  [];
                for (const jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItem of jsonInnerValItemsInnerResultItem.tags) {
                  let jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult;
                  if (
                    typeof jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItem ===
                    "string"
                  ) {
                    jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult =
                      jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItem;
                  } else {
                    $fallback(
                      "/items/[0]/tags/[0]",
                      "/properties/items/elements/properties/tags/elements/type",
                      "Expected string at /items/[0]/tags/[0]",
                    );
                  }
                  jsonInnerValItemsInnerResultItemInnerValTagsInnerResult.push(
                    jsonInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult,
                  );
                }
                jsonInnerValItemsInnerResultItemInnerVal.tags =
                  jsonInnerValItemsInnerResultItemInnerValTagsInnerResult;
              } else {
                $fallback(
                  "/items/[0]/tags",
                  "/properties/items/elements/properties/tags",
                  "Expected Array",
                );
              }
              if (
                typeof jsonInnerValItemsInnerResultItem.authorId === "string"
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.authorId =
                  jsonInnerValItemsInnerResultItem.authorId;
              } else {
                $fallback(
                  "/items/[0]/authorId",
                  "/properties/items/elements/properties/authorId/type",
                  "Expected string at /items/[0]/authorId",
                );
              }
              if (
                typeof jsonInnerValItemsInnerResultItem.author === "object" &&
                jsonInnerValItemsInnerResultItem.author !== null
              ) {
                const jsonInnerValItemsInnerResultItemAuthorInnerVal = {};
                if (
                  typeof jsonInnerValItemsInnerResultItem.author.id === "string"
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.id =
                    jsonInnerValItemsInnerResultItem.author.id;
                } else {
                  $fallback(
                    "/items/[0]/author/id",
                    "/properties/items/elements/properties/author/properties/id/type",
                    "Expected string at /items/[0]/author/id",
                  );
                }
                if (
                  typeof jsonInnerValItemsInnerResultItem.author.name ===
                  "string"
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.name =
                    jsonInnerValItemsInnerResultItem.author.name;
                } else {
                  $fallback(
                    "/items/[0]/author/name",
                    "/properties/items/elements/properties/author/properties/name/type",
                    "Expected string at /items/[0]/author/name",
                  );
                }
                if (jsonInnerValItemsInnerResultItem.author.bio === null) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.bio =
                    jsonInnerValItemsInnerResultItem.author.bio;
                } else {
                  if (
                    typeof jsonInnerValItemsInnerResultItem.author.bio ===
                    "string"
                  ) {
                    jsonInnerValItemsInnerResultItemAuthorInnerVal.bio =
                      jsonInnerValItemsInnerResultItem.author.bio;
                  } else {
                    $fallback(
                      "/items/[0]/author/bio",
                      "/properties/items/elements/properties/author/properties/bio/type",
                      "Expected string at /items/[0]/author/bio",
                    );
                  }
                }
                if (
                  typeof jsonInnerValItemsInnerResultItem.author.createdAt ===
                    "object" &&
                  jsonInnerValItemsInnerResultItem.author.createdAt instanceof
                    Date
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.createdAt =
                    jsonInnerValItemsInnerResultItem.author.createdAt;
                } else if (
                  typeof jsonInnerValItemsInnerResultItem.author.createdAt ===
                  "string"
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.createdAt =
                    new Date(jsonInnerValItemsInnerResultItem.author.createdAt);
                } else {
                  $fallback(
                    "/items/[0]/author/createdAt",
                    "/properties/items/elements/properties/author/properties/createdAt",
                    "Expected instanceof Date or ISO Date string at /items/[0]/author/createdAt",
                  );
                }
                if (
                  typeof jsonInnerValItemsInnerResultItem.author.updatedAt ===
                    "object" &&
                  jsonInnerValItemsInnerResultItem.author.updatedAt instanceof
                    Date
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.updatedAt =
                    jsonInnerValItemsInnerResultItem.author.updatedAt;
                } else if (
                  typeof jsonInnerValItemsInnerResultItem.author.updatedAt ===
                  "string"
                ) {
                  jsonInnerValItemsInnerResultItemAuthorInnerVal.updatedAt =
                    new Date(jsonInnerValItemsInnerResultItem.author.updatedAt);
                } else {
                  $fallback(
                    "/items/[0]/author/updatedAt",
                    "/properties/items/elements/properties/author/properties/updatedAt",
                    "Expected instanceof Date or ISO Date string at /items/[0]/author/updatedAt",
                  );
                }
                jsonInnerValItemsInnerResultItemInnerVal.author =
                  jsonInnerValItemsInnerResultItemAuthorInnerVal;
              } else {
                $fallback(
                  "/items/[0]/author",
                  "/properties/items/elements/properties/author",
                  "Expected object",
                );
              }
              if (
                typeof jsonInnerValItemsInnerResultItem.createdAt ===
                  "object" &&
                jsonInnerValItemsInnerResultItem.createdAt instanceof Date
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.createdAt =
                  jsonInnerValItemsInnerResultItem.createdAt;
              } else if (
                typeof jsonInnerValItemsInnerResultItem.createdAt === "string"
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.createdAt = new Date(
                  jsonInnerValItemsInnerResultItem.createdAt,
                );
              } else {
                $fallback(
                  "/items/[0]/createdAt",
                  "/properties/items/elements/properties/createdAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/createdAt",
                );
              }
              if (
                typeof jsonInnerValItemsInnerResultItem.updatedAt ===
                  "object" &&
                jsonInnerValItemsInnerResultItem.updatedAt instanceof Date
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.updatedAt =
                  jsonInnerValItemsInnerResultItem.updatedAt;
              } else if (
                typeof jsonInnerValItemsInnerResultItem.updatedAt === "string"
              ) {
                jsonInnerValItemsInnerResultItemInnerVal.updatedAt = new Date(
                  jsonInnerValItemsInnerResultItem.updatedAt,
                );
              } else {
                $fallback(
                  "/items/[0]/updatedAt",
                  "/properties/items/elements/properties/updatedAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/updatedAt",
                );
              }
              jsonInnerValItemsInnerResultItemResult =
                jsonInnerValItemsInnerResultItemInnerVal;
            } else {
              $fallback(
                "/items/[0]",
                "/properties/items/elements",
                "Expected object",
              );
            }
            jsonInnerValItemsInnerResult.push(
              jsonInnerValItemsInnerResultItemResult,
            );
          }
          jsonInnerVal.items = jsonInnerValItemsInnerResult;
        } else {
          $fallback("/items", "/properties/items", "Expected Array");
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.total === "number" &&
        Number.isInteger(input.total) &&
        input.total >= -2147483648 &&
        input.total <= 2147483647
      ) {
        inputInnerVal.total = input.total;
      } else {
        $fallback(
          "/total",
          "/properties/total",
          "Expected valid integer between -2147483648 and 2147483647",
        );
      }
      if (Array.isArray(input.items)) {
        const inputInnerValItemsInnerResult = [];
        for (const inputInnerValItemsInnerResultItem of input.items) {
          let inputInnerValItemsInnerResultItemResult;
          if (
            typeof inputInnerValItemsInnerResultItem === "object" &&
            inputInnerValItemsInnerResultItem !== null
          ) {
            const inputInnerValItemsInnerResultItemInnerVal = {};
            if (typeof inputInnerValItemsInnerResultItem.id === "string") {
              inputInnerValItemsInnerResultItemInnerVal.id =
                inputInnerValItemsInnerResultItem.id;
            } else {
              $fallback(
                "/items/[0]/id",
                "/properties/items/elements/properties/id/type",
                "Expected string at /items/[0]/id",
              );
            }
            if (typeof inputInnerValItemsInnerResultItem.title === "string") {
              inputInnerValItemsInnerResultItemInnerVal.title =
                inputInnerValItemsInnerResultItem.title;
            } else {
              $fallback(
                "/items/[0]/title",
                "/properties/items/elements/properties/title/type",
                "Expected string at /items/[0]/title",
              );
            }
            if (typeof inputInnerValItemsInnerResultItem.type === "string") {
              if (
                inputInnerValItemsInnerResultItem.type === "text" ||
                inputInnerValItemsInnerResultItem.type === "image" ||
                inputInnerValItemsInnerResultItem.type === "video"
              ) {
                inputInnerValItemsInnerResultItemInnerVal.type =
                  inputInnerValItemsInnerResultItem.type;
              } else {
                $fallback(
                  "/items/[0]/type",
                  "/properties/items/elements/properties/type",
                  "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                );
              }
            } else {
              $fallback(
                "/items/[0]/type",
                "/properties/items/elements/properties/type",
                "Expected one of the following values: [text, image, video] at /items/[0]/type.",
              );
            }
            if (inputInnerValItemsInnerResultItem.description === null) {
              inputInnerValItemsInnerResultItemInnerVal.description =
                inputInnerValItemsInnerResultItem.description;
            } else {
              if (
                typeof inputInnerValItemsInnerResultItem.description ===
                "string"
              ) {
                inputInnerValItemsInnerResultItemInnerVal.description =
                  inputInnerValItemsInnerResultItem.description;
              } else {
                $fallback(
                  "/items/[0]/description",
                  "/properties/items/elements/properties/description/type",
                  "Expected string at /items/[0]/description",
                );
              }
            }
            if (typeof inputInnerValItemsInnerResultItem.content === "string") {
              inputInnerValItemsInnerResultItemInnerVal.content =
                inputInnerValItemsInnerResultItem.content;
            } else {
              $fallback(
                "/items/[0]/content",
                "/properties/items/elements/properties/content/type",
                "Expected string at /items/[0]/content",
              );
            }
            if (Array.isArray(inputInnerValItemsInnerResultItem.tags)) {
              const inputInnerValItemsInnerResultItemInnerValTagsInnerResult =
                [];
              for (const inputInnerValItemsInnerResultItemInnerValTagsInnerResultItem of inputInnerValItemsInnerResultItem.tags) {
                let inputInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult;
                if (
                  typeof inputInnerValItemsInnerResultItemInnerValTagsInnerResultItem ===
                  "string"
                ) {
                  inputInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult =
                    inputInnerValItemsInnerResultItemInnerValTagsInnerResultItem;
                } else {
                  $fallback(
                    "/items/[0]/tags/[0]",
                    "/properties/items/elements/properties/tags/elements/type",
                    "Expected string at /items/[0]/tags/[0]",
                  );
                }
                inputInnerValItemsInnerResultItemInnerValTagsInnerResult.push(
                  inputInnerValItemsInnerResultItemInnerValTagsInnerResultItemResult,
                );
              }
              inputInnerValItemsInnerResultItemInnerVal.tags =
                inputInnerValItemsInnerResultItemInnerValTagsInnerResult;
            } else {
              $fallback(
                "/items/[0]/tags",
                "/properties/items/elements/properties/tags",
                "Expected Array",
              );
            }
            if (
              typeof inputInnerValItemsInnerResultItem.authorId === "string"
            ) {
              inputInnerValItemsInnerResultItemInnerVal.authorId =
                inputInnerValItemsInnerResultItem.authorId;
            } else {
              $fallback(
                "/items/[0]/authorId",
                "/properties/items/elements/properties/authorId/type",
                "Expected string at /items/[0]/authorId",
              );
            }
            if (
              typeof inputInnerValItemsInnerResultItem.author === "object" &&
              inputInnerValItemsInnerResultItem.author !== null
            ) {
              const inputInnerValItemsInnerResultItemAuthorInnerVal = {};
              if (
                typeof inputInnerValItemsInnerResultItem.author.id === "string"
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.id =
                  inputInnerValItemsInnerResultItem.author.id;
              } else {
                $fallback(
                  "/items/[0]/author/id",
                  "/properties/items/elements/properties/author/properties/id/type",
                  "Expected string at /items/[0]/author/id",
                );
              }
              if (
                typeof inputInnerValItemsInnerResultItem.author.name ===
                "string"
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.name =
                  inputInnerValItemsInnerResultItem.author.name;
              } else {
                $fallback(
                  "/items/[0]/author/name",
                  "/properties/items/elements/properties/author/properties/name/type",
                  "Expected string at /items/[0]/author/name",
                );
              }
              if (inputInnerValItemsInnerResultItem.author.bio === null) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.bio =
                  inputInnerValItemsInnerResultItem.author.bio;
              } else {
                if (
                  typeof inputInnerValItemsInnerResultItem.author.bio ===
                  "string"
                ) {
                  inputInnerValItemsInnerResultItemAuthorInnerVal.bio =
                    inputInnerValItemsInnerResultItem.author.bio;
                } else {
                  $fallback(
                    "/items/[0]/author/bio",
                    "/properties/items/elements/properties/author/properties/bio/type",
                    "Expected string at /items/[0]/author/bio",
                  );
                }
              }
              if (
                typeof inputInnerValItemsInnerResultItem.author.createdAt ===
                  "object" &&
                inputInnerValItemsInnerResultItem.author.createdAt instanceof
                  Date
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.createdAt =
                  inputInnerValItemsInnerResultItem.author.createdAt;
              } else if (
                typeof inputInnerValItemsInnerResultItem.author.createdAt ===
                "string"
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.createdAt =
                  new Date(inputInnerValItemsInnerResultItem.author.createdAt);
              } else {
                $fallback(
                  "/items/[0]/author/createdAt",
                  "/properties/items/elements/properties/author/properties/createdAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/author/createdAt",
                );
              }
              if (
                typeof inputInnerValItemsInnerResultItem.author.updatedAt ===
                  "object" &&
                inputInnerValItemsInnerResultItem.author.updatedAt instanceof
                  Date
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.updatedAt =
                  inputInnerValItemsInnerResultItem.author.updatedAt;
              } else if (
                typeof inputInnerValItemsInnerResultItem.author.updatedAt ===
                "string"
              ) {
                inputInnerValItemsInnerResultItemAuthorInnerVal.updatedAt =
                  new Date(inputInnerValItemsInnerResultItem.author.updatedAt);
              } else {
                $fallback(
                  "/items/[0]/author/updatedAt",
                  "/properties/items/elements/properties/author/properties/updatedAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/author/updatedAt",
                );
              }
              inputInnerValItemsInnerResultItemInnerVal.author =
                inputInnerValItemsInnerResultItemAuthorInnerVal;
            } else {
              $fallback(
                "/items/[0]/author",
                "/properties/items/elements/properties/author",
                "Expected object",
              );
            }
            if (
              typeof inputInnerValItemsInnerResultItem.createdAt === "object" &&
              inputInnerValItemsInnerResultItem.createdAt instanceof Date
            ) {
              inputInnerValItemsInnerResultItemInnerVal.createdAt =
                inputInnerValItemsInnerResultItem.createdAt;
            } else if (
              typeof inputInnerValItemsInnerResultItem.createdAt === "string"
            ) {
              inputInnerValItemsInnerResultItemInnerVal.createdAt = new Date(
                inputInnerValItemsInnerResultItem.createdAt,
              );
            } else {
              $fallback(
                "/items/[0]/createdAt",
                "/properties/items/elements/properties/createdAt",
                "Expected instanceof Date or ISO Date string at /items/[0]/createdAt",
              );
            }
            if (
              typeof inputInnerValItemsInnerResultItem.updatedAt === "object" &&
              inputInnerValItemsInnerResultItem.updatedAt instanceof Date
            ) {
              inputInnerValItemsInnerResultItemInnerVal.updatedAt =
                inputInnerValItemsInnerResultItem.updatedAt;
            } else if (
              typeof inputInnerValItemsInnerResultItem.updatedAt === "string"
            ) {
              inputInnerValItemsInnerResultItemInnerVal.updatedAt = new Date(
                inputInnerValItemsInnerResultItem.updatedAt,
              );
            } else {
              $fallback(
                "/items/[0]/updatedAt",
                "/properties/items/elements/properties/updatedAt",
                "Expected instanceof Date or ISO Date string at /items/[0]/updatedAt",
              );
            }
            inputInnerValItemsInnerResultItemResult =
              inputInnerValItemsInnerResultItemInnerVal;
          } else {
            $fallback(
              "/items/[0]",
              "/properties/items/elements",
              "Expected object",
            );
          }
          inputInnerValItemsInnerResult.push(
            inputInnerValItemsInnerResultItemResult,
          );
        }
        inputInnerVal.items = inputInnerValItemsInnerResult;
      } else {
        $fallback("/items", "/properties/items", "Expected Array");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostListResponse): string {
    let json = "";
    json += "{";
    json += `"total":${input.total}`;
    json += ',"items":[';
    for (let i = 0; i < input.items.length; i++) {
      const inputItemsItem = input.items[i];
      if (i !== 0) {
        json += ",";
      }
      json += "{";
      json += `"id":"${inputItemsItem.id.replace(/[\n]/g, "\\n")}"`;
      json += `,"title":"${inputItemsItem.title.replace(/[\n]/g, "\\n")}"`;
      json += `,"type":"${inputItemsItem.type}"`;
      if (typeof inputItemsItem.description === "string") {
        json += `,"description":"${inputItemsItem.description.replace(
          /[\n]/g,
          "\\n",
        )}"`;
      } else {
        json += ',"description":null';
      }
      json += `,"content":"${inputItemsItem.content.replace(/[\n]/g, "\\n")}"`;
      json += ',"tags":[';
      for (let i = 0; i < inputItemsItem.tags.length; i++) {
        const inputItemsItemTagsItem = inputItemsItem.tags[i];
        if (i !== 0) {
          json += ",";
        }
        json += `"${inputItemsItemTagsItem.replace(/[\n]/g, "\\n")}"`;
      }
      json += "]";
      json += `,"authorId":"${inputItemsItem.authorId.replace(
        /[\n]/g,
        "\\n",
      )}"`;
      json += ',"author":{';
      json += `"id":"${inputItemsItem.author.id.replace(/[\n]/g, "\\n")}"`;
      json += `,"name":"${inputItemsItem.author.name.replace(/[\n]/g, "\\n")}"`;
      if (typeof inputItemsItem.author.bio === "string") {
        json += `,"bio":"${inputItemsItem.author.bio.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += ',"bio":null';
      }
      json += `,"createdAt":"${inputItemsItem.author.createdAt.toISOString()}"`;
      json += `,"updatedAt":"${inputItemsItem.author.updatedAt.toISOString()}"`;
      json += "}";
      json += `,"createdAt":"${inputItemsItem.createdAt.toISOString()}"`;
      json += `,"updatedAt":"${inputItemsItem.updatedAt.toISOString()}"`;
      json += "}";
    }
    json += "]";
    json += "}";
    return json;
  },
};

export type PostEvent =
  | PostEventPostCreated
  | PostEventPostDeleted
  | PostEventPostUpdated
  | PostEventPostLiked
  | PostEventPostCommented;
const $$PostEvent = {
  parse(input: Record<any, any>): PostEvent {
    class $ValidationErrorpostEvent extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostEvent({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        switch (json.eventType) {
          case "POST_CREATED": {
            if (typeof json === "object" && json !== null) {
              const jsonInnerVal = {};
              jsonInnerVal.eventType = "POST_CREATED";
              if (typeof json.postId === "string") {
                jsonInnerVal.postId = json.postId;
              } else {
                $fallback(
                  "/postId",
                  "/mapping/properties/postId/type",
                  "Expected string at /postId",
                );
              }
              if (
                typeof json.timestamp === "object" &&
                json.timestamp instanceof Date
              ) {
                jsonInnerVal.timestamp = json.timestamp;
              } else if (typeof json.timestamp === "string") {
                jsonInnerVal.timestamp = new Date(json.timestamp);
              } else {
                $fallback(
                  "/timestamp",
                  "/mapping/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /timestamp",
                );
              }
              result = jsonInnerVal;
            } else {
              $fallback("", "/mapping", "Expected object");
            }
            break;
          }
          case "POST_DELETED": {
            if (typeof json === "object" && json !== null) {
              const jsonInnerVal = {};
              jsonInnerVal.eventType = "POST_DELETED";
              if (typeof json.postId === "string") {
                jsonInnerVal.postId = json.postId;
              } else {
                $fallback(
                  "/postId",
                  "/mapping/properties/postId/type",
                  "Expected string at /postId",
                );
              }
              if (
                typeof json.timestamp === "object" &&
                json.timestamp instanceof Date
              ) {
                jsonInnerVal.timestamp = json.timestamp;
              } else if (typeof json.timestamp === "string") {
                jsonInnerVal.timestamp = new Date(json.timestamp);
              } else {
                $fallback(
                  "/timestamp",
                  "/mapping/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /timestamp",
                );
              }
              result = jsonInnerVal;
            } else {
              $fallback("", "/mapping", "Expected object");
            }
            break;
          }
          case "POST_UPDATED": {
            if (typeof json === "object" && json !== null) {
              const jsonInnerVal = {};
              jsonInnerVal.eventType = "POST_UPDATED";
              if (typeof json.postId === "string") {
                jsonInnerVal.postId = json.postId;
              } else {
                $fallback(
                  "/postId",
                  "/mapping/properties/postId/type",
                  "Expected string at /postId",
                );
              }
              if (
                typeof json.timestamp === "object" &&
                json.timestamp instanceof Date
              ) {
                jsonInnerVal.timestamp = json.timestamp;
              } else if (typeof json.timestamp === "string") {
                jsonInnerVal.timestamp = new Date(json.timestamp);
              } else {
                $fallback(
                  "/timestamp",
                  "/mapping/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /timestamp",
                );
              }
              if (typeof json.data === "object" && json.data !== null) {
                const jsonDataInnerVal = {};
                if (typeof json.data.id === "undefined") {
                  // ignore undefined
                } else {
                  if (typeof json.data.id === "string") {
                    jsonDataInnerVal.id = json.data.id;
                  } else {
                    $fallback(
                      "/data/id",
                      "/mapping/properties/data/optionalProperties/id/type",
                      "Expected string at /data/id",
                    );
                  }
                }
                if (typeof json.data.title === "undefined") {
                  // ignore undefined
                } else {
                  if (typeof json.data.title === "string") {
                    jsonDataInnerVal.title = json.data.title;
                  } else {
                    $fallback(
                      "/data/title",
                      "/mapping/properties/data/optionalProperties/title/type",
                      "Expected string at /data/title",
                    );
                  }
                }
                if (typeof json.data.type === "undefined") {
                  // ignore undefined
                } else {
                  if (typeof json.data.type === "string") {
                    if (
                      json.data.type === "text" ||
                      json.data.type === "image" ||
                      json.data.type === "video"
                    ) {
                      jsonDataInnerVal.type = json.data.type;
                    } else {
                      $fallback(
                        "/data/type",
                        "/mapping/properties/data/optionalProperties/type",
                        "Expected one of the following values: [text, image, video] at /data/type.",
                      );
                    }
                  } else {
                    $fallback(
                      "/data/type",
                      "/mapping/properties/data/optionalProperties/type",
                      "Expected one of the following values: [text, image, video] at /data/type.",
                    );
                  }
                }
                if (typeof json.data.description === "undefined") {
                  // ignore undefined
                } else {
                  if (json.data.description === null) {
                    jsonDataInnerVal.description = json.data.description;
                  } else {
                    if (typeof json.data.description === "string") {
                      jsonDataInnerVal.description = json.data.description;
                    } else {
                      $fallback(
                        "/data/description",
                        "/mapping/properties/data/optionalProperties/description/type",
                        "Expected string at /data/description",
                      );
                    }
                  }
                }
                if (typeof json.data.content === "undefined") {
                  // ignore undefined
                } else {
                  if (typeof json.data.content === "string") {
                    jsonDataInnerVal.content = json.data.content;
                  } else {
                    $fallback(
                      "/data/content",
                      "/mapping/properties/data/optionalProperties/content/type",
                      "Expected string at /data/content",
                    );
                  }
                }
                if (typeof json.data.tags === "undefined") {
                  // ignore undefined
                } else {
                  if (Array.isArray(json.data.tags)) {
                    const jsonDataInnerValTagsInnerResult = [];
                    for (const jsonDataInnerValTagsInnerResultItem of json.data
                      .tags) {
                      let jsonDataInnerValTagsInnerResultItemResult;
                      if (
                        typeof jsonDataInnerValTagsInnerResultItem === "string"
                      ) {
                        jsonDataInnerValTagsInnerResultItemResult =
                          jsonDataInnerValTagsInnerResultItem;
                      } else {
                        $fallback(
                          "/data/tags/[0]",
                          "/mapping/properties/data/optionalProperties/tags/elements/type",
                          "Expected string at /data/tags/[0]",
                        );
                      }
                      jsonDataInnerValTagsInnerResult.push(
                        jsonDataInnerValTagsInnerResultItemResult,
                      );
                    }
                    jsonDataInnerVal.tags = jsonDataInnerValTagsInnerResult;
                  } else {
                    $fallback(
                      "/data/tags",
                      "/mapping/properties/data/optionalProperties/tags",
                      "Expected Array",
                    );
                  }
                }
                if (typeof json.data.authorId === "undefined") {
                  // ignore undefined
                } else {
                  if (typeof json.data.authorId === "string") {
                    jsonDataInnerVal.authorId = json.data.authorId;
                  } else {
                    $fallback(
                      "/data/authorId",
                      "/mapping/properties/data/optionalProperties/authorId/type",
                      "Expected string at /data/authorId",
                    );
                  }
                }
                if (typeof json.data.author === "undefined") {
                  // ignore undefined
                } else {
                  if (
                    typeof json.data.author === "object" &&
                    json.data.author !== null
                  ) {
                    const jsonDataAuthorInnerVal = {};
                    if (typeof json.data.author.id === "string") {
                      jsonDataAuthorInnerVal.id = json.data.author.id;
                    } else {
                      $fallback(
                        "/data/author/id",
                        "/mapping/properties/data/optionalProperties/author/properties/id/type",
                        "Expected string at /data/author/id",
                      );
                    }
                    if (typeof json.data.author.name === "string") {
                      jsonDataAuthorInnerVal.name = json.data.author.name;
                    } else {
                      $fallback(
                        "/data/author/name",
                        "/mapping/properties/data/optionalProperties/author/properties/name/type",
                        "Expected string at /data/author/name",
                      );
                    }
                    if (json.data.author.bio === null) {
                      jsonDataAuthorInnerVal.bio = json.data.author.bio;
                    } else {
                      if (typeof json.data.author.bio === "string") {
                        jsonDataAuthorInnerVal.bio = json.data.author.bio;
                      } else {
                        $fallback(
                          "/data/author/bio",
                          "/mapping/properties/data/optionalProperties/author/properties/bio/type",
                          "Expected string at /data/author/bio",
                        );
                      }
                    }
                    if (
                      typeof json.data.author.createdAt === "object" &&
                      json.data.author.createdAt instanceof Date
                    ) {
                      jsonDataAuthorInnerVal.createdAt =
                        json.data.author.createdAt;
                    } else if (typeof json.data.author.createdAt === "string") {
                      jsonDataAuthorInnerVal.createdAt = new Date(
                        json.data.author.createdAt,
                      );
                    } else {
                      $fallback(
                        "/data/author/createdAt",
                        "/mapping/properties/data/optionalProperties/author/properties/createdAt",
                        "Expected instanceof Date or ISO Date string at /data/author/createdAt",
                      );
                    }
                    if (
                      typeof json.data.author.updatedAt === "object" &&
                      json.data.author.updatedAt instanceof Date
                    ) {
                      jsonDataAuthorInnerVal.updatedAt =
                        json.data.author.updatedAt;
                    } else if (typeof json.data.author.updatedAt === "string") {
                      jsonDataAuthorInnerVal.updatedAt = new Date(
                        json.data.author.updatedAt,
                      );
                    } else {
                      $fallback(
                        "/data/author/updatedAt",
                        "/mapping/properties/data/optionalProperties/author/properties/updatedAt",
                        "Expected instanceof Date or ISO Date string at /data/author/updatedAt",
                      );
                    }
                    jsonDataInnerVal.author = jsonDataAuthorInnerVal;
                  } else {
                    $fallback(
                      "/data/author",
                      "/mapping/properties/data/optionalProperties/author",
                      "Expected object",
                    );
                  }
                }
                if (typeof json.data.createdAt === "undefined") {
                  // ignore undefined
                } else {
                  if (
                    typeof json.data.createdAt === "object" &&
                    json.data.createdAt instanceof Date
                  ) {
                    jsonDataInnerVal.createdAt = json.data.createdAt;
                  } else if (typeof json.data.createdAt === "string") {
                    jsonDataInnerVal.createdAt = new Date(json.data.createdAt);
                  } else {
                    $fallback(
                      "/data/createdAt",
                      "/mapping/properties/data/optionalProperties/createdAt",
                      "Expected instanceof Date or ISO Date string at /data/createdAt",
                    );
                  }
                }
                if (typeof json.data.updatedAt === "undefined") {
                  // ignore undefined
                } else {
                  if (
                    typeof json.data.updatedAt === "object" &&
                    json.data.updatedAt instanceof Date
                  ) {
                    jsonDataInnerVal.updatedAt = json.data.updatedAt;
                  } else if (typeof json.data.updatedAt === "string") {
                    jsonDataInnerVal.updatedAt = new Date(json.data.updatedAt);
                  } else {
                    $fallback(
                      "/data/updatedAt",
                      "/mapping/properties/data/optionalProperties/updatedAt",
                      "Expected instanceof Date or ISO Date string at /data/updatedAt",
                    );
                  }
                }
                jsonInnerVal.data = jsonDataInnerVal;
              } else {
                $fallback(
                  "/data",
                  "/mapping/properties/data",
                  "Expected object",
                );
              }
              result = jsonInnerVal;
            } else {
              $fallback("", "/mapping", "Expected object");
            }
            break;
          }
          case "POST_LIKED": {
            if (typeof json === "object" && json !== null) {
              const jsonInnerVal = {};
              jsonInnerVal.eventType = "POST_LIKED";
              if (typeof json.postId === "string") {
                jsonInnerVal.postId = json.postId;
              } else {
                $fallback(
                  "/postId",
                  "/mapping/properties/postId/type",
                  "Expected string at /postId",
                );
              }
              if (
                typeof json.timestamp === "object" &&
                json.timestamp instanceof Date
              ) {
                jsonInnerVal.timestamp = json.timestamp;
              } else if (typeof json.timestamp === "string") {
                jsonInnerVal.timestamp = new Date(json.timestamp);
              } else {
                $fallback(
                  "/timestamp",
                  "/mapping/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /timestamp",
                );
              }
              if (typeof json.postLikeId === "string") {
                jsonInnerVal.postLikeId = json.postLikeId;
              } else {
                $fallback(
                  "/postLikeId",
                  "/mapping/properties/postLikeId/type",
                  "Expected string at /postLikeId",
                );
              }
              if (
                typeof json.postLikeCount === "number" &&
                Number.isInteger(json.postLikeCount) &&
                json.postLikeCount >= 0 &&
                json.postLikeCount <= 4294967295
              ) {
                jsonInnerVal.postLikeCount = json.postLikeCount;
              } else {
                $fallback(
                  "/postLikeCount",
                  "/mapping/properties/postLikeCount",
                  "Expected valid integer between 0 and 4294967295",
                );
              }
              result = jsonInnerVal;
            } else {
              $fallback("", "/mapping", "Expected object");
            }
            break;
          }
          case "POST_COMMENTED": {
            if (typeof json === "object" && json !== null) {
              const jsonInnerVal = {};
              jsonInnerVal.eventType = "POST_COMMENTED";
              if (typeof json.postId === "string") {
                jsonInnerVal.postId = json.postId;
              } else {
                $fallback(
                  "/postId",
                  "/mapping/properties/postId/type",
                  "Expected string at /postId",
                );
              }
              if (
                typeof json.timestamp === "object" &&
                json.timestamp instanceof Date
              ) {
                jsonInnerVal.timestamp = json.timestamp;
              } else if (typeof json.timestamp === "string") {
                jsonInnerVal.timestamp = new Date(json.timestamp);
              } else {
                $fallback(
                  "/timestamp",
                  "/mapping/properties/timestamp",
                  "Expected instanceof Date or ISO Date string at /timestamp",
                );
              }
              if (typeof json.commentId === "string") {
                jsonInnerVal.commentId = json.commentId;
              } else {
                $fallback(
                  "/commentId",
                  "/mapping/properties/commentId/type",
                  "Expected string at /commentId",
                );
              }
              if (typeof json.commentText === "string") {
                jsonInnerVal.commentText = json.commentText;
              } else {
                $fallback(
                  "/commentText",
                  "/mapping/properties/commentText/type",
                  "Expected string at /commentText",
                );
              }
              if (
                typeof json.commentCount === "number" &&
                Number.isInteger(json.commentCount) &&
                json.commentCount >= 0 &&
                json.commentCount <= 4294967295
              ) {
                jsonInnerVal.commentCount = json.commentCount;
              } else {
                $fallback(
                  "/commentCount",
                  "/mapping/properties/commentCount",
                  "Expected valid integer between 0 and 4294967295",
                );
              }
              result = jsonInnerVal;
            } else {
              $fallback("", "/mapping", "Expected object");
            }
            break;
          }
          default:
            $fallback(
              "",
              "/mapping",
              "json.eventType did not match one of the specified values",
            );
            break;
        }
      } else {
        $fallback("", "", "Expected Object.");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      switch (input.eventType) {
        case "POST_CREATED": {
          if (typeof input === "object" && input !== null) {
            const inputInnerVal = {};
            inputInnerVal.eventType = "POST_CREATED";
            if (typeof input.postId === "string") {
              inputInnerVal.postId = input.postId;
            } else {
              $fallback(
                "/postId",
                "/mapping/properties/postId/type",
                "Expected string at /postId",
              );
            }
            if (
              typeof input.timestamp === "object" &&
              input.timestamp instanceof Date
            ) {
              inputInnerVal.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
              inputInnerVal.timestamp = new Date(input.timestamp);
            } else {
              $fallback(
                "/timestamp",
                "/mapping/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /timestamp",
              );
            }
            result = inputInnerVal;
          } else {
            $fallback("", "/mapping", "Expected object");
          }
          break;
        }
        case "POST_DELETED": {
          if (typeof input === "object" && input !== null) {
            const inputInnerVal = {};
            inputInnerVal.eventType = "POST_DELETED";
            if (typeof input.postId === "string") {
              inputInnerVal.postId = input.postId;
            } else {
              $fallback(
                "/postId",
                "/mapping/properties/postId/type",
                "Expected string at /postId",
              );
            }
            if (
              typeof input.timestamp === "object" &&
              input.timestamp instanceof Date
            ) {
              inputInnerVal.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
              inputInnerVal.timestamp = new Date(input.timestamp);
            } else {
              $fallback(
                "/timestamp",
                "/mapping/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /timestamp",
              );
            }
            result = inputInnerVal;
          } else {
            $fallback("", "/mapping", "Expected object");
          }
          break;
        }
        case "POST_UPDATED": {
          if (typeof input === "object" && input !== null) {
            const inputInnerVal = {};
            inputInnerVal.eventType = "POST_UPDATED";
            if (typeof input.postId === "string") {
              inputInnerVal.postId = input.postId;
            } else {
              $fallback(
                "/postId",
                "/mapping/properties/postId/type",
                "Expected string at /postId",
              );
            }
            if (
              typeof input.timestamp === "object" &&
              input.timestamp instanceof Date
            ) {
              inputInnerVal.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
              inputInnerVal.timestamp = new Date(input.timestamp);
            } else {
              $fallback(
                "/timestamp",
                "/mapping/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /timestamp",
              );
            }
            if (typeof input.data === "object" && input.data !== null) {
              const inputDataInnerVal = {};
              if (typeof input.data.id === "undefined") {
                // ignore undefined
              } else {
                if (typeof input.data.id === "string") {
                  inputDataInnerVal.id = input.data.id;
                } else {
                  $fallback(
                    "/data/id",
                    "/mapping/properties/data/optionalProperties/id/type",
                    "Expected string at /data/id",
                  );
                }
              }
              if (typeof input.data.title === "undefined") {
                // ignore undefined
              } else {
                if (typeof input.data.title === "string") {
                  inputDataInnerVal.title = input.data.title;
                } else {
                  $fallback(
                    "/data/title",
                    "/mapping/properties/data/optionalProperties/title/type",
                    "Expected string at /data/title",
                  );
                }
              }
              if (typeof input.data.type === "undefined") {
                // ignore undefined
              } else {
                if (typeof input.data.type === "string") {
                  if (
                    input.data.type === "text" ||
                    input.data.type === "image" ||
                    input.data.type === "video"
                  ) {
                    inputDataInnerVal.type = input.data.type;
                  } else {
                    $fallback(
                      "/data/type",
                      "/mapping/properties/data/optionalProperties/type",
                      "Expected one of the following values: [text, image, video] at /data/type.",
                    );
                  }
                } else {
                  $fallback(
                    "/data/type",
                    "/mapping/properties/data/optionalProperties/type",
                    "Expected one of the following values: [text, image, video] at /data/type.",
                  );
                }
              }
              if (typeof input.data.description === "undefined") {
                // ignore undefined
              } else {
                if (input.data.description === null) {
                  inputDataInnerVal.description = input.data.description;
                } else {
                  if (typeof input.data.description === "string") {
                    inputDataInnerVal.description = input.data.description;
                  } else {
                    $fallback(
                      "/data/description",
                      "/mapping/properties/data/optionalProperties/description/type",
                      "Expected string at /data/description",
                    );
                  }
                }
              }
              if (typeof input.data.content === "undefined") {
                // ignore undefined
              } else {
                if (typeof input.data.content === "string") {
                  inputDataInnerVal.content = input.data.content;
                } else {
                  $fallback(
                    "/data/content",
                    "/mapping/properties/data/optionalProperties/content/type",
                    "Expected string at /data/content",
                  );
                }
              }
              if (typeof input.data.tags === "undefined") {
                // ignore undefined
              } else {
                if (Array.isArray(input.data.tags)) {
                  const inputDataInnerValTagsInnerResult = [];
                  for (const inputDataInnerValTagsInnerResultItem of input.data
                    .tags) {
                    let inputDataInnerValTagsInnerResultItemResult;
                    if (
                      typeof inputDataInnerValTagsInnerResultItem === "string"
                    ) {
                      inputDataInnerValTagsInnerResultItemResult =
                        inputDataInnerValTagsInnerResultItem;
                    } else {
                      $fallback(
                        "/data/tags/[0]",
                        "/mapping/properties/data/optionalProperties/tags/elements/type",
                        "Expected string at /data/tags/[0]",
                      );
                    }
                    inputDataInnerValTagsInnerResult.push(
                      inputDataInnerValTagsInnerResultItemResult,
                    );
                  }
                  inputDataInnerVal.tags = inputDataInnerValTagsInnerResult;
                } else {
                  $fallback(
                    "/data/tags",
                    "/mapping/properties/data/optionalProperties/tags",
                    "Expected Array",
                  );
                }
              }
              if (typeof input.data.authorId === "undefined") {
                // ignore undefined
              } else {
                if (typeof input.data.authorId === "string") {
                  inputDataInnerVal.authorId = input.data.authorId;
                } else {
                  $fallback(
                    "/data/authorId",
                    "/mapping/properties/data/optionalProperties/authorId/type",
                    "Expected string at /data/authorId",
                  );
                }
              }
              if (typeof input.data.author === "undefined") {
                // ignore undefined
              } else {
                if (
                  typeof input.data.author === "object" &&
                  input.data.author !== null
                ) {
                  const inputDataAuthorInnerVal = {};
                  if (typeof input.data.author.id === "string") {
                    inputDataAuthorInnerVal.id = input.data.author.id;
                  } else {
                    $fallback(
                      "/data/author/id",
                      "/mapping/properties/data/optionalProperties/author/properties/id/type",
                      "Expected string at /data/author/id",
                    );
                  }
                  if (typeof input.data.author.name === "string") {
                    inputDataAuthorInnerVal.name = input.data.author.name;
                  } else {
                    $fallback(
                      "/data/author/name",
                      "/mapping/properties/data/optionalProperties/author/properties/name/type",
                      "Expected string at /data/author/name",
                    );
                  }
                  if (input.data.author.bio === null) {
                    inputDataAuthorInnerVal.bio = input.data.author.bio;
                  } else {
                    if (typeof input.data.author.bio === "string") {
                      inputDataAuthorInnerVal.bio = input.data.author.bio;
                    } else {
                      $fallback(
                        "/data/author/bio",
                        "/mapping/properties/data/optionalProperties/author/properties/bio/type",
                        "Expected string at /data/author/bio",
                      );
                    }
                  }
                  if (
                    typeof input.data.author.createdAt === "object" &&
                    input.data.author.createdAt instanceof Date
                  ) {
                    inputDataAuthorInnerVal.createdAt =
                      input.data.author.createdAt;
                  } else if (typeof input.data.author.createdAt === "string") {
                    inputDataAuthorInnerVal.createdAt = new Date(
                      input.data.author.createdAt,
                    );
                  } else {
                    $fallback(
                      "/data/author/createdAt",
                      "/mapping/properties/data/optionalProperties/author/properties/createdAt",
                      "Expected instanceof Date or ISO Date string at /data/author/createdAt",
                    );
                  }
                  if (
                    typeof input.data.author.updatedAt === "object" &&
                    input.data.author.updatedAt instanceof Date
                  ) {
                    inputDataAuthorInnerVal.updatedAt =
                      input.data.author.updatedAt;
                  } else if (typeof input.data.author.updatedAt === "string") {
                    inputDataAuthorInnerVal.updatedAt = new Date(
                      input.data.author.updatedAt,
                    );
                  } else {
                    $fallback(
                      "/data/author/updatedAt",
                      "/mapping/properties/data/optionalProperties/author/properties/updatedAt",
                      "Expected instanceof Date or ISO Date string at /data/author/updatedAt",
                    );
                  }
                  inputDataInnerVal.author = inputDataAuthorInnerVal;
                } else {
                  $fallback(
                    "/data/author",
                    "/mapping/properties/data/optionalProperties/author",
                    "Expected object",
                  );
                }
              }
              if (typeof input.data.createdAt === "undefined") {
                // ignore undefined
              } else {
                if (
                  typeof input.data.createdAt === "object" &&
                  input.data.createdAt instanceof Date
                ) {
                  inputDataInnerVal.createdAt = input.data.createdAt;
                } else if (typeof input.data.createdAt === "string") {
                  inputDataInnerVal.createdAt = new Date(input.data.createdAt);
                } else {
                  $fallback(
                    "/data/createdAt",
                    "/mapping/properties/data/optionalProperties/createdAt",
                    "Expected instanceof Date or ISO Date string at /data/createdAt",
                  );
                }
              }
              if (typeof input.data.updatedAt === "undefined") {
                // ignore undefined
              } else {
                if (
                  typeof input.data.updatedAt === "object" &&
                  input.data.updatedAt instanceof Date
                ) {
                  inputDataInnerVal.updatedAt = input.data.updatedAt;
                } else if (typeof input.data.updatedAt === "string") {
                  inputDataInnerVal.updatedAt = new Date(input.data.updatedAt);
                } else {
                  $fallback(
                    "/data/updatedAt",
                    "/mapping/properties/data/optionalProperties/updatedAt",
                    "Expected instanceof Date or ISO Date string at /data/updatedAt",
                  );
                }
              }
              inputInnerVal.data = inputDataInnerVal;
            } else {
              $fallback("/data", "/mapping/properties/data", "Expected object");
            }
            result = inputInnerVal;
          } else {
            $fallback("", "/mapping", "Expected object");
          }
          break;
        }
        case "POST_LIKED": {
          if (typeof input === "object" && input !== null) {
            const inputInnerVal = {};
            inputInnerVal.eventType = "POST_LIKED";
            if (typeof input.postId === "string") {
              inputInnerVal.postId = input.postId;
            } else {
              $fallback(
                "/postId",
                "/mapping/properties/postId/type",
                "Expected string at /postId",
              );
            }
            if (
              typeof input.timestamp === "object" &&
              input.timestamp instanceof Date
            ) {
              inputInnerVal.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
              inputInnerVal.timestamp = new Date(input.timestamp);
            } else {
              $fallback(
                "/timestamp",
                "/mapping/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /timestamp",
              );
            }
            if (typeof input.postLikeId === "string") {
              inputInnerVal.postLikeId = input.postLikeId;
            } else {
              $fallback(
                "/postLikeId",
                "/mapping/properties/postLikeId/type",
                "Expected string at /postLikeId",
              );
            }
            if (
              typeof input.postLikeCount === "number" &&
              Number.isInteger(input.postLikeCount) &&
              input.postLikeCount >= 0 &&
              input.postLikeCount <= 4294967295
            ) {
              inputInnerVal.postLikeCount = input.postLikeCount;
            } else {
              $fallback(
                "/postLikeCount",
                "/mapping/properties/postLikeCount",
                "Expected valid integer between 0 and 4294967295",
              );
            }
            result = inputInnerVal;
          } else {
            $fallback("", "/mapping", "Expected object");
          }
          break;
        }
        case "POST_COMMENTED": {
          if (typeof input === "object" && input !== null) {
            const inputInnerVal = {};
            inputInnerVal.eventType = "POST_COMMENTED";
            if (typeof input.postId === "string") {
              inputInnerVal.postId = input.postId;
            } else {
              $fallback(
                "/postId",
                "/mapping/properties/postId/type",
                "Expected string at /postId",
              );
            }
            if (
              typeof input.timestamp === "object" &&
              input.timestamp instanceof Date
            ) {
              inputInnerVal.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
              inputInnerVal.timestamp = new Date(input.timestamp);
            } else {
              $fallback(
                "/timestamp",
                "/mapping/properties/timestamp",
                "Expected instanceof Date or ISO Date string at /timestamp",
              );
            }
            if (typeof input.commentId === "string") {
              inputInnerVal.commentId = input.commentId;
            } else {
              $fallback(
                "/commentId",
                "/mapping/properties/commentId/type",
                "Expected string at /commentId",
              );
            }
            if (typeof input.commentText === "string") {
              inputInnerVal.commentText = input.commentText;
            } else {
              $fallback(
                "/commentText",
                "/mapping/properties/commentText/type",
                "Expected string at /commentText",
              );
            }
            if (
              typeof input.commentCount === "number" &&
              Number.isInteger(input.commentCount) &&
              input.commentCount >= 0 &&
              input.commentCount <= 4294967295
            ) {
              inputInnerVal.commentCount = input.commentCount;
            } else {
              $fallback(
                "/commentCount",
                "/mapping/properties/commentCount",
                "Expected valid integer between 0 and 4294967295",
              );
            }
            result = inputInnerVal;
          } else {
            $fallback("", "/mapping", "Expected object");
          }
          break;
        }
        default:
          $fallback(
            "",
            "/mapping",
            "input.eventType did not match one of the specified values",
          );
          break;
      }
    } else {
      $fallback("", "", "Expected Object.");
    }
    return result;
  },
  serialize(input: PostEvent): string {
    let json = "";
    switch (input.eventType) {
      case "POST_CREATED": {
        json += "{";
        json += `"eventType":"POST_CREATED"`;
        json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        json += "}";
        break;
      }
      case "POST_DELETED": {
        json += "{";
        json += `"eventType":"POST_DELETED"`;
        json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        json += "}";
        break;
      }
      case "POST_UPDATED": {
        json += "{";
        json += `"eventType":"POST_UPDATED"`;
        json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        json += ',"data":{';
        let dataHasFields = false;
        if (typeof input.data.id !== "undefined") {
          if (dataHasFields) {
            json += `,"id":"${input.data.id.replace(/[\n]/g, "\\n")}"`;
          } else {
            json += `"id":"${input.data.id.replace(/[\n]/g, "\\n")}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.title !== "undefined") {
          if (dataHasFields) {
            json += `,"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
          } else {
            json += `"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.type !== "undefined") {
          if (dataHasFields) {
            json += `,"type":"${input.data.type}"`;
          } else {
            json += `"type":"${input.data.type}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.description !== "undefined") {
          if (dataHasFields) {
            if (typeof input.data.description === "string") {
              json += `,"description":"${input.data.description.replace(
                /[\n]/g,
                "\\n",
              )}"`;
            } else {
              json += ',"description":null';
            }
          } else {
            if (typeof input.data.description === "string") {
              json += `"description":"${input.data.description.replace(
                /[\n]/g,
                "\\n",
              )}"`;
            } else {
              json += '"description":null';
            }
            dataHasFields = true;
          }
        }
        if (typeof input.data.content !== "undefined") {
          if (dataHasFields) {
            json += `,"content":"${input.data.content.replace(
              /[\n]/g,
              "\\n",
            )}"`;
          } else {
            json += `"content":"${input.data.content.replace(/[\n]/g, "\\n")}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.tags !== "undefined") {
          if (dataHasFields) {
            json += ',"tags":[';
            for (let i = 0; i < input.data.tags.length; i++) {
              const inputDataTagsItem = input.data.tags[i];
              if (i !== 0) {
                json += ",";
              }
              json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
            }
            json += "]";
          } else {
            json += '"tags":[';
            for (let i = 0; i < input.data.tags.length; i++) {
              const inputDataTagsItem = input.data.tags[i];
              if (i !== 0) {
                json += ",";
              }
              json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
            }
            json += "]";
            dataHasFields = true;
          }
        }
        if (typeof input.data.authorId !== "undefined") {
          if (dataHasFields) {
            json += `,"authorId":"${input.data.authorId.replace(
              /[\n]/g,
              "\\n",
            )}"`;
          } else {
            json += `"authorId":"${input.data.authorId.replace(
              /[\n]/g,
              "\\n",
            )}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.author !== "undefined") {
          if (dataHasFields) {
            json += ',"author":{';
            json += `"id":"${input.data.author.id.replace(/[\n]/g, "\\n")}"`;
            json += `,"name":"${input.data.author.name.replace(
              /[\n]/g,
              "\\n",
            )}"`;
            if (typeof input.data.author.bio === "string") {
              json += `,"bio":"${input.data.author.bio.replace(
                /[\n]/g,
                "\\n",
              )}"`;
            } else {
              json += ',"bio":null';
            }
            json += `,"createdAt":"${input.data.author.createdAt.toISOString()}"`;
            json += `,"updatedAt":"${input.data.author.updatedAt.toISOString()}"`;
            json += "}";
          } else {
            json += '"author":{';
            json += `"id":"${input.data.author.id.replace(/[\n]/g, "\\n")}"`;
            json += `,"name":"${input.data.author.name.replace(
              /[\n]/g,
              "\\n",
            )}"`;
            if (typeof input.data.author.bio === "string") {
              json += `,"bio":"${input.data.author.bio.replace(
                /[\n]/g,
                "\\n",
              )}"`;
            } else {
              json += ',"bio":null';
            }
            json += `,"createdAt":"${input.data.author.createdAt.toISOString()}"`;
            json += `,"updatedAt":"${input.data.author.updatedAt.toISOString()}"`;
            json += "}";
            dataHasFields = true;
          }
        }
        if (typeof input.data.createdAt !== "undefined") {
          if (dataHasFields) {
            json += `,"createdAt":"${input.data.createdAt.toISOString()}"`;
          } else {
            json += `"createdAt":"${input.data.createdAt.toISOString()}"`;
            dataHasFields = true;
          }
        }
        if (typeof input.data.updatedAt !== "undefined") {
          if (dataHasFields) {
            json += `,"updatedAt":"${input.data.updatedAt.toISOString()}"`;
          } else {
            json += `"updatedAt":"${input.data.updatedAt.toISOString()}"`;
            dataHasFields = true;
          }
        }
        json += "}";
        json += "}";
        break;
      }
      case "POST_LIKED": {
        json += "{";
        json += `"eventType":"POST_LIKED"`;
        json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        json += `,"postLikeId":"${input.postLikeId.replace(/[\n]/g, "\\n")}"`;
        json += `,"postLikeCount":${input.postLikeCount}`;
        json += "}";
        break;
      }
      case "POST_COMMENTED": {
        json += "{";
        json += `"eventType":"POST_COMMENTED"`;
        json += `,"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        json += `,"commentId":"${input.commentId.replace(/[\n]/g, "\\n")}"`;
        json += `,"commentText":"${input.commentText.replace(/[\n]/g, "\\n")}"`;
        json += `,"commentCount":${input.commentCount}`;
        json += "}";
        break;
      }
    }
    return json;
  },
};
export interface PostEventPostCreated {
  eventType: "POST_CREATED";
  postId: string;
  timestamp: Date;
}

export interface PostEventPostDeleted {
  eventType: "POST_DELETED";
  postId: string;
  timestamp: Date;
}

export interface PostEventPostUpdated {
  eventType: "POST_UPDATED";
  postId: string;
  timestamp: Date;
  data: PostEventPostUpdatedData;
}

export interface PostEventPostUpdatedData {
  id?: string;
  title?: string;
  type?: PostType;
  description?: string | null;
  content?: string;
  tags?: Array<string>;
  authorId?: string;
  author?: Author;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface PostEventPostLiked {
  eventType: "POST_LIKED";
  postId: string;
  timestamp: Date;
  postLikeId: string;
  postLikeCount: number;
}

export interface PostEventPostCommented {
  eventType: "POST_COMMENTED";
  postId: string;
  timestamp: Date;
  commentId: string;
  commentText: string;
  commentCount: number;
}

export interface LogPostEventResponse {
  success: boolean;
  message: string;
}
const $$LogPostEventResponse = {
  parse(input: Record<any, any>): LogPostEventResponse {
    class $ValidationErrorlogPostEventResponse extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorlogPostEventResponse({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.success === "boolean") {
          jsonInnerVal.success = json.success;
        } else {
          $fallback(
            "/success",
            "/properties/success/type",
            "Expected boolean for /success",
          );
        }
        if (typeof json.message === "string") {
          jsonInnerVal.message = json.message;
        } else {
          $fallback(
            "/message",
            "/properties/message/type",
            "Expected string at /message",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.success === "boolean") {
        inputInnerVal.success = input.success;
      } else {
        $fallback(
          "/success",
          "/properties/success/type",
          "Expected boolean for /success",
        );
      }
      if (typeof input.message === "string") {
        inputInnerVal.message = input.message;
      } else {
        $fallback(
          "/message",
          "/properties/message/type",
          "Expected string at /message",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: LogPostEventResponse): string {
    let json = "";
    json += "{";
    json += `"success":${input.success}`;
    json += `,"message":"${input.message.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    return json;
  },
};

export interface UpdatePostParams {
  postId: string;
  data: UpdatePostParamsData;
}
const $$UpdatePostParams = {
  parse(input: Record<any, any>): UpdatePostParams {
    class $ValidationErrorupdatePostParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorupdatePostParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.postId === "string") {
          jsonInnerVal.postId = json.postId;
        } else {
          $fallback(
            "/postId",
            "/properties/postId/type",
            "Expected string at /postId",
          );
        }
        if (typeof json.data === "object" && json.data !== null) {
          const jsonDataInnerVal = {};
          if (typeof json.data.title === "undefined") {
            // ignore undefined
          } else {
            if (typeof json.data.title === "string") {
              jsonDataInnerVal.title = json.data.title;
            } else {
              $fallback(
                "/data/title",
                "/properties/data/optionalProperties/title/type",
                "Expected string at /data/title",
              );
            }
          }
          if (typeof json.data.description === "undefined") {
            // ignore undefined
          } else {
            if (json.data.description === null) {
              jsonDataInnerVal.description = json.data.description;
            } else {
              if (typeof json.data.description === "string") {
                jsonDataInnerVal.description = json.data.description;
              } else {
                $fallback(
                  "/data/description",
                  "/properties/data/optionalProperties/description/type",
                  "Expected string at /data/description",
                );
              }
            }
          }
          if (typeof json.data.content === "undefined") {
            // ignore undefined
          } else {
            if (typeof json.data.content === "string") {
              jsonDataInnerVal.content = json.data.content;
            } else {
              $fallback(
                "/data/content",
                "/properties/data/optionalProperties/content/type",
                "Expected string at /data/content",
              );
            }
          }
          if (typeof json.data.tags === "undefined") {
            // ignore undefined
          } else {
            if (Array.isArray(json.data.tags)) {
              const jsonDataInnerValTagsInnerResult = [];
              for (const jsonDataInnerValTagsInnerResultItem of json.data
                .tags) {
                let jsonDataInnerValTagsInnerResultItemResult;
                if (typeof jsonDataInnerValTagsInnerResultItem === "string") {
                  jsonDataInnerValTagsInnerResultItemResult =
                    jsonDataInnerValTagsInnerResultItem;
                } else {
                  $fallback(
                    "/data/tags/[0]",
                    "/properties/data/optionalProperties/tags/elements/type",
                    "Expected string at /data/tags/[0]",
                  );
                }
                jsonDataInnerValTagsInnerResult.push(
                  jsonDataInnerValTagsInnerResultItemResult,
                );
              }
              jsonDataInnerVal.tags = jsonDataInnerValTagsInnerResult;
            } else {
              $fallback(
                "/data/tags",
                "/properties/data/optionalProperties/tags",
                "Expected Array",
              );
            }
          }
          jsonInnerVal.data = jsonDataInnerVal;
        } else {
          $fallback("/data", "/properties/data", "Expected object");
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.postId === "string") {
        inputInnerVal.postId = input.postId;
      } else {
        $fallback(
          "/postId",
          "/properties/postId/type",
          "Expected string at /postId",
        );
      }
      if (typeof input.data === "object" && input.data !== null) {
        const inputDataInnerVal = {};
        if (typeof input.data.title === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.title === "string") {
            inputDataInnerVal.title = input.data.title;
          } else {
            $fallback(
              "/data/title",
              "/properties/data/optionalProperties/title/type",
              "Expected string at /data/title",
            );
          }
        }
        if (typeof input.data.description === "undefined") {
          // ignore undefined
        } else {
          if (input.data.description === null) {
            inputDataInnerVal.description = input.data.description;
          } else {
            if (typeof input.data.description === "string") {
              inputDataInnerVal.description = input.data.description;
            } else {
              $fallback(
                "/data/description",
                "/properties/data/optionalProperties/description/type",
                "Expected string at /data/description",
              );
            }
          }
        }
        if (typeof input.data.content === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.content === "string") {
            inputDataInnerVal.content = input.data.content;
          } else {
            $fallback(
              "/data/content",
              "/properties/data/optionalProperties/content/type",
              "Expected string at /data/content",
            );
          }
        }
        if (typeof input.data.tags === "undefined") {
          // ignore undefined
        } else {
          if (Array.isArray(input.data.tags)) {
            const inputDataInnerValTagsInnerResult = [];
            for (const inputDataInnerValTagsInnerResultItem of input.data
              .tags) {
              let inputDataInnerValTagsInnerResultItemResult;
              if (typeof inputDataInnerValTagsInnerResultItem === "string") {
                inputDataInnerValTagsInnerResultItemResult =
                  inputDataInnerValTagsInnerResultItem;
              } else {
                $fallback(
                  "/data/tags/[0]",
                  "/properties/data/optionalProperties/tags/elements/type",
                  "Expected string at /data/tags/[0]",
                );
              }
              inputDataInnerValTagsInnerResult.push(
                inputDataInnerValTagsInnerResultItemResult,
              );
            }
            inputDataInnerVal.tags = inputDataInnerValTagsInnerResult;
          } else {
            $fallback(
              "/data/tags",
              "/properties/data/optionalProperties/tags",
              "Expected Array",
            );
          }
        }
        inputInnerVal.data = inputDataInnerVal;
      } else {
        $fallback("/data", "/properties/data", "Expected object");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: UpdatePostParams): string {
    let json = "";
    json += "{";
    json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
    json += ',"data":{';
    let dataHasFields = false;
    if (typeof input.data.title !== "undefined") {
      if (dataHasFields) {
        json += `,"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += `"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.description !== "undefined") {
      if (dataHasFields) {
        if (typeof input.data.description === "string") {
          json += `,"description":"${input.data.description.replace(
            /[\n]/g,
            "\\n",
          )}"`;
        } else {
          json += ',"description":null';
        }
      } else {
        if (typeof input.data.description === "string") {
          json += `"description":"${input.data.description.replace(
            /[\n]/g,
            "\\n",
          )}"`;
        } else {
          json += '"description":null';
        }
        dataHasFields = true;
      }
    }
    if (typeof input.data.content !== "undefined") {
      if (dataHasFields) {
        json += `,"content":"${input.data.content.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += `"content":"${input.data.content.replace(/[\n]/g, "\\n")}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.tags !== "undefined") {
      if (dataHasFields) {
        json += ',"tags":[';
        for (let i = 0; i < input.data.tags.length; i++) {
          const inputDataTagsItem = input.data.tags[i];
          if (i !== 0) {
            json += ",";
          }
          json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
        }
        json += "]";
      } else {
        json += '"tags":[';
        for (let i = 0; i < input.data.tags.length; i++) {
          const inputDataTagsItem = input.data.tags[i];
          if (i !== 0) {
            json += ",";
          }
          json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
        }
        json += "]";
        dataHasFields = true;
      }
    }
    json += "}";
    json += "}";
    return json;
  },
};
export interface UpdatePostParamsData {
  title?: string;
  description?: string | null;
  content?: string;
  tags?: Array<string>;
}

export interface AnnotationId {
  id: string;
  version: string;
}
const $$AnnotationId = {
  parse(input: Record<any, any>): AnnotationId {
    class $ValidationErrorannotationId extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorannotationId({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.id === "string") {
          jsonInnerVal.id = json.id;
        } else {
          $fallback("/id", "/properties/id/type", "Expected string at /id");
        }
        if (typeof json.version === "string") {
          jsonInnerVal.version = json.version;
        } else {
          $fallback(
            "/version",
            "/properties/version/type",
            "Expected string at /version",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.id === "string") {
        inputInnerVal.id = input.id;
      } else {
        $fallback("/id", "/properties/id/type", "Expected string at /id");
      }
      if (typeof input.version === "string") {
        inputInnerVal.version = input.version;
      } else {
        $fallback(
          "/version",
          "/properties/version/type",
          "Expected string at /version",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: AnnotationId): string {
    let json = "";
    json += "{";
    json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"version":"${input.version.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    return json;
  },
};

export interface Annotation {
  annotation_id: AnnotationId;
  associated_id: AssociatedId;
  annotation_type: AnnotationAnnotationType;
  annotation_type_version: number;
  metadata: any;
  box_type_range: AnnotationBoxTypeRange;
}
const $$Annotation = {
  parse(input: Record<any, any>): Annotation {
    class $ValidationErrorannotation extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorannotation({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (
          typeof json.annotation_id === "object" &&
          json.annotation_id !== null
        ) {
          const jsonAnnotationIdInnerVal = {};
          if (typeof json.annotation_id.id === "string") {
            jsonAnnotationIdInnerVal.id = json.annotation_id.id;
          } else {
            $fallback(
              "/annotation_id/id",
              "/properties/annotation_id/properties/id/type",
              "Expected string at /annotation_id/id",
            );
          }
          if (typeof json.annotation_id.version === "string") {
            jsonAnnotationIdInnerVal.version = json.annotation_id.version;
          } else {
            $fallback(
              "/annotation_id/version",
              "/properties/annotation_id/properties/version/type",
              "Expected string at /annotation_id/version",
            );
          }
          jsonInnerVal.annotation_id = jsonAnnotationIdInnerVal;
        } else {
          $fallback(
            "/annotation_id",
            "/properties/annotation_id",
            "Expected object",
          );
        }
        if (
          typeof json.associated_id === "object" &&
          json.associated_id !== null
        ) {
          const jsonAssociatedIdInnerVal = {};
          if (typeof json.associated_id.entity_type === "string") {
            if (
              json.associated_id.entity_type === "MOVIE_ID" ||
              json.associated_id.entity_type === "SHOW_ID"
            ) {
              jsonAssociatedIdInnerVal.entity_type =
                json.associated_id.entity_type;
            } else {
              $fallback(
                "/associated_id/entity_type",
                "/properties/associated_id/properties/entity_type",
                "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
              );
            }
          } else {
            $fallback(
              "/associated_id/entity_type",
              "/properties/associated_id/properties/entity_type",
              "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
            );
          }
          if (typeof json.associated_id.id === "string") {
            jsonAssociatedIdInnerVal.id = json.associated_id.id;
          } else {
            $fallback(
              "/associated_id/id",
              "/properties/associated_id/properties/id/type",
              "Expected string at /associated_id/id",
            );
          }
          jsonInnerVal.associated_id = jsonAssociatedIdInnerVal;
        } else {
          $fallback(
            "/associated_id",
            "/properties/associated_id",
            "Expected object",
          );
        }
        if (typeof json.annotation_type === "string") {
          if (json.annotation_type === "ANNOTATION_BOUNDINGBOX") {
            jsonInnerVal.annotation_type = json.annotation_type;
          } else {
            $fallback(
              "/annotation_type",
              "/properties/annotation_type",
              "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
            );
          }
        } else {
          $fallback(
            "/annotation_type",
            "/properties/annotation_type",
            "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
          );
        }
        if (
          typeof json.annotation_type_version === "number" &&
          Number.isInteger(json.annotation_type_version) &&
          json.annotation_type_version >= 0 &&
          json.annotation_type_version <= 65535
        ) {
          jsonInnerVal.annotation_type_version = json.annotation_type_version;
        } else {
          $fallback(
            "/annotation_type_version",
            "/properties/annotation_type_version",
            "Expected valid integer between 0 and 65535",
          );
        }
        jsonInnerVal.metadata = json.metadata;
        if (
          typeof json.box_type_range === "object" &&
          json.box_type_range !== null
        ) {
          const jsonBoxTypeRangeInnerVal = {};
          if (
            typeof json.box_type_range.start_time_in_nano_sec === "string" ||
            typeof json.box_type_range.start_time_in_nano_sec === "number"
          ) {
            try {
              const val = BigInt(json.box_type_range.start_time_in_nano_sec);
              jsonBoxTypeRangeInnerVal.start_time_in_nano_sec = val;
            } catch (err) {
              $fallback(
                "/box_type_range/start_time_in_nano_sec",
                "/properties/box_type_range/properties/start_time_in_nano_sec",
                "Unable to parse BigInt from json.box_type_range.start_time_in_nano_sec.",
              );
            }
          } else if (
            typeof json.box_type_range.start_time_in_nano_sec === "bigint"
          ) {
            jsonBoxTypeRangeInnerVal.start_time_in_nano_sec =
              json.box_type_range.start_time_in_nano_sec;
          } else {
            $fallback(
              "/box_type_range/start_time_in_nano_sec",
              "/properties/box_type_range/properties/start_time_in_nano_sec",
              "Expected BigInt or Integer string. Got ${json.box_type_range.start_time_in_nano_sec}",
            );
          }
          if (
            typeof json.box_type_range.end_time_in_nano_sec === "string" ||
            typeof json.box_type_range.end_time_in_nano_sec === "number"
          ) {
            try {
              const val = BigInt(json.box_type_range.end_time_in_nano_sec);
              if (val >= BigInt("0")) {
                jsonBoxTypeRangeInnerVal.end_time_in_nano_sec = val;
              } else {
                $fallback(
                  "/box_type_range/end_time_in_nano_sec",
                  "/properties/box_type_range/properties/end_time_in_nano_sec",
                  "Unsigned int must be greater than or equal to 0.",
                );
              }
            } catch (err) {
              $fallback(
                "/box_type_range/end_time_in_nano_sec",
                "/properties/box_type_range/properties/end_time_in_nano_sec",
                "Unable to parse BigInt from json.box_type_range.end_time_in_nano_sec.",
              );
            }
          } else if (
            typeof json.box_type_range.end_time_in_nano_sec === "bigint"
          ) {
            if (json.box_type_range.end_time_in_nano_sec >= BigInt("0")) {
              jsonBoxTypeRangeInnerVal.end_time_in_nano_sec =
                json.box_type_range.end_time_in_nano_sec;
            } else {
              $fallback(
                "/box_type_range/end_time_in_nano_sec",
                "/properties/box_type_range/properties/end_time_in_nano_sec",
                "Unsigned int must be greater than or equal to 0.",
              );
            }
          } else {
            $fallback(
              "/box_type_range/end_time_in_nano_sec",
              "/properties/box_type_range/properties/end_time_in_nano_sec",
              "Expected BigInt or Integer string. Got ${json.box_type_range.end_time_in_nano_sec}",
            );
          }
          jsonInnerVal.box_type_range = jsonBoxTypeRangeInnerVal;
        } else {
          $fallback(
            "/box_type_range",
            "/properties/box_type_range",
            "Expected object",
          );
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.annotation_id === "object" &&
        input.annotation_id !== null
      ) {
        const inputAnnotationIdInnerVal = {};
        if (typeof input.annotation_id.id === "string") {
          inputAnnotationIdInnerVal.id = input.annotation_id.id;
        } else {
          $fallback(
            "/annotation_id/id",
            "/properties/annotation_id/properties/id/type",
            "Expected string at /annotation_id/id",
          );
        }
        if (typeof input.annotation_id.version === "string") {
          inputAnnotationIdInnerVal.version = input.annotation_id.version;
        } else {
          $fallback(
            "/annotation_id/version",
            "/properties/annotation_id/properties/version/type",
            "Expected string at /annotation_id/version",
          );
        }
        inputInnerVal.annotation_id = inputAnnotationIdInnerVal;
      } else {
        $fallback(
          "/annotation_id",
          "/properties/annotation_id",
          "Expected object",
        );
      }
      if (
        typeof input.associated_id === "object" &&
        input.associated_id !== null
      ) {
        const inputAssociatedIdInnerVal = {};
        if (typeof input.associated_id.entity_type === "string") {
          if (
            input.associated_id.entity_type === "MOVIE_ID" ||
            input.associated_id.entity_type === "SHOW_ID"
          ) {
            inputAssociatedIdInnerVal.entity_type =
              input.associated_id.entity_type;
          } else {
            $fallback(
              "/associated_id/entity_type",
              "/properties/associated_id/properties/entity_type",
              "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
            );
          }
        } else {
          $fallback(
            "/associated_id/entity_type",
            "/properties/associated_id/properties/entity_type",
            "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
          );
        }
        if (typeof input.associated_id.id === "string") {
          inputAssociatedIdInnerVal.id = input.associated_id.id;
        } else {
          $fallback(
            "/associated_id/id",
            "/properties/associated_id/properties/id/type",
            "Expected string at /associated_id/id",
          );
        }
        inputInnerVal.associated_id = inputAssociatedIdInnerVal;
      } else {
        $fallback(
          "/associated_id",
          "/properties/associated_id",
          "Expected object",
        );
      }
      if (typeof input.annotation_type === "string") {
        if (input.annotation_type === "ANNOTATION_BOUNDINGBOX") {
          inputInnerVal.annotation_type = input.annotation_type;
        } else {
          $fallback(
            "/annotation_type",
            "/properties/annotation_type",
            "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
          );
        }
      } else {
        $fallback(
          "/annotation_type",
          "/properties/annotation_type",
          "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
        );
      }
      if (
        typeof input.annotation_type_version === "number" &&
        Number.isInteger(input.annotation_type_version) &&
        input.annotation_type_version >= 0 &&
        input.annotation_type_version <= 65535
      ) {
        inputInnerVal.annotation_type_version = input.annotation_type_version;
      } else {
        $fallback(
          "/annotation_type_version",
          "/properties/annotation_type_version",
          "Expected valid integer between 0 and 65535",
        );
      }
      inputInnerVal.metadata = input.metadata;
      if (
        typeof input.box_type_range === "object" &&
        input.box_type_range !== null
      ) {
        const inputBoxTypeRangeInnerVal = {};
        if (
          typeof input.box_type_range.start_time_in_nano_sec === "string" ||
          typeof input.box_type_range.start_time_in_nano_sec === "number"
        ) {
          try {
            const val = BigInt(input.box_type_range.start_time_in_nano_sec);
            inputBoxTypeRangeInnerVal.start_time_in_nano_sec = val;
          } catch (err) {
            $fallback(
              "/box_type_range/start_time_in_nano_sec",
              "/properties/box_type_range/properties/start_time_in_nano_sec",
              "Unable to parse BigInt from input.box_type_range.start_time_in_nano_sec.",
            );
          }
        } else if (
          typeof input.box_type_range.start_time_in_nano_sec === "bigint"
        ) {
          inputBoxTypeRangeInnerVal.start_time_in_nano_sec =
            input.box_type_range.start_time_in_nano_sec;
        } else {
          $fallback(
            "/box_type_range/start_time_in_nano_sec",
            "/properties/box_type_range/properties/start_time_in_nano_sec",
            "Expected BigInt or Integer string. Got ${input.box_type_range.start_time_in_nano_sec}",
          );
        }
        if (
          typeof input.box_type_range.end_time_in_nano_sec === "string" ||
          typeof input.box_type_range.end_time_in_nano_sec === "number"
        ) {
          try {
            const val = BigInt(input.box_type_range.end_time_in_nano_sec);
            if (val >= BigInt("0")) {
              inputBoxTypeRangeInnerVal.end_time_in_nano_sec = val;
            } else {
              $fallback(
                "/box_type_range/end_time_in_nano_sec",
                "/properties/box_type_range/properties/end_time_in_nano_sec",
                "Unsigned int must be greater than or equal to 0.",
              );
            }
          } catch (err) {
            $fallback(
              "/box_type_range/end_time_in_nano_sec",
              "/properties/box_type_range/properties/end_time_in_nano_sec",
              "Unable to parse BigInt from input.box_type_range.end_time_in_nano_sec.",
            );
          }
        } else if (
          typeof input.box_type_range.end_time_in_nano_sec === "bigint"
        ) {
          if (input.box_type_range.end_time_in_nano_sec >= BigInt("0")) {
            inputBoxTypeRangeInnerVal.end_time_in_nano_sec =
              input.box_type_range.end_time_in_nano_sec;
          } else {
            $fallback(
              "/box_type_range/end_time_in_nano_sec",
              "/properties/box_type_range/properties/end_time_in_nano_sec",
              "Unsigned int must be greater than or equal to 0.",
            );
          }
        } else {
          $fallback(
            "/box_type_range/end_time_in_nano_sec",
            "/properties/box_type_range/properties/end_time_in_nano_sec",
            "Expected BigInt or Integer string. Got ${input.box_type_range.end_time_in_nano_sec}",
          );
        }
        inputInnerVal.box_type_range = inputBoxTypeRangeInnerVal;
      } else {
        $fallback(
          "/box_type_range",
          "/properties/box_type_range",
          "Expected object",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: Annotation): string {
    let json = "";
    json += "{";
    json += '"annotation_id":{';
    json += `"id":"${input.annotation_id.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"version":"${input.annotation_id.version.replace(
      /[\n]/g,
      "\\n",
    )}"`;
    json += "}";
    json += ',"associated_id":{';
    json += `"entity_type":"${input.associated_id.entity_type}"`;
    json += `,"id":"${input.associated_id.id.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    json += `,"annotation_type":"${input.annotation_type}"`;
    json += `,"annotation_type_version":${input.annotation_type_version}`;
    if (typeof input.metadata !== "undefined") {
      json += ',"metadata":' + JSON.stringify(input.metadata);
    }
    json += ',"box_type_range":{';
    json += `"start_time_in_nano_sec":"${input.box_type_range.start_time_in_nano_sec.toString()}"`;
    json += `,"end_time_in_nano_sec":"${input.box_type_range.end_time_in_nano_sec.toString()}"`;
    json += "}";
    json += "}";
    return json;
  },
};
export interface AssociatedId {
  entity_type: AnnotationAssociatedIdEntityType;
  id: string;
}

export type AnnotationAssociatedIdEntityType = "MOVIE_ID" | "SHOW_ID";
export type AnnotationAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface AnnotationBoxTypeRange {
  start_time_in_nano_sec: bigint;
  end_time_in_nano_sec: bigint;
}

export interface UpdateAnnotationParams {
  annotation_id: string;
  annotation_id_version: string;
  data: UpdateAnnotationData;
}
const $$UpdateAnnotationParams = {
  parse(input: Record<any, any>): UpdateAnnotationParams {
    class $ValidationErrorupdateAnnotationParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorupdateAnnotationParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    if (typeof input === "string") {
      const json = JSON.parse(input);
      let result = {};
      if (typeof json === "object" && json !== null) {
        const jsonInnerVal = {};
        if (typeof json.annotation_id === "string") {
          jsonInnerVal.annotation_id = json.annotation_id;
        } else {
          $fallback(
            "/annotation_id",
            "/properties/annotation_id/type",
            "Expected string at /annotation_id",
          );
        }
        if (typeof json.annotation_id_version === "string") {
          jsonInnerVal.annotation_id_version = json.annotation_id_version;
        } else {
          $fallback(
            "/annotation_id_version",
            "/properties/annotation_id_version/type",
            "Expected string at /annotation_id_version",
          );
        }
        if (typeof json.data === "object" && json.data !== null) {
          const jsonDataInnerVal = {};
          if (typeof json.data.associated_id === "undefined") {
            // ignore undefined
          } else {
            if (
              typeof json.data.associated_id === "object" &&
              json.data.associated_id !== null
            ) {
              const jsonDataAssociatedIdInnerVal = {};
              if (typeof json.data.associated_id.entity_type === "string") {
                if (
                  json.data.associated_id.entity_type === "MOVIE_ID" ||
                  json.data.associated_id.entity_type === "SHOW_ID"
                ) {
                  jsonDataAssociatedIdInnerVal.entity_type =
                    json.data.associated_id.entity_type;
                } else {
                  $fallback(
                    "/data/associated_id/entity_type",
                    "/properties/data/optionalProperties/associated_id/properties/entity_type",
                    "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                  );
                }
              } else {
                $fallback(
                  "/data/associated_id/entity_type",
                  "/properties/data/optionalProperties/associated_id/properties/entity_type",
                  "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                );
              }
              if (typeof json.data.associated_id.id === "string") {
                jsonDataAssociatedIdInnerVal.id = json.data.associated_id.id;
              } else {
                $fallback(
                  "/data/associated_id/id",
                  "/properties/data/optionalProperties/associated_id/properties/id/type",
                  "Expected string at /data/associated_id/id",
                );
              }
              jsonDataInnerVal.associated_id = jsonDataAssociatedIdInnerVal;
            } else {
              $fallback(
                "/data/associated_id",
                "/properties/data/optionalProperties/associated_id",
                "Expected object",
              );
            }
          }
          if (typeof json.data.annotation_type === "undefined") {
            // ignore undefined
          } else {
            if (typeof json.data.annotation_type === "string") {
              if (json.data.annotation_type === "ANNOTATION_BOUNDINGBOX") {
                jsonDataInnerVal.annotation_type = json.data.annotation_type;
              } else {
                $fallback(
                  "/data/annotation_type",
                  "/properties/data/optionalProperties/annotation_type",
                  "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
                );
              }
            } else {
              $fallback(
                "/data/annotation_type",
                "/properties/data/optionalProperties/annotation_type",
                "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
              );
            }
          }
          if (typeof json.data.annotation_type_version === "undefined") {
            // ignore undefined
          } else {
            if (
              typeof json.data.annotation_type_version === "number" &&
              Number.isInteger(json.data.annotation_type_version) &&
              json.data.annotation_type_version >= 0 &&
              json.data.annotation_type_version <= 65535
            ) {
              jsonDataInnerVal.annotation_type_version =
                json.data.annotation_type_version;
            } else {
              $fallback(
                "/data/annotation_type_version",
                "/properties/data/optionalProperties/annotation_type_version",
                "Expected valid integer between 0 and 65535",
              );
            }
          }
          if (typeof json.data.metadata === "undefined") {
            // ignore undefined
          } else {
            jsonDataInnerVal.metadata = json.data.metadata;
          }
          if (typeof json.data.box_type_range === "undefined") {
            // ignore undefined
          } else {
            if (
              typeof json.data.box_type_range === "object" &&
              json.data.box_type_range !== null
            ) {
              const jsonDataBoxTypeRangeInnerVal = {};
              if (
                typeof json.data.box_type_range.start_time_in_nano_sec ===
                  "string" ||
                typeof json.data.box_type_range.start_time_in_nano_sec ===
                  "number"
              ) {
                try {
                  const val = BigInt(
                    json.data.box_type_range.start_time_in_nano_sec,
                  );
                  jsonDataBoxTypeRangeInnerVal.start_time_in_nano_sec = val;
                } catch (err) {
                  $fallback(
                    "/data/box_type_range/start_time_in_nano_sec",
                    "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                    "Unable to parse BigInt from json.data.box_type_range.start_time_in_nano_sec.",
                  );
                }
              } else if (
                typeof json.data.box_type_range.start_time_in_nano_sec ===
                "bigint"
              ) {
                jsonDataBoxTypeRangeInnerVal.start_time_in_nano_sec =
                  json.data.box_type_range.start_time_in_nano_sec;
              } else {
                $fallback(
                  "/data/box_type_range/start_time_in_nano_sec",
                  "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                  "Expected BigInt or Integer string. Got ${json.data.box_type_range.start_time_in_nano_sec}",
                );
              }
              if (
                typeof json.data.box_type_range.end_time_in_nano_sec ===
                  "string" ||
                typeof json.data.box_type_range.end_time_in_nano_sec ===
                  "number"
              ) {
                try {
                  const val = BigInt(
                    json.data.box_type_range.end_time_in_nano_sec,
                  );
                  if (val >= BigInt("0")) {
                    jsonDataBoxTypeRangeInnerVal.end_time_in_nano_sec = val;
                  } else {
                    $fallback(
                      "/data/box_type_range/end_time_in_nano_sec",
                      "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                      "Unsigned int must be greater than or equal to 0.",
                    );
                  }
                } catch (err) {
                  $fallback(
                    "/data/box_type_range/end_time_in_nano_sec",
                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                    "Unable to parse BigInt from json.data.box_type_range.end_time_in_nano_sec.",
                  );
                }
              } else if (
                typeof json.data.box_type_range.end_time_in_nano_sec ===
                "bigint"
              ) {
                if (
                  json.data.box_type_range.end_time_in_nano_sec >= BigInt("0")
                ) {
                  jsonDataBoxTypeRangeInnerVal.end_time_in_nano_sec =
                    json.data.box_type_range.end_time_in_nano_sec;
                } else {
                  $fallback(
                    "/data/box_type_range/end_time_in_nano_sec",
                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                    "Unsigned int must be greater than or equal to 0.",
                  );
                }
              } else {
                $fallback(
                  "/data/box_type_range/end_time_in_nano_sec",
                  "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                  "Expected BigInt or Integer string. Got ${json.data.box_type_range.end_time_in_nano_sec}",
                );
              }
              jsonDataInnerVal.box_type_range = jsonDataBoxTypeRangeInnerVal;
            } else {
              $fallback(
                "/data/box_type_range",
                "/properties/data/optionalProperties/box_type_range",
                "Expected object",
              );
            }
          }
          jsonInnerVal.data = jsonDataInnerVal;
        } else {
          $fallback("/data", "/properties/data", "Expected object");
        }
        result = jsonInnerVal;
      } else {
        $fallback("", "", "Expected object");
      }
      return result;
    }
    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.annotation_id === "string") {
        inputInnerVal.annotation_id = input.annotation_id;
      } else {
        $fallback(
          "/annotation_id",
          "/properties/annotation_id/type",
          "Expected string at /annotation_id",
        );
      }
      if (typeof input.annotation_id_version === "string") {
        inputInnerVal.annotation_id_version = input.annotation_id_version;
      } else {
        $fallback(
          "/annotation_id_version",
          "/properties/annotation_id_version/type",
          "Expected string at /annotation_id_version",
        );
      }
      if (typeof input.data === "object" && input.data !== null) {
        const inputDataInnerVal = {};
        if (typeof input.data.associated_id === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.associated_id === "object" &&
            input.data.associated_id !== null
          ) {
            const inputDataAssociatedIdInnerVal = {};
            if (typeof input.data.associated_id.entity_type === "string") {
              if (
                input.data.associated_id.entity_type === "MOVIE_ID" ||
                input.data.associated_id.entity_type === "SHOW_ID"
              ) {
                inputDataAssociatedIdInnerVal.entity_type =
                  input.data.associated_id.entity_type;
              } else {
                $fallback(
                  "/data/associated_id/entity_type",
                  "/properties/data/optionalProperties/associated_id/properties/entity_type",
                  "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                );
              }
            } else {
              $fallback(
                "/data/associated_id/entity_type",
                "/properties/data/optionalProperties/associated_id/properties/entity_type",
                "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
              );
            }
            if (typeof input.data.associated_id.id === "string") {
              inputDataAssociatedIdInnerVal.id = input.data.associated_id.id;
            } else {
              $fallback(
                "/data/associated_id/id",
                "/properties/data/optionalProperties/associated_id/properties/id/type",
                "Expected string at /data/associated_id/id",
              );
            }
            inputDataInnerVal.associated_id = inputDataAssociatedIdInnerVal;
          } else {
            $fallback(
              "/data/associated_id",
              "/properties/data/optionalProperties/associated_id",
              "Expected object",
            );
          }
        }
        if (typeof input.data.annotation_type === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.annotation_type === "string") {
            if (input.data.annotation_type === "ANNOTATION_BOUNDINGBOX") {
              inputDataInnerVal.annotation_type = input.data.annotation_type;
            } else {
              $fallback(
                "/data/annotation_type",
                "/properties/data/optionalProperties/annotation_type",
                "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
              );
            }
          } else {
            $fallback(
              "/data/annotation_type",
              "/properties/data/optionalProperties/annotation_type",
              "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
            );
          }
        }
        if (typeof input.data.annotation_type_version === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.annotation_type_version === "number" &&
            Number.isInteger(input.data.annotation_type_version) &&
            input.data.annotation_type_version >= 0 &&
            input.data.annotation_type_version <= 65535
          ) {
            inputDataInnerVal.annotation_type_version =
              input.data.annotation_type_version;
          } else {
            $fallback(
              "/data/annotation_type_version",
              "/properties/data/optionalProperties/annotation_type_version",
              "Expected valid integer between 0 and 65535",
            );
          }
        }
        if (typeof input.data.metadata === "undefined") {
          // ignore undefined
        } else {
          inputDataInnerVal.metadata = input.data.metadata;
        }
        if (typeof input.data.box_type_range === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.box_type_range === "object" &&
            input.data.box_type_range !== null
          ) {
            const inputDataBoxTypeRangeInnerVal = {};
            if (
              typeof input.data.box_type_range.start_time_in_nano_sec ===
                "string" ||
              typeof input.data.box_type_range.start_time_in_nano_sec ===
                "number"
            ) {
              try {
                const val = BigInt(
                  input.data.box_type_range.start_time_in_nano_sec,
                );
                inputDataBoxTypeRangeInnerVal.start_time_in_nano_sec = val;
              } catch (err) {
                $fallback(
                  "/data/box_type_range/start_time_in_nano_sec",
                  "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                  "Unable to parse BigInt from input.data.box_type_range.start_time_in_nano_sec.",
                );
              }
            } else if (
              typeof input.data.box_type_range.start_time_in_nano_sec ===
              "bigint"
            ) {
              inputDataBoxTypeRangeInnerVal.start_time_in_nano_sec =
                input.data.box_type_range.start_time_in_nano_sec;
            } else {
              $fallback(
                "/data/box_type_range/start_time_in_nano_sec",
                "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                "Expected BigInt or Integer string. Got ${input.data.box_type_range.start_time_in_nano_sec}",
              );
            }
            if (
              typeof input.data.box_type_range.end_time_in_nano_sec ===
                "string" ||
              typeof input.data.box_type_range.end_time_in_nano_sec === "number"
            ) {
              try {
                const val = BigInt(
                  input.data.box_type_range.end_time_in_nano_sec,
                );
                if (val >= BigInt("0")) {
                  inputDataBoxTypeRangeInnerVal.end_time_in_nano_sec = val;
                } else {
                  $fallback(
                    "/data/box_type_range/end_time_in_nano_sec",
                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                    "Unsigned int must be greater than or equal to 0.",
                  );
                }
              } catch (err) {
                $fallback(
                  "/data/box_type_range/end_time_in_nano_sec",
                  "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                  "Unable to parse BigInt from input.data.box_type_range.end_time_in_nano_sec.",
                );
              }
            } else if (
              typeof input.data.box_type_range.end_time_in_nano_sec === "bigint"
            ) {
              if (
                input.data.box_type_range.end_time_in_nano_sec >= BigInt("0")
              ) {
                inputDataBoxTypeRangeInnerVal.end_time_in_nano_sec =
                  input.data.box_type_range.end_time_in_nano_sec;
              } else {
                $fallback(
                  "/data/box_type_range/end_time_in_nano_sec",
                  "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                  "Unsigned int must be greater than or equal to 0.",
                );
              }
            } else {
              $fallback(
                "/data/box_type_range/end_time_in_nano_sec",
                "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                "Expected BigInt or Integer string. Got ${input.data.box_type_range.end_time_in_nano_sec}",
              );
            }
            inputDataInnerVal.box_type_range = inputDataBoxTypeRangeInnerVal;
          } else {
            $fallback(
              "/data/box_type_range",
              "/properties/data/optionalProperties/box_type_range",
              "Expected object",
            );
          }
        }
        inputInnerVal.data = inputDataInnerVal;
      } else {
        $fallback("/data", "/properties/data", "Expected object");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: UpdateAnnotationParams): string {
    let json = "";
    json += "{";
    json += `"annotation_id":"${input.annotation_id.replace(/[\n]/g, "\\n")}"`;
    json += `,"annotation_id_version":"${input.annotation_id_version.replace(
      /[\n]/g,
      "\\n",
    )}"`;
    json += ',"data":{';
    let dataHasFields = false;
    if (typeof input.data.associated_id !== "undefined") {
      if (dataHasFields) {
        json += ',"associated_id":{';
        json += `"entity_type":"${input.data.associated_id.entity_type}"`;
        json += `,"id":"${input.data.associated_id.id.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
      } else {
        json += '"associated_id":{';
        json += `"entity_type":"${input.data.associated_id.entity_type}"`;
        json += `,"id":"${input.data.associated_id.id.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
        dataHasFields = true;
      }
    }
    if (typeof input.data.annotation_type !== "undefined") {
      if (dataHasFields) {
        json += `,"annotation_type":"${input.data.annotation_type}"`;
      } else {
        json += `"annotation_type":"${input.data.annotation_type}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.annotation_type_version !== "undefined") {
      if (dataHasFields) {
        json += `,"annotation_type_version":${input.data.annotation_type_version}`;
      } else {
        json += `"annotation_type_version":${input.data.annotation_type_version}`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.metadata !== "undefined") {
      if (dataHasFields) {
        if (typeof input.data.metadata !== "undefined") {
          json += ',"metadata":' + JSON.stringify(input.data.metadata);
        }
      } else {
        if (typeof input.data.metadata !== "undefined") {
          json += '"metadata":' + JSON.stringify(input.data.metadata);
        }
        dataHasFields = true;
      }
    }
    if (typeof input.data.box_type_range !== "undefined") {
      if (dataHasFields) {
        json += ',"box_type_range":{';
        json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
        json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
        json += "}";
      } else {
        json += '"box_type_range":{';
        json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
        json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
        json += "}";
        dataHasFields = true;
      }
    }
    json += "}";
    json += "}";
    return json;
  },
};
export interface UpdateAnnotationData {
  associated_id?: AssociatedId;
  annotation_type?: UpdateAnnotationParamsDataAnnotationType;
  annotation_type_version?: number;
  metadata?: any;
  box_type_range?: UpdateAnnotationParamsDataBoxTypeRange;
}

export type UpdateAnnotationParamsDataAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface UpdateAnnotationParamsDataBoxTypeRange {
  start_time_in_nano_sec: bigint;
  end_time_in_nano_sec: bigint;
}
