// @ts-nocheck
// this file was autogenerated by arri-codegen-ts
/* eslint-disable */
import { arriRequest } from "arri-client";

interface TestClientOptions {
  baseUrl?: string;
  headers?: Record<string, string>;
}

export class TestClient {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;
  posts: TestClientPostsService;
  videos: TestClientVideosService;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
    this.posts = new TestClientPostsService(options);
    this.videos = new TestClientVideosService(options);
  }
}

export class TestClientPostsService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
  }
  getPost(params: PostParams) {
    return arriRequest<Post, PostParams>({
      url: `${this.baseUrl}/rpcs/posts/get-post`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$Post.parse,
      serializer: $$PostParams.serialize,
    });
  }
  getPosts(params: PostListParams) {
    return arriRequest<PostListResponse, PostListParams>({
      url: `${this.baseUrl}/rpcs/posts/get-posts`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$PostListResponse.parse,
      serializer: $$PostListParams.serialize,
    });
  }
  updatePost(params: UpdatePostParams) {
    return arriRequest<Post, UpdatePostParams>({
      url: `${this.baseUrl}/rpcs/posts/update-post`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$Post.parse,
      serializer: $$UpdatePostParams.serialize,
    });
  }
}

export class TestClientVideosService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = { "client-version": "9", ...options.headers };
  }
  getAnnotation(params: AnnotationId) {
    return arriRequest<Annotation, AnnotationId>({
      url: `${this.baseUrl}/rpcs/videos/get-annotation`,
      method: "get",
      headers: this.headers,
      params,
      parser: $$Annotation.parse,
      serializer: $$AnnotationId.serialize,
    });
  }
  updateAnnotation(params: UpdateAnnotationParams) {
    return arriRequest<Annotation, UpdateAnnotationParams>({
      url: `${this.baseUrl}/rpcs/videos/update-annotation`,
      method: "post",
      headers: this.headers,
      params,
      parser: $$Annotation.parse,
      serializer: $$UpdateAnnotationParams.serialize,
    });
  }
}

export interface PostParams {
  postId: string;
}
const $$PostParams = {
  parse(input: Record<any, any>): PostParams {
    class $ValidationErrorpostParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.postId === "string") {
        inputInnerVal.postId = input.postId;
      } else {
        $fallback(
          "/postId",
          "/properties/postId/type",
          "Expected string at /postId",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostParams): string {
    let json = "";
    json += "{";
    json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    return json;
  },
};

export interface Post {
  id: string;
  title: string;
  type: PostType;
  description: string | null;
  content: string;
  tags: Array<string>;
  authorId: string;
  author: Author;
  createdAt: Date;
  updatedAt: Date;
}
const $$Post = {
  parse(input: Record<any, any>): Post {
    class $ValidationErrorpost extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpost({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.id === "string") {
        inputInnerVal.id = input.id;
      } else {
        $fallback("/id", "/properties/id/type", "Expected string at /id");
      }
      if (typeof input.title === "string") {
        inputInnerVal.title = input.title;
      } else {
        $fallback(
          "/title",
          "/properties/title/type",
          "Expected string at /title",
        );
      }
      if (typeof input.type === "string") {
        if (
          input.type === "text" ||
          input.type === "image" ||
          input.type === "video"
        ) {
          inputInnerVal.type = input.type;
        } else {
          $fallback(
            "/type",
            "/properties/type",
            "Expected one of the following values: [text, image, video] at /type.",
          );
        }
      } else {
        $fallback(
          "/type",
          "/properties/type",
          "Expected one of the following values: [text, image, video] at /type.",
        );
      }
      if (input.description === null) {
        inputInnerVal.description = input.description;
      } else {
        if (typeof input.description === "string") {
          inputInnerVal.description = input.description;
        } else {
          $fallback(
            "/description",
            "/properties/description/type",
            "Expected string at /description",
          );
        }
      }
      if (typeof input.content === "string") {
        inputInnerVal.content = input.content;
      } else {
        $fallback(
          "/content",
          "/properties/content/type",
          "Expected string at /content",
        );
      }
      if (Array.isArray(input.tags)) {
        const inputInnerValTagsInnerResult = [];
        for (const item of input.tags) {
          let inputInnerValTagsInnerResultItem;
          if (typeof item === "string") {
            inputInnerValTagsInnerResultItem = item;
          } else {
            $fallback(
              "/tags/[0]",
              "/properties/tags/elements/type",
              "Expected string at /tags/[0]",
            );
          }
          inputInnerValTagsInnerResult.push(inputInnerValTagsInnerResultItem);
        }
        inputInnerVal.tags = inputInnerValTagsInnerResult;
      } else {
        $fallback("/tags", "/properties/tags", "Expected Array");
      }
      if (typeof input.authorId === "string") {
        inputInnerVal.authorId = input.authorId;
      } else {
        $fallback(
          "/authorId",
          "/properties/authorId/type",
          "Expected string at /authorId",
        );
      }
      if (typeof input.author === "object" && input.author !== null) {
        const inputAuthorInnerVal = {};
        if (typeof input.author.id === "string") {
          inputAuthorInnerVal.id = input.author.id;
        } else {
          $fallback(
            "/author/id",
            "/properties/author/properties/id/type",
            "Expected string at /author/id",
          );
        }
        if (typeof input.author.name === "string") {
          inputAuthorInnerVal.name = input.author.name;
        } else {
          $fallback(
            "/author/name",
            "/properties/author/properties/name/type",
            "Expected string at /author/name",
          );
        }
        if (input.author.bio === null) {
          inputAuthorInnerVal.bio = input.author.bio;
        } else {
          if (typeof input.author.bio === "string") {
            inputAuthorInnerVal.bio = input.author.bio;
          } else {
            $fallback(
              "/author/bio",
              "/properties/author/properties/bio/type",
              "Expected string at /author/bio",
            );
          }
        }
        if (
          typeof input.author.createdAt === "object" &&
          input.author.createdAt instanceof Date
        ) {
          inputAuthorInnerVal.createdAt = input.author.createdAt;
        } else if (typeof input.author.createdAt === "string") {
          inputAuthorInnerVal.createdAt = new Date(input.author.createdAt);
        } else {
          $fallback(
            "/author/createdAt",
            "/properties/author/properties/createdAt",
            "Expected instanceof Date or ISO Date string at /author/createdAt",
          );
        }
        if (
          typeof input.author.updatedAt === "object" &&
          input.author.updatedAt instanceof Date
        ) {
          inputAuthorInnerVal.updatedAt = input.author.updatedAt;
        } else if (typeof input.author.updatedAt === "string") {
          inputAuthorInnerVal.updatedAt = new Date(input.author.updatedAt);
        } else {
          $fallback(
            "/author/updatedAt",
            "/properties/author/properties/updatedAt",
            "Expected instanceof Date or ISO Date string at /author/updatedAt",
          );
        }
        inputInnerVal.author = inputAuthorInnerVal;
      } else {
        $fallback("/author", "/properties/author", "Expected object");
      }
      if (
        typeof input.createdAt === "object" &&
        input.createdAt instanceof Date
      ) {
        inputInnerVal.createdAt = input.createdAt;
      } else if (typeof input.createdAt === "string") {
        inputInnerVal.createdAt = new Date(input.createdAt);
      } else {
        $fallback(
          "/createdAt",
          "/properties/createdAt",
          "Expected instanceof Date or ISO Date string at /createdAt",
        );
      }
      if (
        typeof input.updatedAt === "object" &&
        input.updatedAt instanceof Date
      ) {
        inputInnerVal.updatedAt = input.updatedAt;
      } else if (typeof input.updatedAt === "string") {
        inputInnerVal.updatedAt = new Date(input.updatedAt);
      } else {
        $fallback(
          "/updatedAt",
          "/properties/updatedAt",
          "Expected instanceof Date or ISO Date string at /updatedAt",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: Post): string {
    let json = "";
    json += "{";
    json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"title":"${input.title.replace(/[\n]/g, "\\n")}"`;
    json += `,"type":"${input.type}"`;
    if (typeof input.description === "string") {
      json += `,"description":"${input.description.replace(/[\n]/g, "\\n")}"`;
    } else {
      json += ',"description":null';
    }
    json += `,"content":"${input.content.replace(/[\n]/g, "\\n")}"`;
    json += ',"tags":[';
    for (let i = 0; i < input.tags.length; i++) {
      const inputTagsItem = input.tags[i];
      if (i !== 0) {
        json += ",";
      }
      json += `"${inputTagsItem.replace(/[\n]/g, "\\n")}"`;
    }
    json += "]";
    json += `,"authorId":"${input.authorId.replace(/[\n]/g, "\\n")}"`;
    json += ',"author":{';
    json += `"id":"${input.author.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"name":"${input.author.name.replace(/[\n]/g, "\\n")}"`;
    if (typeof input.author.bio === "string") {
      json += `,"bio":"${input.author.bio.replace(/[\n]/g, "\\n")}"`;
    } else {
      json += ',"bio":null';
    }
    json += `,"createdAt":"${input.author.createdAt.toISOString()}"`;
    json += `,"updatedAt":"${input.author.updatedAt.toISOString()}"`;
    json += "}";
    json += `,"createdAt":"${input.createdAt.toISOString()}"`;
    json += `,"updatedAt":"${input.updatedAt.toISOString()}"`;
    json += "}";
    return json;
  },
};
export type PostType = "text" | "image" | "video";
export interface Author {
  id: string;
  name: string;
  bio: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface PostListParams {
  limit: number;
  type?: PostType;
}
const $$PostListParams = {
  parse(input: Record<any, any>): PostListParams {
    class $ValidationErrorpostListParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostListParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.limit === "number" &&
        Number.isInteger(input.limit) &&
        input.limit >= -128 &&
        input.limit <= 127
      ) {
        inputInnerVal.limit = input.limit;
      } else {
        $fallback(
          "/limit",
          "/properties/limit",
          "Expected valid integer between -128 and 127",
        );
      }
      if (typeof input.type === "undefined") {
        // ignore undefined
      } else {
        if (typeof input.type === "string") {
          if (
            input.type === "text" ||
            input.type === "image" ||
            input.type === "video"
          ) {
            inputInnerVal.type = input.type;
          } else {
            $fallback(
              "/type",
              "/optionalProperties/type",
              "Expected one of the following values: [text, image, video] at /type.",
            );
          }
        } else {
          $fallback(
            "/type",
            "/optionalProperties/type",
            "Expected one of the following values: [text, image, video] at /type.",
          );
        }
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostListParams): string {
    let json = "";
    json += "{";
    json += `"limit":${input.limit}`;
    if (typeof input.type !== "undefined") {
      json += `,"type":"${input.type}"`;
    }
    json += "}";
    return json;
  },
};

export interface PostListResponse {
  total: number;
  items: Array<Post>;
}
const $$PostListResponse = {
  parse(input: Record<any, any>): PostListResponse {
    class $ValidationErrorpostListResponse extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorpostListResponse({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.total === "number" &&
        Number.isInteger(input.total) &&
        input.total >= -2147483648 &&
        input.total <= 2147483647
      ) {
        inputInnerVal.total = input.total;
      } else {
        $fallback(
          "/total",
          "/properties/total",
          "Expected valid integer between -2147483648 and 2147483647",
        );
      }
      if (Array.isArray(input.items)) {
        const inputInnerValItemsInnerResult = [];
        for (const item of input.items) {
          let inputInnerValItemsInnerResultItem;
          if (typeof item === "object" && item !== null) {
            const itemInnerVal = {};
            if (typeof item.id === "string") {
              itemInnerVal.id = item.id;
            } else {
              $fallback(
                "/items/[0]/id",
                "/properties/items/elements/properties/id/type",
                "Expected string at /items/[0]/id",
              );
            }
            if (typeof item.title === "string") {
              itemInnerVal.title = item.title;
            } else {
              $fallback(
                "/items/[0]/title",
                "/properties/items/elements/properties/title/type",
                "Expected string at /items/[0]/title",
              );
            }
            if (typeof item.type === "string") {
              if (
                item.type === "text" ||
                item.type === "image" ||
                item.type === "video"
              ) {
                itemInnerVal.type = item.type;
              } else {
                $fallback(
                  "/items/[0]/type",
                  "/properties/items/elements/properties/type",
                  "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                );
              }
            } else {
              $fallback(
                "/items/[0]/type",
                "/properties/items/elements/properties/type",
                "Expected one of the following values: [text, image, video] at /items/[0]/type.",
              );
            }
            if (item.description === null) {
              itemInnerVal.description = item.description;
            } else {
              if (typeof item.description === "string") {
                itemInnerVal.description = item.description;
              } else {
                $fallback(
                  "/items/[0]/description",
                  "/properties/items/elements/properties/description/type",
                  "Expected string at /items/[0]/description",
                );
              }
            }
            if (typeof item.content === "string") {
              itemInnerVal.content = item.content;
            } else {
              $fallback(
                "/items/[0]/content",
                "/properties/items/elements/properties/content/type",
                "Expected string at /items/[0]/content",
              );
            }
            if (Array.isArray(item.tags)) {
              const itemInnerValTagsInnerResult = [];
              for (const item of item.tags) {
                let itemInnerValTagsInnerResultItem;
                if (typeof item === "string") {
                  itemInnerValTagsInnerResultItem = item;
                } else {
                  $fallback(
                    "/items/[0]/tags/[0]",
                    "/properties/items/elements/properties/tags/elements/type",
                    "Expected string at /items/[0]/tags/[0]",
                  );
                }
                itemInnerValTagsInnerResult.push(
                  itemInnerValTagsInnerResultItem,
                );
              }
              itemInnerVal.tags = itemInnerValTagsInnerResult;
            } else {
              $fallback(
                "/items/[0]/tags",
                "/properties/items/elements/properties/tags",
                "Expected Array",
              );
            }
            if (typeof item.authorId === "string") {
              itemInnerVal.authorId = item.authorId;
            } else {
              $fallback(
                "/items/[0]/authorId",
                "/properties/items/elements/properties/authorId/type",
                "Expected string at /items/[0]/authorId",
              );
            }
            if (typeof item.author === "object" && item.author !== null) {
              const itemAuthorInnerVal = {};
              if (typeof item.author.id === "string") {
                itemAuthorInnerVal.id = item.author.id;
              } else {
                $fallback(
                  "/items/[0]/author/id",
                  "/properties/items/elements/properties/author/properties/id/type",
                  "Expected string at /items/[0]/author/id",
                );
              }
              if (typeof item.author.name === "string") {
                itemAuthorInnerVal.name = item.author.name;
              } else {
                $fallback(
                  "/items/[0]/author/name",
                  "/properties/items/elements/properties/author/properties/name/type",
                  "Expected string at /items/[0]/author/name",
                );
              }
              if (item.author.bio === null) {
                itemAuthorInnerVal.bio = item.author.bio;
              } else {
                if (typeof item.author.bio === "string") {
                  itemAuthorInnerVal.bio = item.author.bio;
                } else {
                  $fallback(
                    "/items/[0]/author/bio",
                    "/properties/items/elements/properties/author/properties/bio/type",
                    "Expected string at /items/[0]/author/bio",
                  );
                }
              }
              if (
                typeof item.author.createdAt === "object" &&
                item.author.createdAt instanceof Date
              ) {
                itemAuthorInnerVal.createdAt = item.author.createdAt;
              } else if (typeof item.author.createdAt === "string") {
                itemAuthorInnerVal.createdAt = new Date(item.author.createdAt);
              } else {
                $fallback(
                  "/items/[0]/author/createdAt",
                  "/properties/items/elements/properties/author/properties/createdAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/author/createdAt",
                );
              }
              if (
                typeof item.author.updatedAt === "object" &&
                item.author.updatedAt instanceof Date
              ) {
                itemAuthorInnerVal.updatedAt = item.author.updatedAt;
              } else if (typeof item.author.updatedAt === "string") {
                itemAuthorInnerVal.updatedAt = new Date(item.author.updatedAt);
              } else {
                $fallback(
                  "/items/[0]/author/updatedAt",
                  "/properties/items/elements/properties/author/properties/updatedAt",
                  "Expected instanceof Date or ISO Date string at /items/[0]/author/updatedAt",
                );
              }
              itemInnerVal.author = itemAuthorInnerVal;
            } else {
              $fallback(
                "/items/[0]/author",
                "/properties/items/elements/properties/author",
                "Expected object",
              );
            }
            if (
              typeof item.createdAt === "object" &&
              item.createdAt instanceof Date
            ) {
              itemInnerVal.createdAt = item.createdAt;
            } else if (typeof item.createdAt === "string") {
              itemInnerVal.createdAt = new Date(item.createdAt);
            } else {
              $fallback(
                "/items/[0]/createdAt",
                "/properties/items/elements/properties/createdAt",
                "Expected instanceof Date or ISO Date string at /items/[0]/createdAt",
              );
            }
            if (
              typeof item.updatedAt === "object" &&
              item.updatedAt instanceof Date
            ) {
              itemInnerVal.updatedAt = item.updatedAt;
            } else if (typeof item.updatedAt === "string") {
              itemInnerVal.updatedAt = new Date(item.updatedAt);
            } else {
              $fallback(
                "/items/[0]/updatedAt",
                "/properties/items/elements/properties/updatedAt",
                "Expected instanceof Date or ISO Date string at /items/[0]/updatedAt",
              );
            }
            inputInnerValItemsInnerResultItem = itemInnerVal;
          } else {
            $fallback(
              "/items/[0]",
              "/properties/items/elements",
              "Expected object",
            );
          }
          inputInnerValItemsInnerResult.push(inputInnerValItemsInnerResultItem);
        }
        inputInnerVal.items = inputInnerValItemsInnerResult;
      } else {
        $fallback("/items", "/properties/items", "Expected Array");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: PostListResponse): string {
    let json = "";
    json += "{";
    json += `"total":${input.total}`;
    json += ',"items":[';
    for (let i = 0; i < input.items.length; i++) {
      const inputItemsItem = input.items[i];
      if (i !== 0) {
        json += ",";
      }
      json += "{";
      json += `"id":"${inputItemsItem.id.replace(/[\n]/g, "\\n")}"`;
      json += `,"title":"${inputItemsItem.title.replace(/[\n]/g, "\\n")}"`;
      json += `,"type":"${inputItemsItem.type}"`;
      if (typeof inputItemsItem.description === "string") {
        json += `,"description":"${inputItemsItem.description.replace(
          /[\n]/g,
          "\\n",
        )}"`;
      } else {
        json += ',"description":null';
      }
      json += `,"content":"${inputItemsItem.content.replace(/[\n]/g, "\\n")}"`;
      json += ',"tags":[';
      for (let i = 0; i < inputItemsItem.tags.length; i++) {
        const inputItemsItemTagsItem = inputItemsItem.tags[i];
        if (i !== 0) {
          json += ",";
        }
        json += `"${inputItemsItemTagsItem.replace(/[\n]/g, "\\n")}"`;
      }
      json += "]";
      json += `,"authorId":"${inputItemsItem.authorId.replace(
        /[\n]/g,
        "\\n",
      )}"`;
      json += ',"author":{';
      json += `"id":"${inputItemsItem.author.id.replace(/[\n]/g, "\\n")}"`;
      json += `,"name":"${inputItemsItem.author.name.replace(/[\n]/g, "\\n")}"`;
      if (typeof inputItemsItem.author.bio === "string") {
        json += `,"bio":"${inputItemsItem.author.bio.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += ',"bio":null';
      }
      json += `,"createdAt":"${inputItemsItem.author.createdAt.toISOString()}"`;
      json += `,"updatedAt":"${inputItemsItem.author.updatedAt.toISOString()}"`;
      json += "}";
      json += `,"createdAt":"${inputItemsItem.createdAt.toISOString()}"`;
      json += `,"updatedAt":"${inputItemsItem.updatedAt.toISOString()}"`;
      json += "}";
    }
    json += "]";
    json += "}";
    return json;
  },
};

export interface UpdatePostParams {
  postId: string;
  data: UpdatePostParamsData;
}
const $$UpdatePostParams = {
  parse(input: Record<any, any>): UpdatePostParams {
    class $ValidationErrorupdatePostParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorupdatePostParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.postId === "string") {
        inputInnerVal.postId = input.postId;
      } else {
        $fallback(
          "/postId",
          "/properties/postId/type",
          "Expected string at /postId",
        );
      }
      if (typeof input.data === "object" && input.data !== null) {
        const inputDataInnerVal = {};
        if (typeof input.data.title === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.title === "string") {
            inputDataInnerVal.title = input.data.title;
          } else {
            $fallback(
              "/data/title",
              "/properties/data/optionalProperties/title/type",
              "Expected string at /data/title",
            );
          }
        }
        if (typeof input.data.description === "undefined") {
          // ignore undefined
        } else {
          if (input.data.description === null) {
            inputDataInnerVal.description = input.data.description;
          } else {
            if (typeof input.data.description === "string") {
              inputDataInnerVal.description = input.data.description;
            } else {
              $fallback(
                "/data/description",
                "/properties/data/optionalProperties/description/type",
                "Expected string at /data/description",
              );
            }
          }
        }
        if (typeof input.data.content === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.content === "string") {
            inputDataInnerVal.content = input.data.content;
          } else {
            $fallback(
              "/data/content",
              "/properties/data/optionalProperties/content/type",
              "Expected string at /data/content",
            );
          }
        }
        if (typeof input.data.tags === "undefined") {
          // ignore undefined
        } else {
          if (Array.isArray(input.data.tags)) {
            const inputDataInnerValTagsInnerResult = [];
            for (const item of input.data.tags) {
              let inputDataInnerValTagsInnerResultItem;
              if (typeof item === "string") {
                inputDataInnerValTagsInnerResultItem = item;
              } else {
                $fallback(
                  "/data/tags/[0]",
                  "/properties/data/optionalProperties/tags/elements/type",
                  "Expected string at /data/tags/[0]",
                );
              }
              inputDataInnerValTagsInnerResult.push(
                inputDataInnerValTagsInnerResultItem,
              );
            }
            inputDataInnerVal.tags = inputDataInnerValTagsInnerResult;
          } else {
            $fallback(
              "/data/tags",
              "/properties/data/optionalProperties/tags",
              "Expected Array",
            );
          }
        }
        inputInnerVal.data = inputDataInnerVal;
      } else {
        $fallback("/data", "/properties/data", "Expected object");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: UpdatePostParams): string {
    let json = "";
    json += "{";
    json += `"postId":"${input.postId.replace(/[\n]/g, "\\n")}"`;
    json += ',"data":{';
    let dataHasFields = false;
    if (typeof input.data.title !== "undefined") {
      if (dataHasFields) {
        json += `,"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += `"title":"${input.data.title.replace(/[\n]/g, "\\n")}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.description !== "undefined") {
      if (dataHasFields) {
        if (typeof input.data.description === "string") {
          json += `,"description":"${input.data.description.replace(
            /[\n]/g,
            "\\n",
          )}"`;
        } else {
          json += ',"description":null';
        }
      } else {
        if (typeof input.data.description === "string") {
          json += `"description":"${input.data.description.replace(
            /[\n]/g,
            "\\n",
          )}"`;
        } else {
          json += '"description":null';
        }
        dataHasFields = true;
      }
    }
    if (typeof input.data.content !== "undefined") {
      if (dataHasFields) {
        json += `,"content":"${input.data.content.replace(/[\n]/g, "\\n")}"`;
      } else {
        json += `"content":"${input.data.content.replace(/[\n]/g, "\\n")}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.tags !== "undefined") {
      if (dataHasFields) {
        json += ',"tags":[';
        for (let i = 0; i < input.data.tags.length; i++) {
          const inputDataTagsItem = input.data.tags[i];
          if (i !== 0) {
            json += ",";
          }
          json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
        }
        json += "]";
      } else {
        json += '"tags":[';
        for (let i = 0; i < input.data.tags.length; i++) {
          const inputDataTagsItem = input.data.tags[i];
          if (i !== 0) {
            json += ",";
          }
          json += `"${inputDataTagsItem.replace(/[\n]/g, "\\n")}"`;
        }
        json += "]";
        dataHasFields = true;
      }
    }
    json += "}";
    json += "}";
    return json;
  },
};
export interface UpdatePostParamsData {
  title?: string;
  description?: string | null;
  content?: string;
  tags?: Array<string>;
}

export interface AnnotationId {
  id: string;
  version: string;
}
const $$AnnotationId = {
  parse(input: Record<any, any>): AnnotationId {
    class $ValidationErrorannotationId extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorannotationId({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.id === "string") {
        inputInnerVal.id = input.id;
      } else {
        $fallback("/id", "/properties/id/type", "Expected string at /id");
      }
      if (typeof input.version === "string") {
        inputInnerVal.version = input.version;
      } else {
        $fallback(
          "/version",
          "/properties/version/type",
          "Expected string at /version",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: AnnotationId): string {
    let json = "";
    json += "{";
    json += `"id":"${input.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"version":"${input.version.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    return json;
  },
};

export interface Annotation {
  annotation_id: AnnotationId;
  associated_id: AssociatedId;
  annotation_type: AnnotationAnnotationType;
  annotation_type_version: number;
  metadata: any;
  box_type_range: AnnotationBoxTypeRange;
}
const $$Annotation = {
  parse(input: Record<any, any>): Annotation {
    class $ValidationErrorannotation extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorannotation({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (
        typeof input.annotation_id === "object" &&
        input.annotation_id !== null
      ) {
        const inputAnnotationIdInnerVal = {};
        if (typeof input.annotation_id.id === "string") {
          inputAnnotationIdInnerVal.id = input.annotation_id.id;
        } else {
          $fallback(
            "/annotation_id/id",
            "/properties/annotation_id/properties/id/type",
            "Expected string at /annotation_id/id",
          );
        }
        if (typeof input.annotation_id.version === "string") {
          inputAnnotationIdInnerVal.version = input.annotation_id.version;
        } else {
          $fallback(
            "/annotation_id/version",
            "/properties/annotation_id/properties/version/type",
            "Expected string at /annotation_id/version",
          );
        }
        inputInnerVal.annotation_id = inputAnnotationIdInnerVal;
      } else {
        $fallback(
          "/annotation_id",
          "/properties/annotation_id",
          "Expected object",
        );
      }
      if (
        typeof input.associated_id === "object" &&
        input.associated_id !== null
      ) {
        const inputAssociatedIdInnerVal = {};
        if (typeof input.associated_id.entity_type === "string") {
          if (
            input.associated_id.entity_type === "MOVIE_ID" ||
            input.associated_id.entity_type === "SHOW_ID"
          ) {
            inputAssociatedIdInnerVal.entity_type =
              input.associated_id.entity_type;
          } else {
            $fallback(
              "/associated_id/entity_type",
              "/properties/associated_id/properties/entity_type",
              "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
            );
          }
        } else {
          $fallback(
            "/associated_id/entity_type",
            "/properties/associated_id/properties/entity_type",
            "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
          );
        }
        if (typeof input.associated_id.id === "string") {
          inputAssociatedIdInnerVal.id = input.associated_id.id;
        } else {
          $fallback(
            "/associated_id/id",
            "/properties/associated_id/properties/id/type",
            "Expected string at /associated_id/id",
          );
        }
        inputInnerVal.associated_id = inputAssociatedIdInnerVal;
      } else {
        $fallback(
          "/associated_id",
          "/properties/associated_id",
          "Expected object",
        );
      }
      if (typeof input.annotation_type === "string") {
        if (input.annotation_type === "ANNOTATION_BOUNDINGBOX") {
          inputInnerVal.annotation_type = input.annotation_type;
        } else {
          $fallback(
            "/annotation_type",
            "/properties/annotation_type",
            "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
          );
        }
      } else {
        $fallback(
          "/annotation_type",
          "/properties/annotation_type",
          "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
        );
      }
      if (
        typeof input.annotation_type_version === "number" &&
        Number.isInteger(input.annotation_type_version) &&
        input.annotation_type_version >= 0 &&
        input.annotation_type_version <= 65535
      ) {
        inputInnerVal.annotation_type_version = input.annotation_type_version;
      } else {
        $fallback(
          "/annotation_type_version",
          "/properties/annotation_type_version",
          "Expected valid integer between 0 and 65535",
        );
      }
      input.metadata;
      if (
        typeof input.box_type_range === "object" &&
        input.box_type_range !== null
      ) {
        const inputBoxTypeRangeInnerVal = {};
        input.box_type_range.start_time_in_nano_sec;
        input.box_type_range.end_time_in_nano_sec;
        inputInnerVal.box_type_range = inputBoxTypeRangeInnerVal;
      } else {
        $fallback(
          "/box_type_range",
          "/properties/box_type_range",
          "Expected object",
        );
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: Annotation): string {
    let json = "";
    json += "{";
    json += '"annotation_id":{';
    json += `"id":"${input.annotation_id.id.replace(/[\n]/g, "\\n")}"`;
    json += `,"version":"${input.annotation_id.version.replace(
      /[\n]/g,
      "\\n",
    )}"`;
    json += "}";
    json += ',"associated_id":{';
    json += `"entity_type":"${input.associated_id.entity_type}"`;
    json += `,"id":"${input.associated_id.id.replace(/[\n]/g, "\\n")}"`;
    json += "}";
    json += `,"annotation_type":"${input.annotation_type}"`;
    json += `,"annotation_type_version":${input.annotation_type_version}`;
    json += ',"metadata":' + JSON.stringify(input.metadata);
    json += ',"box_type_range":{';
    json += `"start_time_in_nano_sec":"${input.box_type_range.start_time_in_nano_sec.toString()}"`;
    json += `,"end_time_in_nano_sec":"${input.box_type_range.end_time_in_nano_sec.toString()}"`;
    json += "}";
    json += "}";
    return json;
  },
};
export interface AssociatedId {
  entity_type: AnnotationAssociatedIdEntityType;
  id: string;
}

export type AnnotationAssociatedIdEntityType = "MOVIE_ID" | "SHOW_ID";
export type AnnotationAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface AnnotationBoxTypeRange {
  start_time_in_nano_sec: bigint;
  end_time_in_nano_sec: bigint;
}

export interface UpdateAnnotationParams {
  annotation_id: string;
  annotation_id_version: string;
  data: UpdateAnnotationData;
}
const $$UpdateAnnotationParams = {
  parse(input: Record<any, any>): UpdateAnnotationParams {
    class $ValidationErrorupdateAnnotationParams extends Error {
      errors;
      constructor(input) {
        super(input.message);
        this.errors = input.errors;
      }
    }

    function $fallback(instancePath, schemaPath, message) {
      throw new $ValidationErrorupdateAnnotationParams({
        message: message,
        errors: [
          {
            instancePath: instancePath,
            schemaPath: schemaPath,
            message: message,
          },
        ],
      });
    }

    let result = {};
    if (typeof input === "object" && input !== null) {
      const inputInnerVal = {};
      if (typeof input.annotation_id === "string") {
        inputInnerVal.annotation_id = input.annotation_id;
      } else {
        $fallback(
          "/annotation_id",
          "/properties/annotation_id/type",
          "Expected string at /annotation_id",
        );
      }
      if (typeof input.annotation_id_version === "string") {
        inputInnerVal.annotation_id_version = input.annotation_id_version;
      } else {
        $fallback(
          "/annotation_id_version",
          "/properties/annotation_id_version/type",
          "Expected string at /annotation_id_version",
        );
      }
      if (typeof input.data === "object" && input.data !== null) {
        const inputDataInnerVal = {};
        if (typeof input.data.associated_id === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.associated_id === "object" &&
            input.data.associated_id !== null
          ) {
            const inputDataAssociatedIdInnerVal = {};
            if (typeof input.data.associated_id.entity_type === "string") {
              if (
                input.data.associated_id.entity_type === "MOVIE_ID" ||
                input.data.associated_id.entity_type === "SHOW_ID"
              ) {
                inputDataAssociatedIdInnerVal.entity_type =
                  input.data.associated_id.entity_type;
              } else {
                $fallback(
                  "/data/associated_id/entity_type",
                  "/properties/data/optionalProperties/associated_id/properties/entity_type",
                  "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                );
              }
            } else {
              $fallback(
                "/data/associated_id/entity_type",
                "/properties/data/optionalProperties/associated_id/properties/entity_type",
                "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
              );
            }
            if (typeof input.data.associated_id.id === "string") {
              inputDataAssociatedIdInnerVal.id = input.data.associated_id.id;
            } else {
              $fallback(
                "/data/associated_id/id",
                "/properties/data/optionalProperties/associated_id/properties/id/type",
                "Expected string at /data/associated_id/id",
              );
            }
            inputDataInnerVal.associated_id = inputDataAssociatedIdInnerVal;
          } else {
            $fallback(
              "/data/associated_id",
              "/properties/data/optionalProperties/associated_id",
              "Expected object",
            );
          }
        }
        if (typeof input.data.annotation_type === "undefined") {
          // ignore undefined
        } else {
          if (typeof input.data.annotation_type === "string") {
            if (input.data.annotation_type === "ANNOTATION_BOUNDINGBOX") {
              inputDataInnerVal.annotation_type = input.data.annotation_type;
            } else {
              $fallback(
                "/data/annotation_type",
                "/properties/data/optionalProperties/annotation_type",
                "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
              );
            }
          } else {
            $fallback(
              "/data/annotation_type",
              "/properties/data/optionalProperties/annotation_type",
              "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
            );
          }
        }
        if (typeof input.data.annotation_type_version === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.annotation_type_version === "number" &&
            Number.isInteger(input.data.annotation_type_version) &&
            input.data.annotation_type_version >= 0 &&
            input.data.annotation_type_version <= 65535
          ) {
            inputDataInnerVal.annotation_type_version =
              input.data.annotation_type_version;
          } else {
            $fallback(
              "/data/annotation_type_version",
              "/properties/data/optionalProperties/annotation_type_version",
              "Expected valid integer between 0 and 65535",
            );
          }
        }
        if (typeof input.data.metadata === "undefined") {
          // ignore undefined
        } else {
          input.data.metadata;
        }
        if (typeof input.data.box_type_range === "undefined") {
          // ignore undefined
        } else {
          if (
            typeof input.data.box_type_range === "object" &&
            input.data.box_type_range !== null
          ) {
            const inputDataBoxTypeRangeInnerVal = {};
            input.data.box_type_range.start_time_in_nano_sec;
            input.data.box_type_range.end_time_in_nano_sec;
            inputDataInnerVal.box_type_range = inputDataBoxTypeRangeInnerVal;
          } else {
            $fallback(
              "/data/box_type_range",
              "/properties/data/optionalProperties/box_type_range",
              "Expected object",
            );
          }
        }
        inputInnerVal.data = inputDataInnerVal;
      } else {
        $fallback("/data", "/properties/data", "Expected object");
      }
      result = inputInnerVal;
    } else {
      $fallback("", "", "Expected object");
    }
    return result;
  },
  serialize(input: UpdateAnnotationParams): string {
    let json = "";
    json += "{";
    json += `"annotation_id":"${input.annotation_id.replace(/[\n]/g, "\\n")}"`;
    json += `,"annotation_id_version":"${input.annotation_id_version.replace(
      /[\n]/g,
      "\\n",
    )}"`;
    json += ',"data":{';
    let dataHasFields = false;
    if (typeof input.data.associated_id !== "undefined") {
      if (dataHasFields) {
        json += ',"associated_id":{';
        json += `"entity_type":"${input.data.associated_id.entity_type}"`;
        json += `,"id":"${input.data.associated_id.id.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
      } else {
        json += '"associated_id":{';
        json += `"entity_type":"${input.data.associated_id.entity_type}"`;
        json += `,"id":"${input.data.associated_id.id.replace(
          /[\n]/g,
          "\\n",
        )}"`;
        json += "}";
        dataHasFields = true;
      }
    }
    if (typeof input.data.annotation_type !== "undefined") {
      if (dataHasFields) {
        json += `,"annotation_type":"${input.data.annotation_type}"`;
      } else {
        json += `"annotation_type":"${input.data.annotation_type}"`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.annotation_type_version !== "undefined") {
      if (dataHasFields) {
        json += `,"annotation_type_version":${input.data.annotation_type_version}`;
      } else {
        json += `"annotation_type_version":${input.data.annotation_type_version}`;
        dataHasFields = true;
      }
    }
    if (typeof input.data.metadata !== "undefined") {
      if (dataHasFields) {
        json += ',"metadata":' + JSON.stringify(input.data.metadata);
      } else {
        json += '"metadata":' + JSON.stringify(input.data.metadata);
        dataHasFields = true;
      }
    }
    if (typeof input.data.box_type_range !== "undefined") {
      if (dataHasFields) {
        json += ',"box_type_range":{';
        json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
        json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
        json += "}";
      } else {
        json += '"box_type_range":{';
        json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
        json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
        json += "}";
        dataHasFields = true;
      }
    }
    json += "}";
    json += "}";
    return json;
  },
};
export interface UpdateAnnotationData {
  associated_id?: AssociatedId;
  annotation_type?: UpdateAnnotationParamsDataAnnotationType;
  annotation_type_version?: number;
  metadata?: any;
  box_type_range?: UpdateAnnotationParamsDataBoxTypeRange;
}

export type UpdateAnnotationParamsDataAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface UpdateAnnotationParamsDataBoxTypeRange {
  start_time_in_nano_sec: bigint;
  end_time_in_nano_sec: bigint;
}
