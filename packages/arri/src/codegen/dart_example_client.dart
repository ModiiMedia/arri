// this file was autogenerated by arri
import 'dart:convert';
import 'package:arri_client/arri_client.dart';

class Client {
  final String _baseUrl;
  final Map<String, String> _headers;
  const Client({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<GetStatusResponse> getStatus() {
    return parsedArriRequest(
      "$_baseUrl/status",
      method: HttpMethod.get,
      headers: _headers,
      params: null,
      parser: (body) => GetStatusResponse.fromJson(
        json.decode(body),
      ),
    );
  }

  ClientUsersService get users {
    return ClientUsersService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }
}

class ClientUsersService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const ClientUsersService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<User> getUser(UserParams params) {
    return parsedArriRequest(
      "$_baseUrl/users/get-user",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => User.fromJson(
        json.decode(body),
      ),
    );
  }

  Future<User> updateUser(UpdateUserParams params) {
    return parsedArriRequest(
      "$_baseUrl/users/update-user",
      method: HttpMethod.post,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => User.fromJson(
        json.decode(body),
      ),
    );
  }
}

class GetStatusResponse {
  final String message;
  const GetStatusResponse({
    required this.message,
  });

  factory GetStatusResponse.fromJson(Map<String, dynamic> json) {
    return GetStatusResponse(
      message: json["message"],
    );
  }

  static List<GetStatusResponse> fromJsonList(List<dynamic> json) {
    return json.map((item) => GetStatusResponse.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "message": message,
    };
    return result;
  }
}

class User {
  final String id;
  final UserRole role;
  final UserPhoto? photo;
  final DateTime createdAt;
  final int numFollowers;
  final UserSettings settings;
  final List<UserRecentNotificationsItem> recentNotifications;
  final String? bio;
  const User({
    required this.id,
    required this.role,
    required this.photo,
    required this.createdAt,
    required this.numFollowers,
    required this.settings,
    required this.recentNotifications,
    this.bio,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: typeFromDynamic<String>(json["id"], ""),
      role: UserRole.fromJson(json["role"]),
      photo: json["photo"] is Map<String, dynamic>
          ? UserPhoto.fromJson(json['photo'])
          : null,
      createdAt:
          dateTimeFromDynamic(json, DateTime.fromMicrosecondsSinceEpoch(0)),
      numFollowers: intFromDynamic(json["numFollowers"], 0),
      settings: UserSettings.fromJson(json["settings"]),
      recentNotifications:
          UserRecentNotificationsItem.fromJsonList(json["recentNotifications"]),
      bio: nullableTypeFromDynamic(json["bio"]),
    );
  }
  static List<User> fromJsonList(List<dynamic> json) {
    return json.map((item) => User.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
      "role": role.value,
      "photo": photo?.toJson(),
      "createdAt": createdAt.toUtc().toIso8601String(),
      "numFollowers": numFollowers,
      "settings": settings.toJson(),
      "recentNotifications":
          recentNotifications.map((e) => e.toJson()).toList(),
    };
    if (bio != null) {
      result['bio'] = bio;
    }
    return result;
  }
}

enum UserRole implements Comparable<UserRole> {
  standard('standard'),
  admin('admin');

  const UserRole(this.value);
  final String value;

  factory UserRole.fromJson(dynamic json) {
    for (final item in values) {
      if (item.value == json) {
        return item;
      }
    }
    return UserRole.standard;
  }

  static List<UserRole> fromJsonList(List<dynamic> json) {
    return json.map((item) => UserRole.fromJson(item)).toList();
  }

  @override
  compareTo(UserRole other) {
    return name.compareTo(other.name);
  }
}

class UserPhoto {
  final String url;
  final double width;
  final double height;
  const UserPhoto({
    required this.url,
    required this.width,
    required this.height,
  });
  factory UserPhoto.fromJson(Map<String, dynamic> json) {
    return UserPhoto(
      url: typeFromDynamic<String>(json["url"], ""),
      width: doubleFromDynamic(json["width"], 0),
      height: doubleFromDynamic(json["height"], 0),
    );
  }
  static List<UserPhoto> fromJsonList(List<dynamic> json) {
    return json.map((item) => UserPhoto.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "url": url,
      "width": width,
      "height": height,
    };
    return result;
  }
}

class UserSettings {
  final bool notificationsEnabled;
  final UserSettingsPreferredTheme preferredTheme;
  const UserSettings({
    required this.notificationsEnabled,
    required this.preferredTheme,
  });
  factory UserSettings.fromJson(Map<String, dynamic> json) {
    return UserSettings(
      notificationsEnabled:
          typeFromDynamic<bool>(json["notificationsEnabled"], false),
      preferredTheme:
          UserSettingsPreferredTheme.fromJson(json["preferredTheme"]),
    );
  }
  static List<UserSettings> fromJsonList(List<dynamic> json) {
    return json.map((item) => UserSettings.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "notificationsEnabled": notificationsEnabled,
      "preferredTheme": preferredTheme.value,
    };
    return result;
  }
}

enum UserSettingsPreferredTheme
    implements Comparable<UserSettingsPreferredTheme> {
  darkMode('dark-mode'),
  lightMode('light-mode'),
  system("system");

  const UserSettingsPreferredTheme(this.value);
  final String value;

  factory UserSettingsPreferredTheme.fromJson(dynamic json) {
    for (final val in values) {
      if (val.value == json) {
        return val;
      }
    }
    return darkMode;
  }

  static List<UserSettingsPreferredTheme> fromJsonList(List<dynamic> json) {
    return json
        .map((item) => UserSettingsPreferredTheme.fromJson(item))
        .toList();
  }

  @override
  compareTo(UserSettingsPreferredTheme other) => name.compareTo(other.name);
}

sealed class UserRecentNotificationsItem {
  final String notificationType;
  const UserRecentNotificationsItem({
    required this.notificationType,
  });

  factory UserRecentNotificationsItem.fromJson(Map<String, dynamic> json) {
    if (json["notificationType"] is! String) {
      throw Exception(
          "Unable to decode UserRecentNotificationItem. Expected String from \"notificationType\". Received ${json["notificationType"]}}");
    }
    switch (json["notificationType"]) {
      case "POST_LIKE":
        return UserRecentNotificationsItemPostLike.fromJson(json);
      case "POST_COMMENT":
        return UserRecentNotificationsItemPostComment.fromJson(json);
    }
    throw Exception(
        "Unable to decode UserRecentNotificationItem. \"${json["notificationType"]}\" doesn't match any of the accepted discriminator values.");
  }

  static List<UserRecentNotificationsItem> fromJsonList(List<dynamic> json) {
    return json
        .map((item) => UserRecentNotificationsItem.fromJson(item))
        .toList();
  }

  Map<String, dynamic> toJson();
}

class UserRecentNotificationsItemPostLike
    implements UserRecentNotificationsItem {
  @override
  final String notificationType = "POST_LIKE";
  final String postId;
  final String userId;
  const UserRecentNotificationsItemPostLike({
    required this.postId,
    required this.userId,
  });

  factory UserRecentNotificationsItemPostLike.fromJson(
      Map<String, dynamic> json) {
    return UserRecentNotificationsItemPostLike(
      postId: typeFromDynamic<String>(json["postId"], ""),
      userId: typeFromDynamic<String>(json["userId"], ""),
    );
  }

  @override
  Map<String, dynamic> toJson() {
    final result = {
      "notificationType": notificationType,
      "postId": postId,
      "userId": userId,
    };
    return result;
  }

  UserRecentNotificationsItemPostLike copyWith(String? postId, String? userId) {
    return UserRecentNotificationsItemPostLike(
      postId: postId ?? this.postId,
      userId: userId ?? this.userId,
    );
  }
}

class UserRecentNotificationsItemPostComment
    implements UserRecentNotificationsItem {
  @override
  final String notificationType = "POST_COMMENT";
  final String postId;
  final String userId;
  final String commentText;
  UserRecentNotificationsItemPostComment({
    required this.postId,
    required this.userId,
    required this.commentText,
  });

  factory UserRecentNotificationsItemPostComment.fromJson(
      Map<String, dynamic> json) {
    return UserRecentNotificationsItemPostComment(
      postId: typeFromDynamic<String>(json["postId"], ""),
      userId: typeFromDynamic<String>(json["userId"], ""),
      commentText: typeFromDynamic<String>(json["commentText"], ""),
    );
  }

  @override
  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "notificationType": notificationType,
      "postId": postId,
      "userId": userId,
      "commentText": commentText,
    };
    return result;
  }

  UserRecentNotificationsItemPostComment copyWith(
      String? postId, String? userId, String? commentText) {
    return UserRecentNotificationsItemPostComment(
      postId: postId ?? this.postId,
      userId: userId ?? this.userId,
      commentText: commentText ?? this.commentText,
    );
  }
}

class UserParams {
  final String userId;
  const UserParams({
    required this.userId,
  });
  factory UserParams.fromJson(Map<String, dynamic> json) {
    return UserParams(
      userId: typeFromDynamic<String>(json["userId"], ""),
    );
  }
  static List<UserParams> fromJsonList(List<dynamic> json) {
    return json.map((item) => UserParams.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "userId": userId,
    };
    return result;
  }

  UserParams copyWith(String? userId) {
    return UserParams(
      userId: userId ?? this.userId,
    );
  }
}

class UpdateUserParams {
  final String id;
  final String? bio;
  const UpdateUserParams({
    required this.id,
    this.bio,
  });
  factory UpdateUserParams.fromJson(Map<String, dynamic> json) {
    return UpdateUserParams(
      id: typeFromDynamic<String>(json["id"], ""),
      bio: nullableTypeFromDynamic<String>(json["bio"]),
    );
  }
  static List<UpdateUserParams> fromJsonList(List<dynamic> json) {
    return json.map((item) => UpdateUserParams.fromJson(item)).toList();
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
    };
    if (bio != null) {
      result["bio"] = bio;
    }
    return result;
  }

  UpdateUserParams copyWith(String? id, String? bio) {
    return UpdateUserParams(
      id: id ?? this.id,
      bio: bio ?? this.bio,
    );
  }
}
