{
  "version": 3,
  "sources": ["../.arri/server.js", "../.arri/procedures/getStatus.rpc.js", "../.arri/procedures/posts/getPost.rpc.js", "../.arri/models.js", "../.arri/procedures/posts/getPosts.rpc.js", "../.arri/procedures/posts/updatePost.rpc.js", "../.arri/routes.js", "../.arri/app.js", "../.arri/routes/users.js"],
  "sourcesContent": ["import { toNodeListener } from 'h3';\nimport { listen } from 'listhen';\nimport routes from './routes.js';\nimport app from './app.js';\n\nfor (const route of routes) {\n    app.rpc({\n        name: route.id,\n        params: route.route.params,\n        response: route.route.response,\n        handler: route.route.handler,\n        postHandler: route.route.postHandler,\n    });\n}\n\nvoid listen(toNodeListener(app.h3App), {\n    port: process.env.PORT ?? 2020,\n});", "import { defineRpc } from \"arri\";\nimport { a } from \"arri-validate\";\nvar getStatus_rpc_default = defineRpc({\n  method: \"get\",\n  params: void 0,\n  response: a.object({\n    message: a.string()\n  }),\n  handler() {\n    return {\n      message: \"ok\"\n    };\n  }\n});\nexport {\n  getStatus_rpc_default as default\n};\n", "import { defineRpc } from \"arri\";\nimport { a } from \"arri-validate\";\nimport { Post, getRandomPost } from \"../../models\";\nvar getPost_rpc_default = defineRpc({\n  method: \"get\",\n  params: a.object({\n    postId: a.string()\n  }),\n  response: Post,\n  handler({ params }) {\n    return getRandomPost({ id: params.postId });\n  }\n});\nexport {\n  getPost_rpc_default as default\n};\n", "import { faker } from \"@faker-js/faker\";\nimport { a } from \"arri-validate\";\nconst Author = a.object(\n  {\n    id: a.string(),\n    name: a.string(),\n    bio: a.nullable(a.string()),\n    createdAt: a.timestamp(),\n    updatedAt: a.timestamp()\n  },\n  {\n    id: \"Author\"\n  }\n);\nfunction getRandomAuthor(data) {\n  return {\n    id: data?.id ?? faker.string.uuid(),\n    name: data?.name ?? faker.person.fullName(),\n    bio: data?.bio ?? faker.helpers.arrayElement([null, faker.lorem.paragraph()]),\n    createdAt: data?.createdAt ?? faker.date.past(),\n    updatedAt: data?.updatedAt ?? faker.date.recent()\n  };\n}\nconst PostType = a.stringEnum([\"text\", \"image\", \"video\"], {\n  id: \"PostType\"\n});\nconst Post = a.object(\n  {\n    id: a.string(),\n    title: a.string(),\n    type: PostType,\n    description: a.nullable(a.string()),\n    content: a.string(),\n    tags: a.array(a.string()),\n    authorId: a.string(),\n    author: Author,\n    createdAt: a.timestamp(),\n    updatedAt: a.timestamp()\n  },\n  {\n    id: \"Post\"\n  }\n);\nfunction getRandomPost(input) {\n  const authorId = input?.authorId ?? faker.string.uuid();\n  return {\n    id: input?.id ?? faker.string.uuid(),\n    title: input?.title ?? faker.lorem.sentence(7),\n    type: input?.type ?? faker.helpers.arrayElement([\"text\", \"image\", \"video\"]),\n    description: input?.description ?? faker.helpers.arrayElement([null, faker.lorem.paragraph()]),\n    content: input?.content ?? faker.lorem.paragraphs(),\n    tags: input?.tags ?? [\n      faker.lorem.word(),\n      faker.lorem.word(),\n      faker.lorem.word()\n    ],\n    authorId,\n    author: input?.author ?? getRandomAuthor({ id: authorId }),\n    createdAt: input?.createdAt ?? faker.date.past(),\n    updatedAt: input?.updatedAt ?? faker.date.recent()\n  };\n}\nexport {\n  Author,\n  Post,\n  PostType,\n  getRandomAuthor,\n  getRandomPost\n};\n", "import { defineRpc } from \"arri\";\nimport { a } from \"arri-validate\";\nimport { Post, PostType, getRandomPost } from \"../../models\";\nvar getPosts_rpc_default = defineRpc({\n  method: \"get\",\n  params: a.object({\n    limit: a.int8(),\n    type: a.optional(PostType)\n  }),\n  response: a.object({\n    total: a.int32(),\n    items: a.array(Post)\n  }),\n  handler({ params }) {\n    const items = [];\n    for (let i = 0; i < params.limit; i++) {\n      items.push(getRandomPost({ type: params.type }));\n    }\n    return {\n      total: items.length,\n      items\n    };\n  }\n});\nexport {\n  getPosts_rpc_default as default\n};\n", "import { defineRpc } from \"arri\";\nimport { a } from \"arri-validate\";\nimport { Post, getRandomPost } from \"../../models\";\nconst UpdatePostData = a.partial(\n  a.pick(Post, [\"title\", \"description\", \"tags\", \"content\"])\n);\nvar updatePost_rpc_default = defineRpc({\n  params: a.object({\n    postId: a.string(),\n    data: UpdatePostData\n  }),\n  response: Post,\n  handler({ params }) {\n    return getRandomPost({\n      id: params.postId,\n      title: params.data.title,\n      description: params.data.description,\n      tags: params.data.tags,\n      content: params.data.content\n    });\n  }\n});\nexport {\n  updatePost_rpc_default as default\n};\n", "import getStatus from \"./procedures/getStatus.rpc.js\";\nimport postsGetPost from \"./procedures/posts/getPost.rpc.js\";\nimport postsGetPosts from \"./procedures/posts/getPosts.rpc.js\";\nimport postsUpdatePost from \"./procedures/posts/updatePost.rpc.js\";\nconst routes = [\n    { id: \"getStatus\", route: getStatus },\n    { id: \"posts.getPost\", route: postsGetPost },\n    { id: \"posts.getPosts\", route: postsGetPosts },\n    { id: \"posts.updatePost\", route: postsUpdatePost },\n];\nexport default routes;\n", "import { ArriApp, defineError, defineMiddleware } from \"arri\";\nimport usersRouter from \"./routes/users\";\nconst app = new ArriApp({\n  rpcRoutePrefix: \"rpcs\",\n  onRequest(event) {\n  }\n});\napp.use(\n  defineMiddleware(() => {\n    throw defineError(400);\n  })\n);\napp.rpc({\n  name: \"example.helloWorld\",\n  params: void 0,\n  response: void 0,\n  handler({ params }) {\n  }\n});\napp.use(usersRouter);\nvar app_default = app;\nexport {\n  app_default as default\n};\n", "import { ArriRouter } from \"arri\";\nconst router = new ArriRouter();\nrouter.rpc({\n  name: \"users.SayHello\",\n  params: void 0,\n  response: void 0,\n  handler({ params }) {\n  }\n});\nrouter.route({\n  path: \"/users/hello\",\n  method: [\"get\", \"post\"],\n  handler(event) {\n    return `\n        <div>\n            <h1>Hello world!!!</h1>\n        </div>\n        `;\n  }\n});\nrouter.route({\n  path: \"/images/upload\",\n  method: \"post\",\n  async handler(event) {\n  }\n});\nvar users_default = router;\nexport {\n  users_default as default\n};\n"],
  "mappings": "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",
  "names": ["defineRpc", "a", "a", "defineRpc", "a", "defineRpc", "a", "defineRpc", "a", "defineRpc", "a", "a", "defineRpc"]
}
