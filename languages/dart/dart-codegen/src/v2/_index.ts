import { execSync } from "node:child_process";
import fs from "node:fs/promises";

import {
    AppDefinition,
    defineClientGeneratorPlugin,
    isSchemaFormDiscriminator,
    isSchemaFormElements,
    isSchemaFormEnum,
    isSchemaFormProperties,
    isSchemaFormRef,
    isSchemaFormType,
    isSchemaFormValues,
    Schema,
} from "@arrirpc/codegen-utils";
import path from "pathe";

import { CodegenContext, DartProperty } from "./_common";
import { dartAnyFromSchema } from "./any";
import { dartListFromSchema } from "./array";
import { dartSealedClassFromSchema } from "./discriminator";
import { dartEnumFromSchema } from "./enum";
import { dartClassFromSchema } from "./object";
import {
    dartBigIntFromSchema,
    dartBoolFromSchema,
    dartDateTimeFromSchema,
    dartDoubleFromSchema,
    dartIntFromSchema,
    dartStringFromSchema,
} from "./primitives";
import { dartMapFromSchema } from "./record";
import { dartRefFromSchema } from "./ref";

export interface DartClientGeneratorOptions {
    outputFile: string;
    clientName?: string;
    modelPrefix?: string;
    format?: boolean;
}

export const dartClientGenerator = defineClientGeneratorPlugin(
    (options: DartClientGeneratorOptions) => {
        return {
            async generator(def) {
                if (!options.outputFile) {
                    throw new Error(
                        'Missing "outputFile" cannot generate dart code',
                    );
                }
                try {
                    const result = createDartClient(def, options);
                    const destination = path.resolve(options.outputFile);
                    await fs.writeFile(destination, result);
                    if (options.format) {
                        execSync(`dart format ${destination}`, {
                            stdio: "inherit",
                        });
                    }
                } catch (err) {
                    console.error(err);
                }
            },
            options,
        };
    },
);

export function createDartClient(
    def: AppDefinition,
    options: DartClientGeneratorOptions,
) {
    const typeParts: string[] = [];
    const context: CodegenContext = {
        clientName: options.clientName ?? "Client",
        modelPrefix: options.modelPrefix ?? "",
        generatedTypes: [],
        instancePath: "",
        schemaPath: "",
    };

    for (const key of Object.keys(def.definitions)) {
        const subDef = def.definitions[key]!;
        const result = dartTypeFromSchema(subDef, {
            clientName: context.clientName,
            modelPrefix: context.modelPrefix,
            generatedTypes: context.generatedTypes,
            instancePath: `/${key}`,
            schemaPath: `/${key}`,
        });
        if (result.content) {
            typeParts.push(result.content);
        }
    }
    const heading = `// this file was autogenerated by arri
// ignore_for_file: type=lint, unused_field
import 'dart:convert';

import 'package:arri_client/arri_client.dart';`;

    return `${heading}

${typeParts.join("\n\n")}`;
}

export function dartTypeFromSchema(
    schema: Schema,
    context: CodegenContext,
): DartProperty {
    if (isSchemaFormType(schema)) {
        switch (schema.type) {
            case "string":
                return dartStringFromSchema(schema, context);
            case "boolean":
                return dartBoolFromSchema(schema, context);
            case "timestamp":
                return dartDateTimeFromSchema(schema, context);
            case "float32":
            case "float64":
                return dartDoubleFromSchema(schema, context);
            case "int8":
            case "uint8":
            case "int16":
            case "uint16":
            case "int32":
            case "uint32":
                return dartIntFromSchema(schema, context);
            case "int64":
            case "uint64":
                return dartBigIntFromSchema(schema, context);
            default:
                schema.type satisfies never;
                throw new Error(`Unhandled schema.type ${schema.type}`);
        }
    }
    if (isSchemaFormEnum(schema)) {
        return dartEnumFromSchema(schema, context);
    }

    if (isSchemaFormProperties(schema)) {
        return dartClassFromSchema(schema, context);
    }

    if (isSchemaFormElements(schema)) {
        return dartListFromSchema(schema, context);
    }

    if (isSchemaFormValues(schema)) {
        return dartMapFromSchema(schema, context);
    }

    if (isSchemaFormDiscriminator(schema)) {
        return dartSealedClassFromSchema(schema, context);
    }

    if (isSchemaFormRef(schema)) {
        return dartRefFromSchema(schema, context);
    }

    return dartAnyFromSchema(schema, context);
}
