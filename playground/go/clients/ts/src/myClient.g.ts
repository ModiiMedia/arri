// This file was autogenerated by @arrirpc/codegen-ts. Do not modify directly.
// For more information visit https://github.com/modiimedia/arri

/* eslint-disable */
// @ts-nocheck
import {
  ArriEnumValidator,
  ArriModelValidator,
  arriRequest,
  arriSseRequest,
  type EventSourceController,
  INT8_MAX,
  INT8_MIN,
  INT16_MAX,
  INT16_MIN,
  INT32_MAX,
  INT32_MIN,
  INT64_MAX,
  INT64_MIN,
  isObject,
  serializeString,
  type SseOptions,
  UINT8_MAX,
  UINT16_MAX,
  UINT32_MAX,
  UINT64_MAX,
} from "@arrirpc/client";

type HeaderMap = Record<string, string | undefined>;
export class Client {
  private readonly _baseUrl: string;
  private readonly _headers: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);

  constructor(
    options: {
      baseUrl?: string;
      headers?: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);
    } = {},
  ) {
    this._baseUrl = options.baseUrl ?? "";
    this._headers = options.headers ?? {};
  }
  async SayHello(params: GreetingParams): Promise<GreetingResponse> {
    return arriRequest<GreetingResponse, GreetingParams>({
      url: `${this._baseUrl}/procedures/say-hello`,
      method: "get",
      headers: this._headers,
      params: params,
      responseFromJson: $$GreetingResponse.fromJson,
      responseFromString: $$GreetingResponse.fromJsonString,
      serializer: $$GreetingParams.toUrlQueryString,
      clientVersion: "",
    });
  }
  async SayGoodbye(params: GreetingParams): Promise<GreetingResponse> {
    return arriRequest<GreetingResponse, GreetingParams>({
      url: `${this._baseUrl}/procedures/say-goodbye`,
      method: "post",
      headers: this._headers,
      params: params,
      responseFromJson: $$GreetingResponse.fromJson,
      responseFromString: $$GreetingResponse.fromJsonString,
      serializer: $$GreetingParams.toJsonString,
      clientVersion: "",
    });
  }
  WatchUser(
    params: WatchUserParams,
    options: SseOptions<User> = {},
  ): EventSourceController {
    return arriSseRequest<User, WatchUserParams>(
      {
        url: `${this._baseUrl}/procedures/watch-user`,
        method: "get",
        headers: this._headers,
        params: params,
        responseFromJson: $$User.fromJson,
        responseFromString: $$User.fromJsonString,
        serializer: $$WatchUserParams.toUrlQueryString,
        clientVersion: "",
      },
      options,
    );
  }
}

export interface GreetingParams {
  name: string;
}
export const $$GreetingParams: ArriModelValidator<GreetingParams> = {
  new(): GreetingParams {
    return {
      name: "",
    };
  },
  validate(input): input is GreetingParams {
    return isObject(input) && typeof input.name === "string";
  },
  fromJson(input): GreetingParams {
    let _name: string;
    if (typeof input.name === "string") {
      _name = input.name;
    } else {
      _name = "";
    }
    return {
      name: _name,
    };
  },
  fromJsonString(input): GreetingParams {
    return $$GreetingParams.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"name":';
    json += serializeString(input.name);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`name=${input.name}`);
    return queryParts.join("&");
  },
};

export interface GreetingResponse {
  message: string;
}
export const $$GreetingResponse: ArriModelValidator<GreetingResponse> = {
  new(): GreetingResponse {
    return {
      message: "",
    };
  },
  validate(input): input is GreetingResponse {
    return isObject(input) && typeof input.message === "string";
  },
  fromJson(input): GreetingResponse {
    let _message: string;
    if (typeof input.message === "string") {
      _message = input.message;
    } else {
      _message = "";
    }
    return {
      message: _message,
    };
  },
  fromJsonString(input): GreetingResponse {
    return $$GreetingResponse.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"message":';
    json += serializeString(input.message);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`message=${input.message}`);
    return queryParts.join("&");
  },
};

export interface WatchUserParams {
  userId: string;
}
export const $$WatchUserParams: ArriModelValidator<WatchUserParams> = {
  new(): WatchUserParams {
    return {
      userId: "",
    };
  },
  validate(input): input is WatchUserParams {
    return isObject(input) && typeof input.userId === "string";
  },
  fromJson(input): WatchUserParams {
    let _userId: string;
    if (typeof input.userId === "string") {
      _userId = input.userId;
    } else {
      _userId = "";
    }
    return {
      userId: _userId,
    };
  },
  fromJsonString(input): WatchUserParams {
    return $$WatchUserParams.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"userId":';
    json += serializeString(input.userId);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`userId=${input.userId}`);
    return queryParts.join("&");
  },
};

export interface User {
  id: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
}
export const $$User: ArriModelValidator<User> = {
  new(): User {
    return {
      id: "",
      name: "",
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  },
  validate(input): input is User {
    return (
      isObject(input) &&
      typeof input.id === "string" &&
      typeof input.name === "string" &&
      input.createdAt instanceof Date &&
      input.updatedAt instanceof Date
    );
  },
  fromJson(input): User {
    let _id: string;
    if (typeof input.id === "string") {
      _id = input.id;
    } else {
      _id = "";
    }
    let _name: string;
    if (typeof input.name === "string") {
      _name = input.name;
    } else {
      _name = "";
    }
    let _createdAt: Date;
    if (typeof input.createdAt === "string") {
      _createdAt = new Date(input.createdAt);
    } else if (input.createdAt instanceof Date) {
      _createdAt = input.createdAt;
    } else {
      _createdAt = new Date();
    }
    let _updatedAt: Date;
    if (typeof input.updatedAt === "string") {
      _updatedAt = new Date(input.updatedAt);
    } else if (input.updatedAt instanceof Date) {
      _updatedAt = input.updatedAt;
    } else {
      _updatedAt = new Date();
    }
    return {
      id: _id,
      name: _name,
      createdAt: _createdAt,
      updatedAt: _updatedAt,
    };
  },
  fromJsonString(input): User {
    return $$User.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"id":';
    json += serializeString(input.id);
    json += ',"name":';
    json += serializeString(input.name);
    json += ',"createdAt":';
    json += `"${input.createdAt.toISOString()}"`;
    json += ',"updatedAt":';
    json += `"${input.updatedAt.toISOString()}"`;
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`id=${input.id}`);
    queryParts.push(`name=${input.name}`);
    queryParts.push(`createdAt=${input.createdAt.toISOString()}`);
    queryParts.push(`updatedAt=${input.updatedAt.toISOString()}`);
    return queryParts.join("&");
  },
};
