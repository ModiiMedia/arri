// this file was autogenerated by arri
import "dart:convert";
import "package:arri_client/arri_client.dart";

class ExampleClient {
  final String _baseUrl;
  final Map<String, String> _headers;
  const ExampleClient({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  ExampleClientTestService get test {
    return ExampleClientTestService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }

  ExampleClientUsersService get users {
    return ExampleClientUsersService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }
}

class ExampleClientTestService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const ExampleClientTestService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<TestGetTestResponse> getTest() {
    return parsedArriRequest(
      "$_baseUrl/test/get-test",
      method: HttpMethod.get,
      headers: _headers,
      params: null,
      parser: (body) => TestGetTestResponse.fromJson(
        json.decode(body),
      ),
    );
  }
}

class ExampleClientUsersService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const ExampleClientUsersService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<UsersDeleteUserResponse> deleteUser(UsersDeleteUserParams params) {
    return parsedArriRequest(
      "$_baseUrl/users/delete-user",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => UsersDeleteUserResponse.fromJson(
        json.decode(body),
      ),
    );
  }

  Future<UsersGetUserResponse> getUser() {
    return parsedArriRequest(
      "$_baseUrl/users/get-user",
      method: HttpMethod.get,
      headers: _headers,
      params: null,
      parser: (body) => UsersGetUserResponse.fromJson(
        json.decode(body),
      ),
    );
  }

  Future<UsersGetUsersResponse> getUsers(UsersGetUsersParams params) {
    return parsedArriRequest(
      "$_baseUrl/users/get-users",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => UsersGetUsersResponse.fromJson(
        json.decode(body),
      ),
    );
  }

  Future<UsersUpdateUserResponse> updateUser(UsersUpdateUserParams params) {
    return parsedArriRequest(
      "$_baseUrl/users/update-user",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => UsersUpdateUserResponse.fromJson(
        json.decode(body),
      ),
    );
  }
}

class TestGetTestResponse {
  final String message;
  const TestGetTestResponse({
    required this.message,
  });
  factory TestGetTestResponse.fromJson(Map<String, dynamic> json) {
    return TestGetTestResponse(
      message: typeFromDynamic<String>(json["message"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "message": message,
    };

    return result;
  }

  TestGetTestResponse copyWith({
    String? message,
  }) {
    return TestGetTestResponse(
      message: message ?? this.message,
    );
  }
}

class UsersDeleteUserParams {
  final String id;
  const UsersDeleteUserParams({
    required this.id,
  });
  factory UsersDeleteUserParams.fromJson(Map<String, dynamic> json) {
    return UsersDeleteUserParams(
      id: typeFromDynamic<String>(json["id"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
    };

    return result;
  }

  UsersDeleteUserParams copyWith({
    String? id,
  }) {
    return UsersDeleteUserParams(
      id: id ?? this.id,
    );
  }
}

class UsersDeleteUserResponse {
  final String id;
  final String name;
  const UsersDeleteUserResponse({
    required this.id,
    required this.name,
  });
  factory UsersDeleteUserResponse.fromJson(Map<String, dynamic> json) {
    return UsersDeleteUserResponse(
      id: typeFromDynamic<String>(json["id"], ""),
      name: typeFromDynamic<String>(json["name"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
      "name": name,
    };

    return result;
  }

  UsersDeleteUserResponse copyWith({
    String? id,
    String? name,
  }) {
    return UsersDeleteUserResponse(
      id: id ?? this.id,
      name: name ?? this.name,
    );
  }
}

class UsersGetUserResponse {
  final String id;
  final String username;
  final String email;
  final int createdAt;
  const UsersGetUserResponse({
    required this.id,
    required this.username,
    required this.email,
    required this.createdAt,
  });
  factory UsersGetUserResponse.fromJson(Map<String, dynamic> json) {
    return UsersGetUserResponse(
      id: typeFromDynamic<String>(json["id"], ""),
      username: typeFromDynamic<String>(json["username"], ""),
      email: typeFromDynamic<String>(json["email"], ""),
      createdAt: intFromDynamic(json["createdAt"], 0),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
      "username": username,
      "email": email,
      "createdAt": createdAt,
    };

    return result;
  }

  UsersGetUserResponse copyWith({
    String? id,
    String? username,
    String? email,
    int? createdAt,
  }) {
    return UsersGetUserResponse(
      id: id ?? this.id,
      username: username ?? this.username,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
    );
  }
}

class UsersGetUsersParams {
  final double limit;
  final UsersGetUsersParamsType type;
  const UsersGetUsersParams({
    required this.limit,
    required this.type,
  });
  factory UsersGetUsersParams.fromJson(Map<String, dynamic> json) {
    return UsersGetUsersParams(
      limit: doubleFromDynamic(json["limit"], 0),
      type: UsersGetUsersParamsType.fromJson(json["type"]),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "limit": limit,
      "type": type.value,
    };

    return result;
  }

  UsersGetUsersParams copyWith({
    double? limit,
    UsersGetUsersParamsType? type,
  }) {
    return UsersGetUsersParams(
      limit: limit ?? this.limit,
      type: type ?? this.type,
    );
  }
}

enum UsersGetUsersParamsType implements Comparable<UsersGetUsersParamsType> {
  admin("admin"),
  standard("standard"),
  moderator("moderator");

  const UsersGetUsersParamsType(this.value);
  final String value;

  factory UsersGetUsersParamsType.fromJson(dynamic json) {
    for (final v in values) {
      if (v.value == json) {
        return v;
      }
    }
    return admin;
  }

  @override
  compareTo(UsersGetUsersParamsType other) => name.compareTo(other.name);
}

class UsersGetUsersResponse {
  final int total;
  final List<UserSchema> items;
  const UsersGetUsersResponse({
    required this.total,
    required this.items,
  });
  factory UsersGetUsersResponse.fromJson(Map<String, dynamic> json) {
    return UsersGetUsersResponse(
      total: intFromDynamic(json["total"], 0),
      items: json["items"] is List
          ? (json["items"] as List)
              .map((item) => UserSchema.fromJson(item))
              .toList()
          : [],
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "total": total,
      "items": items.map((item) => item.toJson()).toList(),
    };

    return result;
  }

  UsersGetUsersResponse copyWith({
    int? total,
    List<UserSchema>? items,
  }) {
    return UsersGetUsersResponse(
      total: total ?? this.total,
      items: items ?? this.items,
    );
  }
}

class UserSchema {
  final String id;
  final String email;
  final String username;
  const UserSchema({
    required this.id,
    required this.email,
    required this.username,
  });
  factory UserSchema.fromJson(Map<String, dynamic> json) {
    return UserSchema(
      id: typeFromDynamic<String>(json["id"], ""),
      email: typeFromDynamic<String>(json["email"], ""),
      username: typeFromDynamic<String>(json["username"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
      "email": email,
      "username": username,
    };

    return result;
  }

  UserSchema copyWith({
    String? id,
    String? email,
    String? username,
  }) {
    return UserSchema(
      id: id ?? this.id,
      email: email ?? this.email,
      username: username ?? this.username,
    );
  }
}

class UsersUpdateUserParams {
  final String userId;
  const UsersUpdateUserParams({
    required this.userId,
  });
  factory UsersUpdateUserParams.fromJson(Map<String, dynamic> json) {
    return UsersUpdateUserParams(
      userId: typeFromDynamic<String>(json["userId"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "userId": userId,
    };

    return result;
  }

  UsersUpdateUserParams copyWith({
    String? userId,
  }) {
    return UsersUpdateUserParams(
      userId: userId ?? this.userId,
    );
  }
}

class UsersUpdateUserResponse {
  final String id;
  final String username;
  final String email;
  const UsersUpdateUserResponse({
    required this.id,
    required this.username,
    required this.email,
  });
  factory UsersUpdateUserResponse.fromJson(Map<String, dynamic> json) {
    return UsersUpdateUserResponse(
      id: typeFromDynamic<String>(json["id"], ""),
      username: typeFromDynamic<String>(json["username"], ""),
      email: typeFromDynamic<String>(json["email"], ""),
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "id": id,
      "username": username,
      "email": email,
    };

    return result;
  }

  UsersUpdateUserResponse copyWith({
    String? id,
    String? username,
    String? email,
  }) {
    return UsersUpdateUserResponse(
      id: id ?? this.id,
      username: username ?? this.username,
      email: email ?? this.email,
    );
  }
}

class ErrorResponse implements Exception {
  final int statusCode;
  final String statusMessage;
  final List<dynamic> stack;
  final dynamic data;
  const ErrorResponse({
    required this.statusCode,
    required this.statusMessage,
    required this.stack,
    this.data,
  });
  factory ErrorResponse.fromJson(Map<String, dynamic> json) {
    return ErrorResponse(
      statusCode: intFromDynamic(json["statusCode"], 0),
      statusMessage: typeFromDynamic<String>(json["statusMessage"], ""),
      stack: json["stack"] is List
          ? (json["stack"] as List).map((item) => item).toList()
          : [],
      data: json["data"],
    );
  }

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{
      "statusCode": statusCode,
      "statusMessage": statusMessage,
      "stack": stack.map((item) => item).toList(),
    };
    if (data != null) {
      result["data"] = data;
    }
    return result;
  }

  ErrorResponse copyWith({
    int? statusCode,
    String? statusMessage,
    List<dynamic>? stack,
    dynamic data,
  }) {
    return ErrorResponse(
      statusCode: statusCode ?? this.statusCode,
      statusMessage: statusMessage ?? this.statusMessage,
      stack: stack ?? this.stack,
      data: data ?? this.data,
    );
  }
}
