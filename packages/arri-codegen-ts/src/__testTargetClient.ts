// this file was autogenerated by arri-codegen-ts
import { arriRequest } from "arri-client";

interface ClientOptions {
    baseUrl?: string;
    headers?: Record<string, string>;
}

export class Client {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    users: ClientUsersService;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
        this.users = new ClientUsersService(options);
    }

    getStatus() {
        return arriRequest<GetStatusResponse, undefined>({
            url: `${this.baseUrl}/status`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: (input) => $$GetStatusResponse.parse(JSON.parse(input)),
            serializer: (_) => {},
        });
    }
}

export class ClientUsersService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    settings: ClientUsersSettingsService;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
        this.settings = new ClientUsersSettingsService(options);
    }

    getUser(params: UserParams) {
        return arriRequest<User, UserParams>({
            url: `${this.baseUrl}/users/get-user`,
            method: "get",
            headers: this.headers,
            params,
            parser: (input) => $$User.parse(JSON.parse(input)),
            serializer: $$UserParams.serialize,
        });
    }

    updateUser(params: UpdateUserParams) {
        return arriRequest<User, UpdateUserParams>({
            url: `${this.baseUrl}/users/update-user`,
            method: "post",
            headers: this.headers,
            params,
            parser: (input) => $$User.parse(JSON.parse(input)),
            serializer: $$UpdateUserParams.serialize,
        });
    }
}

export class ClientUsersSettingsService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: ClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
    }

    getUserSettings() {
        return arriRequest<undefined, undefined>({
            url: `${this.baseUrl}/users/settings/get-user-settings`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: (_) => {},
            serializer: (_) => {},
        });
    }
}

export interface GetStatusResponse {
    message: string;
}
export const $$GetStatusResponse = {
    parse(json: Record<any, any>): GetStatusResponse {
        return {
            message: typeof json.message === "string" ? json.message : "",
        };
    },
    serialize(input: GetStatusResponse) {
        return JSON.stringify(input);
    },
};

export interface User {
    id: string;
    role: UserRole;
    photo: UserPhoto | null;
    createdAt: Date;
    numFollowers: number;
    settings: UserSettings;
    recentNotifications: Array<UserRecentNotificationsItem>;
    bookmarks: UserBookmarks;
    bio?: string;
}
const $$User = {
    parse(json: Record<any, any>): User {
        return {
            id: typeof json.id === "string" ? json.id : "",
            role:
                typeof json.role === "string" ? (json.role as any) : "standard",
            photo:
                typeof json.photo === "object" && json.photo !== null
                    ? $$UserPhoto.parse(json.photo)
                    : null,
            createdAt:
                typeof json.createdAt === "string"
                    ? new Date(json.createdAt)
                    : new Date(),
            numFollowers:
                typeof json.numFollowers === "number" ? json.numFollowers : 0,
            settings: $$UserSettings.parse(json.settings),
            recentNotifications: Array.isArray(json.recentNotifications)
                ? json.recentNotifications.map((item) =>
                      $$UserRecentNotificationsItem.parse(item),
                  )
                : [],
            bookmarks:
                typeof json.bookmarks === "object" && json.bookmarks !== null
                    ? $$UserBookmarks.parse(json.bookmarks)
                    : {},
            bio: typeof json.bio === "string" ? json.bio : undefined,
        };
    },
};

export type UserRole = "standard" | "admin";

export interface UserPhoto {
    url: string;
    width: number;
    height: number;
}
export const $$UserPhoto = {
    parse(json: Record<any, any>): UserPhoto {
        return {
            url: typeof json.url === "string" ? json.url : "",
            width: typeof json.width === "number" ? json.width : 0,
            height: typeof json.height === "number" ? json.height : 0,
        };
    },
    serialize(input: UserPhoto) {
        return JSON.stringify(input);
    },
};

export interface UserSettings {
    notificationsEnabled: boolean;
    preferredTheme: UserSettingsPreferredTheme;
}
export const $$UserSettings = {
    parse(json: any): UserSettings {
        return {
            notificationsEnabled:
                typeof json.notificationsEnabled === "boolean"
                    ? json.notificationsEnabled
                    : false,
            preferredTheme:
                typeof json.preferredTheme === "string"
                    ? json.preferredTheme
                    : "dark-mode",
        };
    },
};

export type UserSettingsPreferredTheme = "dark-mode" | "light-mode" | "system";
export const $$UserSettingsPreferredTheme = {
    parse(input: any): UserSettingsPreferredTheme {
        if (typeof input !== "string") {
            throw new Error(
                "Invalid input for UserSettingsPreferredTheme. Expected string.",
            );
        }
        const vals = ["dark-mode", "light-mode", "system"];
        if (!vals.includes(input)) {
            throw new Error(
                `Invalid input for UserSettingsPreferredTheme. Expected one of the following [dark-mode, light-mode, system]. Got ${input}`,
            );
        }
        return input as UserSettingsPreferredTheme;
    },
    serialize(input: UserSettingsPreferredTheme): string {
        return `${input}`;
    },
};
export type UserRecentNotificationsItem =
    | UserRecentNotificationsItemPostLike
    | UserRecentNotificationsItemPostComment;
export const $$UserRecentNotificationsItem = {
    parse(input: Record<any, any>): UserRecentNotificationsItem {
        switch (input.notificationType) {
            case "POST_LIKE":
                return $$UserRecentNotificationsItemPostList.parse(input);
            case "POST_COMMENT":
            default:
                break;
        }
        throw new Error("Failed to parse input");
    },
    serialize(input: UserRecentNotificationsItem) {
        return JSON.stringify(input);
    },
};
export interface UserRecentNotificationsItemPostLike {
    notificationType: "POST_LIKE";
    postId: string;
    userId: string;
}
export const $$UserRecentNotificationsItemPostList = {
    parse(input: Record<any, any>): UserRecentNotificationsItemPostLike {
        return {
            notificationType: "POST_LIKE",
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
        };
    },
    serialize(input: UserRecentNotificationsItemPostLike) {
        return JSON.stringify(input);
    },
};

export interface UserRecentNotificationsItemPostComment {
    notificationType: "POST_COMMENT";
    postId: string;
    userId: string;
    commentText: string;
}
export const $$UserRecentNotificationsItemPostComment = {
    parse(input: Record<any, any>): UserRecentNotificationsItemPostComment {
        return {
            notificationType: "POST_COMMENT",
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
            commentText:
                typeof input.commentText === "string" ? input.commentText : "",
        };
    },
    serialize(input: UserRecentNotificationsItemPostComment) {
        return JSON.stringify(input);
    },
};

export type UserBookmarks = Record<string, UserBookmarksValue>;
export const $$UserBookmarks = {
    parse(input: Record<any, any>): UserBookmarks {
        const result: UserBookmarks = {};
        Object.keys(input).forEach((key) => {
            result[key] = $$UserBookmarksValue.parse(input[key]);
        });
        return result;
    },
    serialize(input: UserBookmarks) {
        return JSON.stringify(input);
    },
};

export interface UserBookmarksValue {
    postId: string;
    userId: string;
}
export const $$UserBookmarksValue = {
    parse(input: Record<any, any>): UserBookmarksValue {
        return {
            postId: typeof input.postId === "string" ? input.postId : "",
            userId: typeof input.userId === "string" ? input.userId : "",
        };
    },
    serialize(input: UserBookmarksValue) {
        return JSON.stringify(input);
    },
};

export interface UserParams {
    userId: string;
}
export const $$UserParams = {
    parse(input: string): UserParams {
        const json = JSON.parse(input);
        return {
            userId: typeof json.userId === "string" ? json.userId : "",
        };
    },
    serialize(input: UserParams) {
        return JSON.stringify(input);
    },
};

export interface UpdateUserParams {
    id: string;
    photo: UserPhoto | null;
    bio?: string;
}
export const $$UpdateUserParams = {
    parse(input: Record<any, any>): UpdateUserParams {
        return {
            id: typeof input.id === "string" ? input.id : "",
            photo:
                typeof input.photo === "object" && input.photo !== null
                    ? $$UserPhoto.parse(input.photo)
                    : null,
            bio: typeof input.bio === "string" ? input.bio : undefined,
        };
    },
    serialize(input: UpdateUserParams) {
        return JSON.stringify(input);
    },
};

export interface ClientError {
    statusCode: number;
    statusMessage: string;
    data: any;
    stack: string | null;
}
export const $$ClientError = {
    parse(input: Record<any, any>): ClientError {
        return {
            statusCode:
                typeof input.statusCode === "number" ? input.statusCode : 0,
            statusMessage:
                typeof input.statusMessage === "string"
                    ? input.statusMessage
                    : "",
            data: input.data,
            stack: typeof input.stack === "string" ? input.stack : null,
        };
    },
    serialize(input: ClientError) {
        return JSON.stringify(input);
    },
};
