// This code was autogenerated by arri. Do not modify directly.
import "dart:convert";
import "package:arri_client/arri_client.dart";

class Backend {
  final String baseUrl;
  final Map<String, String> headers;
  const Backend({
    this.baseUrl = "",
    this.headers = const {},
  });
  Backend withHeaders(Map<String, String> headers) {
    return Backend(
      baseUrl: baseUrl,
      headers: headers,
    );
  }
  $BackendV1Service get v1 {
    return $BackendV1Service(
      baseUrl: baseUrl, headers: headers,
    );
  }
  $BackendV2Service get v2 {
    return $BackendV2Service(
      baseUrl: baseUrl, headers: headers,
    );
  }
}
class $BackendV1Service {
  final String baseUrl;
  final Map<String, String> headers;
  const $BackendV1Service({
    this.baseUrl = "",
    this.headers = const {},
  });
  $BackendV1ServiceUsersService get users {
    return $BackendV1ServiceUsersService(
        baseUrl: baseUrl,
        headers: headers,
    );
  }
$BackendV1ServicePostsService get posts {
    return $BackendV1ServicePostsService(
        baseUrl: baseUrl,
        headers: headers,
    );
  }
  
}
class $BackendV1ServiceUsersService {
  final String baseUrl;
  final Map<String, String> headers;
  const $BackendV1ServiceUsersService({
    this.baseUrl = "",
    this.headers = const {},
  });
  
  Future<BackendUser> getUser(BackendUserParams params) {
    return parsedRequest(
      "$baseUrl/v1/users/get-user",
      method: HttpMethod.get,
      headers: headers,
      params: params.toJson(),
      parser: (body) => BackendUser.fromJson(json.decode(body)),
    );
  }
  Future<BackendUsersGetUsersResponse> getUsers(BackendUserListParams params) {
    return parsedRequest(
      "$baseUrl/v1/users/get-users",
      method: HttpMethod.get,
      headers: headers,
      params: params.toJson(),
      parser: (body) => BackendUsersGetUsersResponse.fromJson(json.decode(body)),
    );
  }
}


class $BackendV1ServicePostsService {
  final String baseUrl;
  final Map<String, String> headers;
  const $BackendV1ServicePostsService({
    this.baseUrl = "",
    this.headers = const {},
  });
  
  Future<BackendPost> getPost(BackendPostParams params) {
    return parsedRequest(
      "$baseUrl/v1/posts/get-post",
      method: HttpMethod.get,
      headers: headers,
      params: params.toJson(),
      parser: (body) => BackendPost.fromJson(json.decode(body)),
    );
  }
  Future<BackendPost> updatePost(BackendPostsUpdatePostParams params) {
    return parsedRequest(
      "$baseUrl/v1/posts/update-post",
      method: HttpMethod.post,
      headers: headers,
      params: params.toJson(),
      parser: (body) => BackendPost.fromJson(json.decode(body)),
    );
  }
  Future<String> deletePost(BackendPostParams params) {
    return parsedRequest(
      "$baseUrl/v1/posts/delete-posts",
      method: HttpMethod.delete,
      headers: headers,
      params: params.toJson(),
      parser: (body) => body,
    );
  }
}



class $BackendV2Service {
  final String baseUrl;
  final Map<String, String> headers;
  const $BackendV2Service({
    this.baseUrl = "",
    this.headers = const {},
  });
  $BackendV2ServiceUsersService get users {
    return $BackendV2ServiceUsersService(
        baseUrl: baseUrl,
        headers: headers,
    );
  }
  
}
class $BackendV2ServiceUsersService {
  final String baseUrl;
  final Map<String, String> headers;
  const $BackendV2ServiceUsersService({
    this.baseUrl = "",
    this.headers = const {},
  });
  
  Future<BackendUserV2> getUser(BackendUserParams params) {
    return parsedRequest(
      "$baseUrl/v2/users/get-user",
      method: HttpMethod.get,
      headers: headers,
      params: params.toJson(),
      parser: (body) => BackendUserV2.fromJson(json.decode(body)),
    );
  }
}



class BackendUser {
  final String id;
  final String? email;
  final int createdAt;
  final DateTime updatedAt;
  final BackendUserRole role;
  final BackendUserPreferredTheme? preferredTheme;
  const BackendUser({
    required this.id,
    this.email,
    required this.createdAt,
    required this.updatedAt,
    required this.role,
    this.preferredTheme,
  });
  factory BackendUser.fromJson(Map<String, dynamic> json) {
    return BackendUser(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : null,
      createdAt: json["createdAt"] is int ? json["createdAt"] : 0,
      updatedAt: json["updatedAt"] is String ? DateTime.parse(json["updatedAt"]) : DateTime(0),
      role: BackendUserRole.fromJson(json["role"]),
      preferredTheme: json["preferredTheme"] is Map<String, dynamic> ? 
                BackendUserPreferredTheme.fromJson(json["preferredTheme"]) : null,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
      "createdAt": createdAt,
      "updatedAt": updatedAt.toIso8601String(),
      "role": role.toJson(),
      "preferredTheme": preferredTheme?.toJson(),
    };
  }
  BackendUser copyWith({
    String? id,
    String? email,
    int? createdAt,
    DateTime? updatedAt,
    BackendUserRole? role,
    BackendUserPreferredTheme? preferredTheme,
  }) {
    return BackendUser(
      id: id ?? this.id,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      role: role ?? this.role,
      preferredTheme: preferredTheme ?? this.preferredTheme,
    );
  }
}

enum BackendUserRole implements Comparable<BackendUserRole> {
  standard("standard"),
  admin("admin"),
  num0Point5(0.5),
  num0(0);
  const BackendUserRole(this.value);
  final dynamic value;

  @override
  compareTo(BackendUserRole other) => name.compareTo(other.name);

  factory BackendUserRole.fromJson(dynamic input) {
    for(final val in values) {
      if(val.value == input) {
        return val;
      }
    }
    return standard;
  }

  dynamic toJson() {
    return value;
  }
}
enum BackendUserPreferredTheme implements Comparable<BackendUserPreferredTheme> {
  light("light"),
  dark("dark");
  const BackendUserPreferredTheme(this.value);
  final dynamic value;

  @override
  compareTo(BackendUserPreferredTheme other) => name.compareTo(other.name);

  factory BackendUserPreferredTheme.fromJson(dynamic input) {
    for(final val in values) {
      if(val.value == input) {
        return val;
      }
    }
    return light;
  }

  dynamic toJson() {
    return value;
  }
}
class BackendUserV2 {
  final String id;
  final String email;
  final String username;
  final DateTime createdAt;
  final DateTime updatedAt;
  final BackendUserV2Role role;
  const BackendUserV2({
    required this.id,
    required this.email,
    required this.username,
    required this.createdAt,
    required this.updatedAt,
    required this.role,
  });
  factory BackendUserV2.fromJson(Map<String, dynamic> json) {
    return BackendUserV2(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
      username: json["username"] is String ? json["username"] : "",
      createdAt: json["createdAt"] is String ? DateTime.parse(json["createdAt"]) : DateTime(0),
      updatedAt: json["updatedAt"] is String ? DateTime.parse(json["updatedAt"]) : DateTime(0),
      role: BackendUserV2Role.fromJson(json["role"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
      "username": username,
      "createdAt": createdAt.toIso8601String(),
      "updatedAt": updatedAt.toIso8601String(),
      "role": role.toJson(),
    };
  }
  BackendUserV2 copyWith({
    String? id,
    String? email,
    String? username,
    DateTime? createdAt,
    DateTime? updatedAt,
    BackendUserV2Role? role,
  }) {
    return BackendUserV2(
      id: id ?? this.id,
      email: email ?? this.email,
      username: username ?? this.username,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      role: role ?? this.role,
    );
  }
}

enum BackendUserV2Role implements Comparable<BackendUserV2Role> {
  standard("standard"),
  admin("admin"),
  moderator("moderator");
  const BackendUserV2Role(this.value);
  final dynamic value;

  @override
  compareTo(BackendUserV2Role other) => name.compareTo(other.name);

  factory BackendUserV2Role.fromJson(dynamic input) {
    for(final val in values) {
      if(val.value == input) {
        return val;
      }
    }
    return standard;
  }

  dynamic toJson() {
    return value;
  }
}
class BackendUserParams {
  final String id;
  final String email;
  const BackendUserParams({
    required this.id,
    required this.email,
  });
  factory BackendUserParams.fromJson(Map<String, dynamic> json) {
    return BackendUserParams(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
    };
  }
  BackendUserParams copyWith({
    String? id,
    String? email,
  }) {
    return BackendUserParams(
      id: id ?? this.id,
      email: email ?? this.email,
    );
  }
}


class BackendUserListParams {
  final int limit;
  final int? skip;
  const BackendUserListParams({
    required this.limit,
    this.skip,
  });
  factory BackendUserListParams.fromJson(Map<String, dynamic> json) {
    return BackendUserListParams(
      limit: json["limit"] is int ? json["limit"] : 0,
      skip: json["skip"] is int ? json["skip"] : null,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "limit": limit,
      "skip": skip,
    };
  }
  BackendUserListParams copyWith({
    int? limit,
    int? skip,
  }) {
    return BackendUserListParams(
      limit: limit ?? this.limit,
      skip: skip ?? this.skip,
    );
  }
}


class BackendUsersGetUsersResponse {
  final BackendUsersGetUsersResponseItems items;
  const BackendUsersGetUsersResponse({
    required this.items,
  });
  factory BackendUsersGetUsersResponse.fromJson(Map<String, dynamic> json) {
    return BackendUsersGetUsersResponse(
      items: BackendUsersGetUsersResponseItems.fromJson(json["items"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "items": items.toJson(),
    };
  }
  BackendUsersGetUsersResponse copyWith({
    BackendUsersGetUsersResponseItems? items,
  }) {
    return BackendUsersGetUsersResponse(
      items: items ?? this.items,
    );
  }
}

class BackendUsersGetUsersResponseItems {
  final String id;
  final String email;
  const BackendUsersGetUsersResponseItems({
    required this.id,
    required this.email,
  });
  factory BackendUsersGetUsersResponseItems.fromJson(Map<String, dynamic> json) {
    return BackendUsersGetUsersResponseItems(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
    };
  }
  BackendUsersGetUsersResponseItems copyWith({
    String? id,
    String? email,
  }) {
    return BackendUsersGetUsersResponseItems(
      id: id ?? this.id,
      email: email ?? this.email,
    );
  }
}


class BackendPost {
  final String id;
  final String title;
  final String content;
  const BackendPost({
    required this.id,
    required this.title,
    required this.content,
  });
  factory BackendPost.fromJson(Map<String, dynamic> json) {
    return BackendPost(
      id: json["id"] is String ? json["id"] : "",
      title: json["title"] is String ? json["title"] : "",
      content: json["content"] is String ? json["content"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "title": title,
      "content": content,
    };
  }
  BackendPost copyWith({
    String? id,
    String? title,
    String? content,
  }) {
    return BackendPost(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
    );
  }
}


class BackendPostParams {
  final String postId;
  const BackendPostParams({
    required this.postId,
  });
  factory BackendPostParams.fromJson(Map<String, dynamic> json) {
    return BackendPostParams(
      postId: json["postId"] is String ? json["postId"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "postId": postId,
    };
  }
  BackendPostParams copyWith({
    String? postId,
  }) {
    return BackendPostParams(
      postId: postId ?? this.postId,
    );
  }
}


class BackendPostsUpdatePostParams {
  final String postId;
  final BackendPostsUpdatePostParamsData data;
  const BackendPostsUpdatePostParams({
    required this.postId,
    required this.data,
  });
  factory BackendPostsUpdatePostParams.fromJson(Map<String, dynamic> json) {
    return BackendPostsUpdatePostParams(
      postId: json["postId"] is String ? json["postId"] : "",
      data: BackendPostsUpdatePostParamsData.fromJson(json["data"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "postId": postId,
      "data": data.toJson(),
    };
  }
  BackendPostsUpdatePostParams copyWith({
    String? postId,
    BackendPostsUpdatePostParamsData? data,
  }) {
    return BackendPostsUpdatePostParams(
      postId: postId ?? this.postId,
      data: data ?? this.data,
    );
  }
}

class BackendPostsUpdatePostParamsData {
  final String title;
  final String content;
  const BackendPostsUpdatePostParamsData({
    required this.title,
    required this.content,
  });
  factory BackendPostsUpdatePostParamsData.fromJson(Map<String, dynamic> json) {
    return BackendPostsUpdatePostParamsData(
      title: json["title"] is String ? json["title"] : "",
      content: json["content"] is String ? json["content"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "title": title,
      "content": content,
    };
  }
  BackendPostsUpdatePostParamsData copyWith({
    String? title,
    String? content,
  }) {
    return BackendPostsUpdatePostParamsData(
      title: title ?? this.title,
      content: content ?? this.content,
    );
  }
}

