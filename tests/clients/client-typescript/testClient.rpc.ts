/* eslint-disable */
// @ts-nocheck
// this file was autogenerated by arri-codegen-ts
import {
    arriRequest,
    arriSseRequest,
    type SseOptions,
    arriWsRequest,
    type WsOptions,
} from "arri-client";

interface TestClientOptions {
    baseUrl?: string;
    headers?: Record<string, string>;
}

export class TestClient {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    adapters: TestClientAdaptersService;
    miscTests: TestClientMiscTestsService;
    posts: TestClientPostsService;
    videos: TestClientVideosService;

    constructor(options: TestClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "10", ...options.headers };
        this.adapters = new TestClientAdaptersService(options);
        this.miscTests = new TestClientMiscTestsService(options);
        this.posts = new TestClientPostsService(options);
        this.videos = new TestClientVideosService(options);
    }
}

export class TestClientAdaptersService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: TestClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "10", ...options.headers };
    }
    typeboxAdapter(params: AdaptersTypeboxAdapterParams) {
        return arriRequest<
            AdaptersTypeboxAdapterResponse,
            AdaptersTypeboxAdapterParams
        >({
            url: `${this.baseUrl}/rpcs/adapters/typebox-adapter`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$AdaptersTypeboxAdapterResponse.parse,
            serializer: $$AdaptersTypeboxAdapterParams.serialize,
        });
    }
}

export class TestClientMiscTestsService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: TestClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "10", ...options.headers };
    }
    /**
     * This RPC is no longer supported
     * @deprecated
     */
    deprecatedRpc(params: DeprecatedRpcParams) {
        return arriRequest<undefined, DeprecatedRpcParams>({
            url: `${this.baseUrl}/rpcs/misc-tests/deprecated-rpc`,
            method: "post",
            headers: this.headers,
            params,
            parser: (_) => {},
            serializer: $$DeprecatedRpcParams.serialize,
        });
    }
    sendObject(params: ObjectWithEveryType) {
        return arriRequest<ObjectWithEveryType, ObjectWithEveryType>({
            url: `${this.baseUrl}/rpcs/misc-tests/send-object`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$ObjectWithEveryType.parse,
            serializer: $$ObjectWithEveryType.serialize,
        });
    }
    sendObjectWithNullableFields(params: ObjectWithEveryNullableType) {
        return arriRequest<
            ObjectWithEveryNullableType,
            ObjectWithEveryNullableType
        >({
            url: `${this.baseUrl}/rpcs/misc-tests/send-object-with-nullable-fields`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$ObjectWithEveryNullableType.parse,
            serializer: $$ObjectWithEveryNullableType.serialize,
        });
    }
    sendPartialObject(params: ObjectWithEveryOptionalType) {
        return arriRequest<
            ObjectWithEveryOptionalType,
            ObjectWithEveryOptionalType
        >({
            url: `${this.baseUrl}/rpcs/misc-tests/send-partial-object`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$ObjectWithEveryOptionalType.parse,
            serializer: $$ObjectWithEveryOptionalType.serialize,
        });
    }
    streamAutoReconnect(
        params: AutoReconnectParams,
        options: SseOptions<AutoReconnectResponse>,
    ) {
        return arriSseRequest<AutoReconnectResponse, AutoReconnectParams>(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-auto-reconnect`,
                method: "get",
                headers: this.headers,
                params,
                parser: $$AutoReconnectResponse.parse,
                serializer: $$AutoReconnectParams.serialize,
            },
            options,
        );
    }
    streamConnectionErrorTest(
        params: StreamConnectionErrorTestParams,
        options: SseOptions<StreamConnectionErrorTestResponse>,
    ) {
        return arriSseRequest<
            StreamConnectionErrorTestResponse,
            StreamConnectionErrorTestParams
        >(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-connection-error-test`,
                method: "get",
                headers: this.headers,
                params,
                parser: $$StreamConnectionErrorTestResponse.parse,
                serializer: $$StreamConnectionErrorTestParams.serialize,
            },
            options,
        );
    }
    streamLargeObjects(options: SseOptions<StreamLargeObjectsResponse>) {
        return arriSseRequest<StreamLargeObjectsResponse, undefined>(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-large-objects`,
                method: "get",
                headers: this.headers,
                params: undefined,
                parser: $$StreamLargeObjectsResponse.parse,
                serializer: (_) => {},
            },
            options,
        );
    }
    streamMessages(
        params: ChatMessageParams,
        options: SseOptions<ChatMessage>,
    ) {
        return arriSseRequest<ChatMessage, ChatMessageParams>(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-messages`,
                method: "get",
                headers: this.headers,
                params,
                parser: $$ChatMessage.parse,
                serializer: $$ChatMessageParams.serialize,
            },
            options,
        );
    }
    streamTenEventsThenEnd(options: SseOptions<ChatMessage>) {
        return arriSseRequest<ChatMessage, undefined>(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-ten-events-then-end`,
                method: "get",
                headers: this.headers,
                params: undefined,
                parser: $$ChatMessage.parse,
                serializer: (_) => {},
            },
            options,
        );
    }
    streamTenEventsThenError(options: SseOptions<ChatMessage>) {
        return arriSseRequest<ChatMessage, undefined>(
            {
                url: `${this.baseUrl}/rpcs/misc-tests/stream-ten-events-then-error`,
                method: "post",
                headers: this.headers,
                params: undefined,
                parser: $$ChatMessage.parse,
                serializer: (_) => {},
            },
            options,
        );
    }
    websocketRpc(options: WsOptions<WsMessageResponse> = {}) {
        return arriWsRequest<WsMessageParams, WsMessageResponse>({
            url: `${this.baseUrl}/rpcs/misc-tests/websocket-rpc`,
            headers: this.headers,
            parser: $$WsMessageResponse.parse,
            serializer: $$WsMessageParams.serialize,
            onOpen: options.onOpen,
            onClose: options.onClose,
            onError: options.onError,
            onConnectionError: options.onConnectionError,
            onMessage: options.onMessage,
        });
    }
}

export class TestClientPostsService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: TestClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "10", ...options.headers };
    }
    getPost(params: PostParams) {
        return arriRequest<Post, PostParams>({
            url: `${this.baseUrl}/rpcs/posts/get-post`,
            method: "get",
            headers: this.headers,
            params,
            parser: $$Post.parse,
            serializer: $$PostParams.serialize,
        });
    }
    getPosts(params: PostListParams) {
        return arriRequest<PostListResponse, PostListParams>({
            url: `${this.baseUrl}/rpcs/posts/get-posts`,
            method: "get",
            headers: this.headers,
            params,
            parser: $$PostListResponse.parse,
            serializer: $$PostListParams.serialize,
        });
    }
    logEvent(params: PostEvent) {
        return arriRequest<LogPostEventResponse, PostEvent>({
            url: `${this.baseUrl}/rpcs/posts/log-event`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$LogPostEventResponse.parse,
            serializer: $$PostEvent.serialize,
        });
    }
    updatePost(params: UpdatePostParams) {
        return arriRequest<Post, UpdatePostParams>({
            url: `${this.baseUrl}/rpcs/posts/update-post`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$Post.parse,
            serializer: $$UpdatePostParams.serialize,
        });
    }
}

export class TestClientVideosService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: TestClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = { "client-version": "10", ...options.headers };
    }
    getAnnotation(params: AnnotationId) {
        return arriRequest<Annotation, AnnotationId>({
            url: `${this.baseUrl}/rpcs/videos/get-annotation`,
            method: "get",
            headers: this.headers,
            params,
            parser: $$Annotation.parse,
            serializer: $$AnnotationId.serialize,
        });
    }
    updateAnnotation(params: UpdateAnnotationParams) {
        return arriRequest<Annotation, UpdateAnnotationParams>({
            url: `${this.baseUrl}/rpcs/videos/update-annotation`,
            method: "post",
            headers: this.headers,
            params,
            parser: $$Annotation.parse,
            serializer: $$UpdateAnnotationParams.serialize,
        });
    }
}

export interface ManuallyAddedModel {
    hello: string;
}
const $$ManuallyAddedModel = {
    parse(input: Record<any, any>): ManuallyAddedModel {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.hello === "string") {
                    __D1.hello = json.hello;
                } else {
                    $fallback(
                        "/hello",
                        "/properties/hello/type",
                        "Expected string at /hello",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.hello === "string") {
                __D1.hello = input.hello;
            } else {
                $fallback(
                    "/hello",
                    "/properties/hello/type",
                    "Expected string at /hello",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: ManuallyAddedModel): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"hello":`;
        if (input.hello.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.hello.length; i++) {
                __point__ = input.hello.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.hello);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.hello.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.hello}"`;
                } else {
                    json += `"${__result__}${input.hello.slice(__last__)}"`;
                }
            }
        } else if (input.hello.length < 5000 && !STR_ESCAPE.test(input.hello)) {
            json += `"${input.hello}"`;
        } else {
            json += JSON.stringify(input.hello);
        }
        json += "}";
        return json;
    },
};

export interface AdaptersTypeboxAdapterParams {
    string: string;
    boolean: boolean;
    integer: number;
    number: number;
    enumField: AdaptersTypeboxAdapterParamsEnumField;
    object: AdaptersTypeboxAdapterParamsObject;
    array: Array<boolean>;
    optionalString?: string;
}
const $$AdaptersTypeboxAdapterParams = {
    parse(input: Record<any, any>): AdaptersTypeboxAdapterParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.string === "string") {
                    __D1.string = json.string;
                } else {
                    $fallback(
                        "/string",
                        "/properties/string/type",
                        "Expected string at /string",
                    );
                }
                if (typeof json.boolean === "boolean") {
                    __D1.boolean = json.boolean;
                } else {
                    $fallback(
                        "/boolean",
                        "/properties/boolean/type",
                        "Expected boolean for /boolean",
                    );
                }
                if (
                    typeof json.integer === "number" &&
                    Number.isInteger(json.integer) &&
                    json.integer >= -2147483648 &&
                    json.integer <= 2147483647
                ) {
                    __D1.integer = json.integer;
                } else {
                    $fallback(
                        "/integer",
                        "/properties/integer",
                        "Expected valid integer between -2147483648 and 2147483647",
                    );
                }
                if (
                    typeof json.number === "number" &&
                    !Number.isNaN(json.number)
                ) {
                    __D1.number = json.number;
                } else {
                    $fallback(
                        "/number",
                        "/properties/number/type",
                        "Expected number at /number",
                    );
                }
                if (typeof json.enumField === "string") {
                    if (
                        json.enumField === "A" ||
                        json.enumField === "B" ||
                        json.enumField === "C"
                    ) {
                        __D1.enumField = json.enumField;
                    } else {
                        $fallback(
                            "/enumField",
                            "/properties/enumField",
                            "Expected one of the following values: [A, B, C] at /enumField.",
                        );
                    }
                } else {
                    $fallback(
                        "/enumField",
                        "/properties/enumField",
                        "Expected one of the following values: [A, B, C] at /enumField.",
                    );
                }
                if (typeof json.object === "object" && json.object !== null) {
                    const __D2 = {};
                    if (typeof json.object.string === "string") {
                        __D2.string = json.object.string;
                    } else {
                        $fallback(
                            "/object/string",
                            "/properties/object/properties/string/type",
                            "Expected string at /object/string",
                        );
                    }
                    __D1.object = __D2;
                } else {
                    $fallback(
                        "/object",
                        "/properties/object",
                        "Expected object",
                    );
                }
                if (Array.isArray(json.array)) {
                    const __D2 = [];
                    for (const __D2AItem of json.array) {
                        let __D2AItemAResult;
                        if (typeof __D2AItem === "boolean") {
                            __D2AItemAResult = __D2AItem;
                        } else {
                            $fallback(
                                "/array/[0]",
                                "/properties/array/elements/type",
                                "Expected boolean for /array/[0]",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.array = __D2;
                } else {
                    $fallback("/array", "/properties/array", "Expected Array");
                }
                if (typeof json.optionalString === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof json.optionalString === "string") {
                        __D1.optionalString = json.optionalString;
                    } else {
                        $fallback(
                            "/optionalString",
                            "/optionalProperties/optionalString/type",
                            "Expected string at /optionalString",
                        );
                    }
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.string === "string") {
                __D1.string = input.string;
            } else {
                $fallback(
                    "/string",
                    "/properties/string/type",
                    "Expected string at /string",
                );
            }
            if (typeof input.boolean === "boolean") {
                __D1.boolean = input.boolean;
            } else {
                $fallback(
                    "/boolean",
                    "/properties/boolean/type",
                    "Expected boolean for /boolean",
                );
            }
            if (
                typeof input.integer === "number" &&
                Number.isInteger(input.integer) &&
                input.integer >= -2147483648 &&
                input.integer <= 2147483647
            ) {
                __D1.integer = input.integer;
            } else {
                $fallback(
                    "/integer",
                    "/properties/integer",
                    "Expected valid integer between -2147483648 and 2147483647",
                );
            }
            if (
                typeof input.number === "number" &&
                !Number.isNaN(input.number)
            ) {
                __D1.number = input.number;
            } else {
                $fallback(
                    "/number",
                    "/properties/number/type",
                    "Expected number at /number",
                );
            }
            if (typeof input.enumField === "string") {
                if (
                    input.enumField === "A" ||
                    input.enumField === "B" ||
                    input.enumField === "C"
                ) {
                    __D1.enumField = input.enumField;
                } else {
                    $fallback(
                        "/enumField",
                        "/properties/enumField",
                        "Expected one of the following values: [A, B, C] at /enumField.",
                    );
                }
            } else {
                $fallback(
                    "/enumField",
                    "/properties/enumField",
                    "Expected one of the following values: [A, B, C] at /enumField.",
                );
            }
            if (typeof input.object === "object" && input.object !== null) {
                const __D2 = {};
                if (typeof input.object.string === "string") {
                    __D2.string = input.object.string;
                } else {
                    $fallback(
                        "/object/string",
                        "/properties/object/properties/string/type",
                        "Expected string at /object/string",
                    );
                }
                __D1.object = __D2;
            } else {
                $fallback("/object", "/properties/object", "Expected object");
            }
            if (Array.isArray(input.array)) {
                const __D2 = [];
                for (const __D2AItem of input.array) {
                    let __D2AItemAResult;
                    if (typeof __D2AItem === "boolean") {
                        __D2AItemAResult = __D2AItem;
                    } else {
                        $fallback(
                            "/array/[0]",
                            "/properties/array/elements/type",
                            "Expected boolean for /array/[0]",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.array = __D2;
            } else {
                $fallback("/array", "/properties/array", "Expected Array");
            }
            if (typeof input.optionalString === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.optionalString === "string") {
                    __D1.optionalString = input.optionalString;
                } else {
                    $fallback(
                        "/optionalString",
                        "/optionalProperties/optionalString/type",
                        "Expected string at /optionalString",
                    );
                }
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: AdaptersTypeboxAdapterParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"string":`;
        if (input.string.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.string.length; i++) {
                __point__ = input.string.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.string);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.string.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.string}"`;
                } else {
                    json += `"${__result__}${input.string.slice(__last__)}"`;
                }
            }
        } else if (
            input.string.length < 5000 &&
            !STR_ESCAPE.test(input.string)
        ) {
            json += `"${input.string}"`;
        } else {
            json += JSON.stringify(input.string);
        }
        json += `,"boolean":${input.boolean}`;

        if (Number.isNaN(input.integer)) {
            throw new Error("Expected number at /integer got NaN");
        }
        json += `,"integer":${input.integer}`;

        if (Number.isNaN(input.number)) {
            throw new Error("Expected number at /number got NaN");
        }
        json += `,"number":${input.number}`;
        json += `,"enumField":"${input.enumField}"`;
        json += ',"object":{';
        json += `"string":`;
        if (input.object.string.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.object.string.length; i++) {
                __point__ = input.object.string.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.object.string);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.object.string.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.object.string}"`;
                } else {
                    json += `"${__result__}${input.object.string.slice(__last__)}"`;
                }
            }
        } else if (
            input.object.string.length < 5000 &&
            !STR_ESCAPE.test(input.object.string)
        ) {
            json += `"${input.object.string}"`;
        } else {
            json += JSON.stringify(input.object.string);
        }
        json += "}";
        json += ',"array":[';
        for (let i = 0; i < input.array.length; i++) {
            const inputArrayItem = input.array[i];
            if (i !== 0) {
                json += ",";
            }
            json += `${inputArrayItem}`;
        }
        json += "]";
        if (typeof input.optionalString !== "undefined") {
            json += `,"optionalString":`;
            if (input.optionalString.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < input.optionalString.length; i++) {
                    __point__ = input.optionalString.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(input.optionalString);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            input.optionalString.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${input.optionalString}"`;
                    } else {
                        json += `"${__result__}${input.optionalString.slice(__last__)}"`;
                    }
                }
            } else if (
                input.optionalString.length < 5000 &&
                !STR_ESCAPE.test(input.optionalString)
            ) {
                json += `"${input.optionalString}"`;
            } else {
                json += JSON.stringify(input.optionalString);
            }
        }
        json += "}";
        return json;
    },
};
export type AdaptersTypeboxAdapterParamsEnumField = "A" | "B" | "C";
export interface AdaptersTypeboxAdapterParamsObject {
    string: string;
}

export interface AdaptersTypeboxAdapterResponse {
    message: string;
}
const $$AdaptersTypeboxAdapterResponse = {
    parse(input: Record<any, any>): AdaptersTypeboxAdapterResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.message === "string") {
                    __D1.message = json.message;
                } else {
                    $fallback(
                        "/message",
                        "/properties/message/type",
                        "Expected string at /message",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.message === "string") {
                __D1.message = input.message;
            } else {
                $fallback(
                    "/message",
                    "/properties/message/type",
                    "Expected string at /message",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: AdaptersTypeboxAdapterResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"message":`;
        if (input.message.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.message.length; i++) {
                __point__ = input.message.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.message);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.message.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.message}"`;
                } else {
                    json += `"${__result__}${input.message.slice(__last__)}"`;
                }
            }
        } else if (
            input.message.length < 5000 &&
            !STR_ESCAPE.test(input.message)
        ) {
            json += `"${input.message}"`;
        } else {
            json += JSON.stringify(input.message);
        }
        json += "}";
        return json;
    },
};

/**
 * @deprecated
 */
export interface DeprecatedRpcParams {
    /**
     * @deprecated
     */
    deprecatedField: string;
}
const $$DeprecatedRpcParams = {
    parse(input: Record<any, any>): DeprecatedRpcParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.deprecatedField === "string") {
                    __D1.deprecatedField = json.deprecatedField;
                } else {
                    $fallback(
                        "/deprecatedField",
                        "/properties/deprecatedField/type",
                        "Expected string at /deprecatedField",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.deprecatedField === "string") {
                __D1.deprecatedField = input.deprecatedField;
            } else {
                $fallback(
                    "/deprecatedField",
                    "/properties/deprecatedField/type",
                    "Expected string at /deprecatedField",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: DeprecatedRpcParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"deprecatedField":`;
        if (input.deprecatedField.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.deprecatedField.length; i++) {
                __point__ = input.deprecatedField.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.deprecatedField);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.deprecatedField.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.deprecatedField}"`;
                } else {
                    json += `"${__result__}${input.deprecatedField.slice(__last__)}"`;
                }
            }
        } else if (
            input.deprecatedField.length < 5000 &&
            !STR_ESCAPE.test(input.deprecatedField)
        ) {
            json += `"${input.deprecatedField}"`;
        } else {
            json += JSON.stringify(input.deprecatedField);
        }
        json += "}";
        return json;
    },
};

export interface ObjectWithEveryType {
    any: any;
    boolean: boolean;
    string: string;
    timestamp: Date;
    float32: number;
    float64: number;
    int8: number;
    uint8: number;
    int16: number;
    uint16: number;
    int32: number;
    uint32: number;
    int64: bigint;
    uint64: bigint;
    enumerator: ObjectWithEveryTypeEnumerator;
    array: Array<boolean>;
    object: ObjectWithEveryTypeObject;
    record: ObjectWithEveryTypeRecord;
    discriminator: ObjectWithEveryTypeDiscriminator;
    nestedObject: ObjectWithEveryTypeNestedObject;
    nestedArray: Array<Array<ObjectWithEveryTypeNestedArrayItemItem>>;
}
const $$ObjectWithEveryType = {
    parse(input: Record<any, any>): ObjectWithEveryType {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                __D1.any = json.any;
                if (typeof json.boolean === "boolean") {
                    __D1.boolean = json.boolean;
                } else {
                    $fallback(
                        "/boolean",
                        "/properties/boolean/type",
                        "Expected boolean for /boolean",
                    );
                }
                if (typeof json.string === "string") {
                    __D1.string = json.string;
                } else {
                    $fallback(
                        "/string",
                        "/properties/string/type",
                        "Expected string at /string",
                    );
                }
                if (
                    typeof json.timestamp === "object" &&
                    json.timestamp instanceof Date
                ) {
                    __D1.timestamp = json.timestamp;
                } else if (typeof json.timestamp === "string") {
                    __D1.timestamp = new Date(json.timestamp);
                } else {
                    $fallback(
                        "/timestamp",
                        "/properties/timestamp",
                        "Expected instanceof Date or ISO Date string at /timestamp",
                    );
                }
                if (
                    typeof json.float32 === "number" &&
                    !Number.isNaN(json.float32)
                ) {
                    __D1.float32 = json.float32;
                } else {
                    $fallback(
                        "/float32",
                        "/properties/float32/type",
                        "Expected number at /float32",
                    );
                }
                if (
                    typeof json.float64 === "number" &&
                    !Number.isNaN(json.float64)
                ) {
                    __D1.float64 = json.float64;
                } else {
                    $fallback(
                        "/float64",
                        "/properties/float64/type",
                        "Expected number at /float64",
                    );
                }
                if (
                    typeof json.int8 === "number" &&
                    Number.isInteger(json.int8) &&
                    json.int8 >= -128 &&
                    json.int8 <= 127
                ) {
                    __D1.int8 = json.int8;
                } else {
                    $fallback(
                        "/int8",
                        "/properties/int8",
                        "Expected valid integer between -128 and 127",
                    );
                }
                if (
                    typeof json.uint8 === "number" &&
                    Number.isInteger(json.uint8) &&
                    json.uint8 >= 0 &&
                    json.uint8 <= 255
                ) {
                    __D1.uint8 = json.uint8;
                } else {
                    $fallback(
                        "/uint8",
                        "/properties/uint8",
                        "Expected valid integer between 0 and 255",
                    );
                }
                if (
                    typeof json.int16 === "number" &&
                    Number.isInteger(json.int16) &&
                    json.int16 >= -32768 &&
                    json.int16 <= 32767
                ) {
                    __D1.int16 = json.int16;
                } else {
                    $fallback(
                        "/int16",
                        "/properties/int16",
                        "Expected valid integer between -32768 and 32767",
                    );
                }
                if (
                    typeof json.uint16 === "number" &&
                    Number.isInteger(json.uint16) &&
                    json.uint16 >= 0 &&
                    json.uint16 <= 65535
                ) {
                    __D1.uint16 = json.uint16;
                } else {
                    $fallback(
                        "/uint16",
                        "/properties/uint16",
                        "Expected valid integer between 0 and 65535",
                    );
                }
                if (
                    typeof json.int32 === "number" &&
                    Number.isInteger(json.int32) &&
                    json.int32 >= -2147483648 &&
                    json.int32 <= 2147483647
                ) {
                    __D1.int32 = json.int32;
                } else {
                    $fallback(
                        "/int32",
                        "/properties/int32",
                        "Expected valid integer between -2147483648 and 2147483647",
                    );
                }
                if (
                    typeof json.uint32 === "number" &&
                    Number.isInteger(json.uint32) &&
                    json.uint32 >= 0 &&
                    json.uint32 <= 4294967295
                ) {
                    __D1.uint32 = json.uint32;
                } else {
                    $fallback(
                        "/uint32",
                        "/properties/uint32",
                        "Expected valid integer between 0 and 4294967295",
                    );
                }
                if (
                    typeof json.int64 === "string" ||
                    typeof json.int64 === "number"
                ) {
                    try {
                        const val = BigInt(json.int64);
                        __D1.int64 = val;
                    } catch (err) {
                        $fallback(
                            "/int64",
                            "/properties/int64",
                            "Unable to parse BigInt from json.int64.",
                        );
                    }
                } else if (typeof json.int64 === "bigint") {
                    __D1.int64 = json.int64;
                } else {
                    $fallback(
                        "/int64",
                        "/properties/int64",
                        "Expected BigInt or Integer string. Got ${json.int64}",
                    );
                }
                if (
                    typeof json.uint64 === "string" ||
                    typeof json.uint64 === "number"
                ) {
                    try {
                        const val = BigInt(json.uint64);
                        if (val >= BigInt("0")) {
                            __D1.uint64 = val;
                        } else {
                            $fallback(
                                "/uint64",
                                "/properties/uint64",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } catch (err) {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unable to parse BigInt from json.uint64.",
                        );
                    }
                } else if (typeof json.uint64 === "bigint") {
                    if (json.uint64 >= BigInt("0")) {
                        __D1.uint64 = json.uint64;
                    } else {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } else {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Expected BigInt or Integer string. Got ${json.uint64}",
                    );
                }
                if (typeof json.enumerator === "string") {
                    if (
                        json.enumerator === "A" ||
                        json.enumerator === "B" ||
                        json.enumerator === "C"
                    ) {
                        __D1.enumerator = json.enumerator;
                    } else {
                        $fallback(
                            "/enumerator",
                            "/properties/enumerator",
                            "Expected one of the following values: [A, B, C] at /enumerator.",
                        );
                    }
                } else {
                    $fallback(
                        "/enumerator",
                        "/properties/enumerator",
                        "Expected one of the following values: [A, B, C] at /enumerator.",
                    );
                }
                if (Array.isArray(json.array)) {
                    const __D2 = [];
                    for (const __D2AItem of json.array) {
                        let __D2AItemAResult;
                        if (typeof __D2AItem === "boolean") {
                            __D2AItemAResult = __D2AItem;
                        } else {
                            $fallback(
                                "/array/[0]",
                                "/properties/array/elements/type",
                                "Expected boolean for /array/[0]",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.array = __D2;
                } else {
                    $fallback("/array", "/properties/array", "Expected Array");
                }
                if (typeof json.object === "object" && json.object !== null) {
                    const __D2 = {};
                    if (typeof json.object.string === "string") {
                        __D2.string = json.object.string;
                    } else {
                        $fallback(
                            "/object/string",
                            "/properties/object/properties/string/type",
                            "Expected string at /object/string",
                        );
                    }
                    if (typeof json.object.boolean === "boolean") {
                        __D2.boolean = json.object.boolean;
                    } else {
                        $fallback(
                            "/object/boolean",
                            "/properties/object/properties/boolean/type",
                            "Expected boolean for /object/boolean",
                        );
                    }
                    if (
                        typeof json.object.timestamp === "object" &&
                        json.object.timestamp instanceof Date
                    ) {
                        __D2.timestamp = json.object.timestamp;
                    } else if (typeof json.object.timestamp === "string") {
                        __D2.timestamp = new Date(json.object.timestamp);
                    } else {
                        $fallback(
                            "/object/timestamp",
                            "/properties/object/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /object/timestamp",
                        );
                    }
                    __D1.object = __D2;
                } else {
                    $fallback(
                        "/object",
                        "/properties/object",
                        "Expected object",
                    );
                }
                if (typeof json.record === "object" && json.record !== null) {
                    const __D2RResult = {};
                    for (const __D2RKey of Object.keys(json.record)) {
                        let __D2RKeyRVal;
                        if (typeof json.record[__D2RKey] === "boolean") {
                            __D2RKeyRVal = json.record[__D2RKey];
                        } else {
                            $fallback(
                                "/record/[key]",
                                "/properties/record/values/type",
                                "Expected boolean for /record/[key]",
                            );
                        }
                        __D2RResult[__D2RKey] = __D2RKeyRVal;
                    }
                    __D1.record = __D2RResult;
                } else {
                    $fallback(
                        "/record",
                        "/properties/record",
                        "Expected object.",
                    );
                }
                if (
                    typeof json.discriminator === "object" &&
                    json.discriminator !== null
                ) {
                    switch (json.discriminator.type) {
                        case "A": {
                            if (
                                typeof json.discriminator === "object" &&
                                json.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "A";
                                if (
                                    typeof json.discriminator.title === "string"
                                ) {
                                    __D2.title = json.discriminator.title;
                                } else {
                                    $fallback(
                                        "/discriminator/title",
                                        "/properties/discriminator/mapping/properties/title/type",
                                        "Expected string at /discriminator/title",
                                    );
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/properties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        case "B": {
                            if (
                                typeof json.discriminator === "object" &&
                                json.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "B";
                                if (
                                    typeof json.discriminator.title === "string"
                                ) {
                                    __D2.title = json.discriminator.title;
                                } else {
                                    $fallback(
                                        "/discriminator/title",
                                        "/properties/discriminator/mapping/properties/title/type",
                                        "Expected string at /discriminator/title",
                                    );
                                }
                                if (
                                    typeof json.discriminator.description ===
                                    "string"
                                ) {
                                    __D2.description =
                                        json.discriminator.description;
                                } else {
                                    $fallback(
                                        "/discriminator/description",
                                        "/properties/discriminator/mapping/properties/description/type",
                                        "Expected string at /discriminator/description",
                                    );
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/properties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        default:
                            $fallback(
                                "/discriminator",
                                "/properties/discriminator/mapping",
                                "json.discriminator.type did not match one of the specified values",
                            );
                            break;
                    }
                } else {
                    $fallback(
                        "/discriminator",
                        "/properties/discriminator",
                        "Expected Object.",
                    );
                }
                if (
                    typeof json.nestedObject === "object" &&
                    json.nestedObject !== null
                ) {
                    const __D2 = {};
                    if (typeof json.nestedObject.id === "string") {
                        __D2.id = json.nestedObject.id;
                    } else {
                        $fallback(
                            "/nestedObject/id",
                            "/properties/nestedObject/properties/id/type",
                            "Expected string at /nestedObject/id",
                        );
                    }
                    if (
                        typeof json.nestedObject.timestamp === "object" &&
                        json.nestedObject.timestamp instanceof Date
                    ) {
                        __D2.timestamp = json.nestedObject.timestamp;
                    } else if (
                        typeof json.nestedObject.timestamp === "string"
                    ) {
                        __D2.timestamp = new Date(json.nestedObject.timestamp);
                    } else {
                        $fallback(
                            "/nestedObject/timestamp",
                            "/properties/nestedObject/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                        );
                    }
                    if (
                        typeof json.nestedObject.data === "object" &&
                        json.nestedObject.data !== null
                    ) {
                        const __D3 = {};
                        if (typeof json.nestedObject.data.id === "string") {
                            __D3.id = json.nestedObject.data.id;
                        } else {
                            $fallback(
                                "/nestedObject/data/id",
                                "/properties/nestedObject/properties/data/properties/id/type",
                                "Expected string at /nestedObject/data/id",
                            );
                        }
                        if (
                            typeof json.nestedObject.data.timestamp ===
                                "object" &&
                            json.nestedObject.data.timestamp instanceof Date
                        ) {
                            __D3.timestamp = json.nestedObject.data.timestamp;
                        } else if (
                            typeof json.nestedObject.data.timestamp === "string"
                        ) {
                            __D3.timestamp = new Date(
                                json.nestedObject.data.timestamp,
                            );
                        } else {
                            $fallback(
                                "/nestedObject/data/timestamp",
                                "/properties/nestedObject/properties/data/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                            );
                        }
                        if (
                            typeof json.nestedObject.data.data === "object" &&
                            json.nestedObject.data.data !== null
                        ) {
                            const __D4 = {};
                            if (
                                typeof json.nestedObject.data.data.id ===
                                "string"
                            ) {
                                __D4.id = json.nestedObject.data.data.id;
                            } else {
                                $fallback(
                                    "/nestedObject/data/data/id",
                                    "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                                    "Expected string at /nestedObject/data/data/id",
                                );
                            }
                            if (
                                typeof json.nestedObject.data.data.timestamp ===
                                    "object" &&
                                json.nestedObject.data.data.timestamp instanceof
                                    Date
                            ) {
                                __D4.timestamp =
                                    json.nestedObject.data.data.timestamp;
                            } else if (
                                typeof json.nestedObject.data.data.timestamp ===
                                "string"
                            ) {
                                __D4.timestamp = new Date(
                                    json.nestedObject.data.data.timestamp,
                                );
                            } else {
                                $fallback(
                                    "/nestedObject/data/data/timestamp",
                                    "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                                );
                            }
                            __D3.data = __D4;
                        } else {
                            $fallback(
                                "/nestedObject/data/data",
                                "/properties/nestedObject/properties/data/properties/data",
                                "Expected object",
                            );
                        }
                        __D2.data = __D3;
                    } else {
                        $fallback(
                            "/nestedObject/data",
                            "/properties/nestedObject/properties/data",
                            "Expected object",
                        );
                    }
                    __D1.nestedObject = __D2;
                } else {
                    $fallback(
                        "/nestedObject",
                        "/properties/nestedObject",
                        "Expected object",
                    );
                }
                if (Array.isArray(json.nestedArray)) {
                    const __D2 = [];
                    for (const __D2AItem of json.nestedArray) {
                        let __D2AItemAResult;
                        if (Array.isArray(__D2AItem)) {
                            const __D3 = [];
                            for (const __D3AItem of __D2AItem) {
                                let __D3AItemAResult;
                                if (
                                    typeof __D3AItem === "object" &&
                                    __D3AItem !== null
                                ) {
                                    const __D4 = {};
                                    if (typeof __D3AItem.id === "string") {
                                        __D4.id = __D3AItem.id;
                                    } else {
                                        $fallback(
                                            "/nestedArray/[0]/[0]/id",
                                            "/properties/nestedArray/elements/elements/properties/id/type",
                                            "Expected string at /nestedArray/[0]/[0]/id",
                                        );
                                    }
                                    if (
                                        typeof __D3AItem.timestamp ===
                                            "object" &&
                                        __D3AItem.timestamp instanceof Date
                                    ) {
                                        __D4.timestamp = __D3AItem.timestamp;
                                    } else if (
                                        typeof __D3AItem.timestamp === "string"
                                    ) {
                                        __D4.timestamp = new Date(
                                            __D3AItem.timestamp,
                                        );
                                    } else {
                                        $fallback(
                                            "/nestedArray/[0]/[0]/timestamp",
                                            "/properties/nestedArray/elements/elements/properties/timestamp",
                                            "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                        );
                                    }
                                    __D3AItemAResult = __D4;
                                } else {
                                    $fallback(
                                        "/nestedArray/[0]/[0]",
                                        "/properties/nestedArray/elements/elements",
                                        "Expected object",
                                    );
                                }
                                __D3.push(__D3AItemAResult);
                            }
                            __D2AItemAResult = __D3;
                        } else {
                            $fallback(
                                "/nestedArray/[0]",
                                "/properties/nestedArray/elements",
                                "Expected Array",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.nestedArray = __D2;
                } else {
                    $fallback(
                        "/nestedArray",
                        "/properties/nestedArray",
                        "Expected Array",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            __D1.any = input.any;
            if (typeof input.boolean === "boolean") {
                __D1.boolean = input.boolean;
            } else {
                $fallback(
                    "/boolean",
                    "/properties/boolean/type",
                    "Expected boolean for /boolean",
                );
            }
            if (typeof input.string === "string") {
                __D1.string = input.string;
            } else {
                $fallback(
                    "/string",
                    "/properties/string/type",
                    "Expected string at /string",
                );
            }
            if (
                typeof input.timestamp === "object" &&
                input.timestamp instanceof Date
            ) {
                __D1.timestamp = input.timestamp;
            } else if (typeof input.timestamp === "string") {
                __D1.timestamp = new Date(input.timestamp);
            } else {
                $fallback(
                    "/timestamp",
                    "/properties/timestamp",
                    "Expected instanceof Date or ISO Date string at /timestamp",
                );
            }
            if (
                typeof input.float32 === "number" &&
                !Number.isNaN(input.float32)
            ) {
                __D1.float32 = input.float32;
            } else {
                $fallback(
                    "/float32",
                    "/properties/float32/type",
                    "Expected number at /float32",
                );
            }
            if (
                typeof input.float64 === "number" &&
                !Number.isNaN(input.float64)
            ) {
                __D1.float64 = input.float64;
            } else {
                $fallback(
                    "/float64",
                    "/properties/float64/type",
                    "Expected number at /float64",
                );
            }
            if (
                typeof input.int8 === "number" &&
                Number.isInteger(input.int8) &&
                input.int8 >= -128 &&
                input.int8 <= 127
            ) {
                __D1.int8 = input.int8;
            } else {
                $fallback(
                    "/int8",
                    "/properties/int8",
                    "Expected valid integer between -128 and 127",
                );
            }
            if (
                typeof input.uint8 === "number" &&
                Number.isInteger(input.uint8) &&
                input.uint8 >= 0 &&
                input.uint8 <= 255
            ) {
                __D1.uint8 = input.uint8;
            } else {
                $fallback(
                    "/uint8",
                    "/properties/uint8",
                    "Expected valid integer between 0 and 255",
                );
            }
            if (
                typeof input.int16 === "number" &&
                Number.isInteger(input.int16) &&
                input.int16 >= -32768 &&
                input.int16 <= 32767
            ) {
                __D1.int16 = input.int16;
            } else {
                $fallback(
                    "/int16",
                    "/properties/int16",
                    "Expected valid integer between -32768 and 32767",
                );
            }
            if (
                typeof input.uint16 === "number" &&
                Number.isInteger(input.uint16) &&
                input.uint16 >= 0 &&
                input.uint16 <= 65535
            ) {
                __D1.uint16 = input.uint16;
            } else {
                $fallback(
                    "/uint16",
                    "/properties/uint16",
                    "Expected valid integer between 0 and 65535",
                );
            }
            if (
                typeof input.int32 === "number" &&
                Number.isInteger(input.int32) &&
                input.int32 >= -2147483648 &&
                input.int32 <= 2147483647
            ) {
                __D1.int32 = input.int32;
            } else {
                $fallback(
                    "/int32",
                    "/properties/int32",
                    "Expected valid integer between -2147483648 and 2147483647",
                );
            }
            if (
                typeof input.uint32 === "number" &&
                Number.isInteger(input.uint32) &&
                input.uint32 >= 0 &&
                input.uint32 <= 4294967295
            ) {
                __D1.uint32 = input.uint32;
            } else {
                $fallback(
                    "/uint32",
                    "/properties/uint32",
                    "Expected valid integer between 0 and 4294967295",
                );
            }
            if (
                typeof input.int64 === "string" ||
                typeof input.int64 === "number"
            ) {
                try {
                    const val = BigInt(input.int64);
                    __D1.int64 = val;
                } catch (err) {
                    $fallback(
                        "/int64",
                        "/properties/int64",
                        "Unable to parse BigInt from input.int64.",
                    );
                }
            } else if (typeof input.int64 === "bigint") {
                __D1.int64 = input.int64;
            } else {
                $fallback(
                    "/int64",
                    "/properties/int64",
                    "Expected BigInt or Integer string. Got ${input.int64}",
                );
            }
            if (
                typeof input.uint64 === "string" ||
                typeof input.uint64 === "number"
            ) {
                try {
                    const val = BigInt(input.uint64);
                    if (val >= BigInt("0")) {
                        __D1.uint64 = val;
                    } else {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } catch (err) {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Unable to parse BigInt from input.uint64.",
                    );
                }
            } else if (typeof input.uint64 === "bigint") {
                if (input.uint64 >= BigInt("0")) {
                    __D1.uint64 = input.uint64;
                } else {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Unsigned int must be greater than or equal to 0.",
                    );
                }
            } else {
                $fallback(
                    "/uint64",
                    "/properties/uint64",
                    "Expected BigInt or Integer string. Got ${input.uint64}",
                );
            }
            if (typeof input.enumerator === "string") {
                if (
                    input.enumerator === "A" ||
                    input.enumerator === "B" ||
                    input.enumerator === "C"
                ) {
                    __D1.enumerator = input.enumerator;
                } else {
                    $fallback(
                        "/enumerator",
                        "/properties/enumerator",
                        "Expected one of the following values: [A, B, C] at /enumerator.",
                    );
                }
            } else {
                $fallback(
                    "/enumerator",
                    "/properties/enumerator",
                    "Expected one of the following values: [A, B, C] at /enumerator.",
                );
            }
            if (Array.isArray(input.array)) {
                const __D2 = [];
                for (const __D2AItem of input.array) {
                    let __D2AItemAResult;
                    if (typeof __D2AItem === "boolean") {
                        __D2AItemAResult = __D2AItem;
                    } else {
                        $fallback(
                            "/array/[0]",
                            "/properties/array/elements/type",
                            "Expected boolean for /array/[0]",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.array = __D2;
            } else {
                $fallback("/array", "/properties/array", "Expected Array");
            }
            if (typeof input.object === "object" && input.object !== null) {
                const __D2 = {};
                if (typeof input.object.string === "string") {
                    __D2.string = input.object.string;
                } else {
                    $fallback(
                        "/object/string",
                        "/properties/object/properties/string/type",
                        "Expected string at /object/string",
                    );
                }
                if (typeof input.object.boolean === "boolean") {
                    __D2.boolean = input.object.boolean;
                } else {
                    $fallback(
                        "/object/boolean",
                        "/properties/object/properties/boolean/type",
                        "Expected boolean for /object/boolean",
                    );
                }
                if (
                    typeof input.object.timestamp === "object" &&
                    input.object.timestamp instanceof Date
                ) {
                    __D2.timestamp = input.object.timestamp;
                } else if (typeof input.object.timestamp === "string") {
                    __D2.timestamp = new Date(input.object.timestamp);
                } else {
                    $fallback(
                        "/object/timestamp",
                        "/properties/object/properties/timestamp",
                        "Expected instanceof Date or ISO Date string at /object/timestamp",
                    );
                }
                __D1.object = __D2;
            } else {
                $fallback("/object", "/properties/object", "Expected object");
            }
            if (typeof input.record === "object" && input.record !== null) {
                const __D2RResult = {};
                for (const __D2RKey of Object.keys(input.record)) {
                    let __D2RKeyRVal;
                    if (typeof input.record[__D2RKey] === "boolean") {
                        __D2RKeyRVal = input.record[__D2RKey];
                    } else {
                        $fallback(
                            "/record/[key]",
                            "/properties/record/values/type",
                            "Expected boolean for /record/[key]",
                        );
                    }
                    __D2RResult[__D2RKey] = __D2RKeyRVal;
                }
                __D1.record = __D2RResult;
            } else {
                $fallback("/record", "/properties/record", "Expected object.");
            }
            if (
                typeof input.discriminator === "object" &&
                input.discriminator !== null
            ) {
                switch (input.discriminator.type) {
                    case "A": {
                        if (
                            typeof input.discriminator === "object" &&
                            input.discriminator !== null
                        ) {
                            const __D2 = {};
                            __D2.type = "A";
                            if (typeof input.discriminator.title === "string") {
                                __D2.title = input.discriminator.title;
                            } else {
                                $fallback(
                                    "/discriminator/title",
                                    "/properties/discriminator/mapping/properties/title/type",
                                    "Expected string at /discriminator/title",
                                );
                            }
                            __D1.discriminator = __D2;
                        } else {
                            $fallback(
                                "/discriminator",
                                "/properties/discriminator/mapping",
                                "Expected object",
                            );
                        }
                        break;
                    }
                    case "B": {
                        if (
                            typeof input.discriminator === "object" &&
                            input.discriminator !== null
                        ) {
                            const __D2 = {};
                            __D2.type = "B";
                            if (typeof input.discriminator.title === "string") {
                                __D2.title = input.discriminator.title;
                            } else {
                                $fallback(
                                    "/discriminator/title",
                                    "/properties/discriminator/mapping/properties/title/type",
                                    "Expected string at /discriminator/title",
                                );
                            }
                            if (
                                typeof input.discriminator.description ===
                                "string"
                            ) {
                                __D2.description =
                                    input.discriminator.description;
                            } else {
                                $fallback(
                                    "/discriminator/description",
                                    "/properties/discriminator/mapping/properties/description/type",
                                    "Expected string at /discriminator/description",
                                );
                            }
                            __D1.discriminator = __D2;
                        } else {
                            $fallback(
                                "/discriminator",
                                "/properties/discriminator/mapping",
                                "Expected object",
                            );
                        }
                        break;
                    }
                    default:
                        $fallback(
                            "/discriminator",
                            "/properties/discriminator/mapping",
                            "input.discriminator.type did not match one of the specified values",
                        );
                        break;
                }
            } else {
                $fallback(
                    "/discriminator",
                    "/properties/discriminator",
                    "Expected Object.",
                );
            }
            if (
                typeof input.nestedObject === "object" &&
                input.nestedObject !== null
            ) {
                const __D2 = {};
                if (typeof input.nestedObject.id === "string") {
                    __D2.id = input.nestedObject.id;
                } else {
                    $fallback(
                        "/nestedObject/id",
                        "/properties/nestedObject/properties/id/type",
                        "Expected string at /nestedObject/id",
                    );
                }
                if (
                    typeof input.nestedObject.timestamp === "object" &&
                    input.nestedObject.timestamp instanceof Date
                ) {
                    __D2.timestamp = input.nestedObject.timestamp;
                } else if (typeof input.nestedObject.timestamp === "string") {
                    __D2.timestamp = new Date(input.nestedObject.timestamp);
                } else {
                    $fallback(
                        "/nestedObject/timestamp",
                        "/properties/nestedObject/properties/timestamp",
                        "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                    );
                }
                if (
                    typeof input.nestedObject.data === "object" &&
                    input.nestedObject.data !== null
                ) {
                    const __D3 = {};
                    if (typeof input.nestedObject.data.id === "string") {
                        __D3.id = input.nestedObject.data.id;
                    } else {
                        $fallback(
                            "/nestedObject/data/id",
                            "/properties/nestedObject/properties/data/properties/id/type",
                            "Expected string at /nestedObject/data/id",
                        );
                    }
                    if (
                        typeof input.nestedObject.data.timestamp === "object" &&
                        input.nestedObject.data.timestamp instanceof Date
                    ) {
                        __D3.timestamp = input.nestedObject.data.timestamp;
                    } else if (
                        typeof input.nestedObject.data.timestamp === "string"
                    ) {
                        __D3.timestamp = new Date(
                            input.nestedObject.data.timestamp,
                        );
                    } else {
                        $fallback(
                            "/nestedObject/data/timestamp",
                            "/properties/nestedObject/properties/data/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                        );
                    }
                    if (
                        typeof input.nestedObject.data.data === "object" &&
                        input.nestedObject.data.data !== null
                    ) {
                        const __D4 = {};
                        if (
                            typeof input.nestedObject.data.data.id === "string"
                        ) {
                            __D4.id = input.nestedObject.data.data.id;
                        } else {
                            $fallback(
                                "/nestedObject/data/data/id",
                                "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                                "Expected string at /nestedObject/data/data/id",
                            );
                        }
                        if (
                            typeof input.nestedObject.data.data.timestamp ===
                                "object" &&
                            input.nestedObject.data.data.timestamp instanceof
                                Date
                        ) {
                            __D4.timestamp =
                                input.nestedObject.data.data.timestamp;
                        } else if (
                            typeof input.nestedObject.data.data.timestamp ===
                            "string"
                        ) {
                            __D4.timestamp = new Date(
                                input.nestedObject.data.data.timestamp,
                            );
                        } else {
                            $fallback(
                                "/nestedObject/data/data/timestamp",
                                "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                            );
                        }
                        __D3.data = __D4;
                    } else {
                        $fallback(
                            "/nestedObject/data/data",
                            "/properties/nestedObject/properties/data/properties/data",
                            "Expected object",
                        );
                    }
                    __D2.data = __D3;
                } else {
                    $fallback(
                        "/nestedObject/data",
                        "/properties/nestedObject/properties/data",
                        "Expected object",
                    );
                }
                __D1.nestedObject = __D2;
            } else {
                $fallback(
                    "/nestedObject",
                    "/properties/nestedObject",
                    "Expected object",
                );
            }
            if (Array.isArray(input.nestedArray)) {
                const __D2 = [];
                for (const __D2AItem of input.nestedArray) {
                    let __D2AItemAResult;
                    if (Array.isArray(__D2AItem)) {
                        const __D3 = [];
                        for (const __D3AItem of __D2AItem) {
                            let __D3AItemAResult;
                            if (
                                typeof __D3AItem === "object" &&
                                __D3AItem !== null
                            ) {
                                const __D4 = {};
                                if (typeof __D3AItem.id === "string") {
                                    __D4.id = __D3AItem.id;
                                } else {
                                    $fallback(
                                        "/nestedArray/[0]/[0]/id",
                                        "/properties/nestedArray/elements/elements/properties/id/type",
                                        "Expected string at /nestedArray/[0]/[0]/id",
                                    );
                                }
                                if (
                                    typeof __D3AItem.timestamp === "object" &&
                                    __D3AItem.timestamp instanceof Date
                                ) {
                                    __D4.timestamp = __D3AItem.timestamp;
                                } else if (
                                    typeof __D3AItem.timestamp === "string"
                                ) {
                                    __D4.timestamp = new Date(
                                        __D3AItem.timestamp,
                                    );
                                } else {
                                    $fallback(
                                        "/nestedArray/[0]/[0]/timestamp",
                                        "/properties/nestedArray/elements/elements/properties/timestamp",
                                        "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                    );
                                }
                                __D3AItemAResult = __D4;
                            } else {
                                $fallback(
                                    "/nestedArray/[0]/[0]",
                                    "/properties/nestedArray/elements/elements",
                                    "Expected object",
                                );
                            }
                            __D3.push(__D3AItemAResult);
                        }
                        __D2AItemAResult = __D3;
                    } else {
                        $fallback(
                            "/nestedArray/[0]",
                            "/properties/nestedArray/elements",
                            "Expected Array",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.nestedArray = __D2;
            } else {
                $fallback(
                    "/nestedArray",
                    "/properties/nestedArray",
                    "Expected Array",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: ObjectWithEveryType): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        if (typeof input.any !== "undefined") {
            json += '"any":' + JSON.stringify(input.any);
        }
        json += `,"boolean":${input.boolean}`;
        json += `,"string":`;
        if (input.string.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.string.length; i++) {
                __point__ = input.string.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.string);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.string.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.string}"`;
                } else {
                    json += `"${__result__}${input.string.slice(__last__)}"`;
                }
            }
        } else if (
            input.string.length < 5000 &&
            !STR_ESCAPE.test(input.string)
        ) {
            json += `"${input.string}"`;
        } else {
            json += JSON.stringify(input.string);
        }
        json += `,"timestamp":"${input.timestamp.toISOString()}"`;

        if (Number.isNaN(input.float32)) {
            throw new Error("Expected number at /float32 got NaN");
        }
        json += `,"float32":${input.float32}`;

        if (Number.isNaN(input.float64)) {
            throw new Error("Expected number at /float64 got NaN");
        }
        json += `,"float64":${input.float64}`;

        if (Number.isNaN(input.int8)) {
            throw new Error("Expected number at /int8 got NaN");
        }
        json += `,"int8":${input.int8}`;

        if (Number.isNaN(input.uint8)) {
            throw new Error("Expected number at /uint8 got NaN");
        }
        json += `,"uint8":${input.uint8}`;

        if (Number.isNaN(input.int16)) {
            throw new Error("Expected number at /int16 got NaN");
        }
        json += `,"int16":${input.int16}`;

        if (Number.isNaN(input.uint16)) {
            throw new Error("Expected number at /uint16 got NaN");
        }
        json += `,"uint16":${input.uint16}`;

        if (Number.isNaN(input.int32)) {
            throw new Error("Expected number at /int32 got NaN");
        }
        json += `,"int32":${input.int32}`;

        if (Number.isNaN(input.uint32)) {
            throw new Error("Expected number at /uint32 got NaN");
        }
        json += `,"uint32":${input.uint32}`;
        json += `,"int64":"${input.int64.toString()}"`;
        json += `,"uint64":"${input.uint64.toString()}"`;
        json += `,"enumerator":"${input.enumerator}"`;
        json += ',"array":[';
        for (let i = 0; i < input.array.length; i++) {
            const inputArrayItem = input.array[i];
            if (i !== 0) {
                json += ",";
            }
            json += `${inputArrayItem}`;
        }
        json += "]";
        json += ',"object":{';
        json += `"string":`;
        if (input.object.string.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.object.string.length; i++) {
                __point__ = input.object.string.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.object.string);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.object.string.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.object.string}"`;
                } else {
                    json += `"${__result__}${input.object.string.slice(__last__)}"`;
                }
            }
        } else if (
            input.object.string.length < 5000 &&
            !STR_ESCAPE.test(input.object.string)
        ) {
            json += `"${input.object.string}"`;
        } else {
            json += JSON.stringify(input.object.string);
        }
        json += `,"boolean":${input.object.boolean}`;
        json += `,"timestamp":"${input.object.timestamp.toISOString()}"`;
        json += "}";
        const recordKeys = Object.keys(input.record);
        json += ',"record":{';
        for (let i = 0; i < recordKeys.length; i++) {
            const key = recordKeys[i];
            const innerVal = input.record[key];
            if (i !== 0) {
                json += `,"${key}":`;
            } else {
                json += `"${key}":`;
            }
            json += `${innerVal}`;
        }
        json += "}";
        switch (input.discriminator.type) {
            case "A": {
                json += ',"discriminator":{';
                json += `"type":"A"`;
                json += `,"title":`;
                if (input.discriminator.title.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.discriminator.title.length; i++) {
                        __point__ = input.discriminator.title.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.discriminator.title);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.discriminator.title.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.discriminator.title.length < 5000 &&
                    !STR_ESCAPE.test(input.discriminator.title)
                ) {
                    json += `"${input.discriminator.title}"`;
                } else {
                    json += JSON.stringify(input.discriminator.title);
                }
                json += "}";
                break;
            }
            case "B": {
                json += ',"discriminator":{';
                json += `"type":"B"`;
                json += `,"title":`;
                if (input.discriminator.title.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.discriminator.title.length; i++) {
                        __point__ = input.discriminator.title.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.discriminator.title);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.discriminator.title.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.discriminator.title.length < 5000 &&
                    !STR_ESCAPE.test(input.discriminator.title)
                ) {
                    json += `"${input.discriminator.title}"`;
                } else {
                    json += JSON.stringify(input.discriminator.title);
                }
                json += `,"description":`;
                if (input.discriminator.description.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.discriminator.description.length;
                        i++
                    ) {
                        __point__ =
                            input.discriminator.description.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(
                                input.discriminator.description,
                            );
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.discriminator.description.slice(
                                    __last__,
                                    i,
                                ) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.discriminator.description}"`;
                        } else {
                            json += `"${__result__}${input.discriminator.description.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.discriminator.description.length < 5000 &&
                    !STR_ESCAPE.test(input.discriminator.description)
                ) {
                    json += `"${input.discriminator.description}"`;
                } else {
                    json += JSON.stringify(input.discriminator.description);
                }
                json += "}";
                break;
            }
        }
        json += ',"nestedObject":{';
        json += `"id":`;
        if (input.nestedObject.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.nestedObject.id.length; i++) {
                __point__ = input.nestedObject.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.nestedObject.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.nestedObject.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.nestedObject.id}"`;
                } else {
                    json += `"${__result__}${input.nestedObject.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.nestedObject.id.length < 5000 &&
            !STR_ESCAPE.test(input.nestedObject.id)
        ) {
            json += `"${input.nestedObject.id}"`;
        } else {
            json += JSON.stringify(input.nestedObject.id);
        }
        json += `,"timestamp":"${input.nestedObject.timestamp.toISOString()}"`;
        json += ',"data":{';
        json += `"id":`;
        if (input.nestedObject.data.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.nestedObject.data.id.length; i++) {
                __point__ = input.nestedObject.data.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.nestedObject.data.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.nestedObject.data.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.nestedObject.data.id}"`;
                } else {
                    json += `"${__result__}${input.nestedObject.data.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.nestedObject.data.id.length < 5000 &&
            !STR_ESCAPE.test(input.nestedObject.data.id)
        ) {
            json += `"${input.nestedObject.data.id}"`;
        } else {
            json += JSON.stringify(input.nestedObject.data.id);
        }
        json += `,"timestamp":"${input.nestedObject.data.timestamp.toISOString()}"`;
        json += ',"data":{';
        json += `"id":`;
        if (input.nestedObject.data.data.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.nestedObject.data.data.id.length; i++) {
                __point__ = input.nestedObject.data.data.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.nestedObject.data.data.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.nestedObject.data.data.id.slice(__last__, i) +
                        "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.nestedObject.data.data.id}"`;
                } else {
                    json += `"${__result__}${input.nestedObject.data.data.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.nestedObject.data.data.id.length < 5000 &&
            !STR_ESCAPE.test(input.nestedObject.data.data.id)
        ) {
            json += `"${input.nestedObject.data.data.id}"`;
        } else {
            json += JSON.stringify(input.nestedObject.data.data.id);
        }
        json += `,"timestamp":"${input.nestedObject.data.data.timestamp.toISOString()}"`;
        json += "}";
        json += "}";
        json += "}";
        json += ',"nestedArray":[';
        for (let i = 0; i < input.nestedArray.length; i++) {
            const inputNestedArrayItem = input.nestedArray[i];
            if (i !== 0) {
                json += ",";
            }
            json += "[";
            for (let i = 0; i < inputNestedArrayItem.length; i++) {
                const inputNestedArrayItemItem = inputNestedArrayItem[i];
                if (i !== 0) {
                    json += ",";
                }
                json += "{";
                json += `"id":`;
                if (inputNestedArrayItemItem.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < inputNestedArrayItemItem.id.length;
                        i++
                    ) {
                        __point__ = inputNestedArrayItemItem.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(inputNestedArrayItemItem.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                inputNestedArrayItemItem.id.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${inputNestedArrayItemItem.id}"`;
                        } else {
                            json += `"${__result__}${inputNestedArrayItemItem.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    inputNestedArrayItemItem.id.length < 5000 &&
                    !STR_ESCAPE.test(inputNestedArrayItemItem.id)
                ) {
                    json += `"${inputNestedArrayItemItem.id}"`;
                } else {
                    json += JSON.stringify(inputNestedArrayItemItem.id);
                }
                json += `,"timestamp":"${inputNestedArrayItemItem.timestamp.toISOString()}"`;
                json += "}";
            }
            json += "]";
        }
        json += "]";
        json += "}";
        return json;
    },
};
export type ObjectWithEveryTypeEnumerator = "A" | "B" | "C";
export interface ObjectWithEveryTypeObject {
    string: string;
    boolean: boolean;
    timestamp: Date;
}

export type ObjectWithEveryTypeRecord = Record<string, boolean>;

export type ObjectWithEveryTypeDiscriminator =
    | ObjectWithEveryTypeDiscriminatorA
    | ObjectWithEveryTypeDiscriminatorB;

export interface ObjectWithEveryTypeDiscriminatorA {
    type: "A";
    title: string;
}

export interface ObjectWithEveryTypeDiscriminatorB {
    type: "B";
    title: string;
    description: string;
}

export interface ObjectWithEveryTypeNestedObject {
    id: string;
    timestamp: Date;
    data: ObjectWithEveryTypeNestedObjectData;
}

export interface ObjectWithEveryTypeNestedObjectData {
    id: string;
    timestamp: Date;
    data: ObjectWithEveryTypeNestedObjectDataData;
}

export interface ObjectWithEveryTypeNestedObjectDataData {
    id: string;
    timestamp: Date;
}

export interface ObjectWithEveryTypeNestedArrayItemItem {
    id: string;
    timestamp: Date;
}

export interface ObjectWithEveryNullableType {
    any: any | null;
    boolean: boolean | null;
    string: string | null;
    timestamp: Date | null;
    float32: number | null;
    float64: number | null;
    int8: number | null;
    uint8: number | null;
    int16: number | null;
    uint16: number | null;
    int32: number | null;
    uint32: number | null;
    int64: bigint | null;
    uint64: bigint | null;
    enumerator: ObjectWithEveryNullableTypeEnumerator | null;
    array: Array<boolean | null> | null;
    object: ObjectWithEveryNullableTypeObject | null;
    record: ObjectWithEveryNullableTypeRecord | null;
    discriminator: ObjectWithEveryNullableTypeDiscriminator | null;
    nestedObject: ObjectWithEveryNullableTypeNestedObject | null;
    nestedArray: Array<Array<ObjectWithEveryNullableTypeNestedArrayItemItem | null> | null> | null;
}
const $$ObjectWithEveryNullableType = {
    parse(input: Record<any, any>): ObjectWithEveryNullableType {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                __D1.any = json.any;
                if (json.boolean === null) {
                    __D1.boolean = null;
                } else {
                    if (typeof json.boolean === "boolean") {
                        __D1.boolean = json.boolean;
                    } else {
                        $fallback(
                            "/boolean",
                            "/properties/boolean/type",
                            "Expected boolean for /boolean",
                        );
                    }
                }
                if (json.string === null) {
                    __D1.string = json.string;
                } else {
                    if (typeof json.string === "string") {
                        __D1.string = json.string;
                    } else {
                        $fallback(
                            "/string",
                            "/properties/string/type",
                            "Expected string at /string",
                        );
                    }
                }
                if (json.timestamp === null) {
                    __D1.timestamp = null;
                } else {
                    if (
                        typeof json.timestamp === "object" &&
                        json.timestamp instanceof Date
                    ) {
                        __D1.timestamp = json.timestamp;
                    } else if (typeof json.timestamp === "string") {
                        __D1.timestamp = new Date(json.timestamp);
                    } else {
                        $fallback(
                            "/timestamp",
                            "/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /timestamp",
                        );
                    }
                }
                if (json.float32 === null) {
                    __D1.float32 = null;
                } else {
                    if (
                        typeof json.float32 === "number" &&
                        !Number.isNaN(json.float32)
                    ) {
                        __D1.float32 = json.float32;
                    } else {
                        $fallback(
                            "/float32",
                            "/properties/float32/type",
                            "Expected number at /float32",
                        );
                    }
                }
                if (json.float64 === null) {
                    __D1.float64 = null;
                } else {
                    if (
                        typeof json.float64 === "number" &&
                        !Number.isNaN(json.float64)
                    ) {
                        __D1.float64 = json.float64;
                    } else {
                        $fallback(
                            "/float64",
                            "/properties/float64/type",
                            "Expected number at /float64",
                        );
                    }
                }
                if (json.int8 === null) {
                    __D1.int8 = null;
                } else {
                    if (
                        typeof json.int8 === "number" &&
                        Number.isInteger(json.int8) &&
                        json.int8 >= -128 &&
                        json.int8 <= 127
                    ) {
                        __D1.int8 = json.int8;
                    } else {
                        $fallback(
                            "/int8",
                            "/properties/int8",
                            "Expected valid integer between -128 and 127",
                        );
                    }
                }
                if (json.uint8 === null) {
                    __D1.uint8 = null;
                } else {
                    if (
                        typeof json.uint8 === "number" &&
                        Number.isInteger(json.uint8) &&
                        json.uint8 >= 0 &&
                        json.uint8 <= 255
                    ) {
                        __D1.uint8 = json.uint8;
                    } else {
                        $fallback(
                            "/uint8",
                            "/properties/uint8",
                            "Expected valid integer between 0 and 255",
                        );
                    }
                }
                if (json.int16 === null) {
                    __D1.int16 = null;
                } else {
                    if (
                        typeof json.int16 === "number" &&
                        Number.isInteger(json.int16) &&
                        json.int16 >= -32768 &&
                        json.int16 <= 32767
                    ) {
                        __D1.int16 = json.int16;
                    } else {
                        $fallback(
                            "/int16",
                            "/properties/int16",
                            "Expected valid integer between -32768 and 32767",
                        );
                    }
                }
                if (json.uint16 === null) {
                    __D1.uint16 = null;
                } else {
                    if (
                        typeof json.uint16 === "number" &&
                        Number.isInteger(json.uint16) &&
                        json.uint16 >= 0 &&
                        json.uint16 <= 65535
                    ) {
                        __D1.uint16 = json.uint16;
                    } else {
                        $fallback(
                            "/uint16",
                            "/properties/uint16",
                            "Expected valid integer between 0 and 65535",
                        );
                    }
                }
                if (json.int32 === null) {
                    __D1.int32 = null;
                } else {
                    if (
                        typeof json.int32 === "number" &&
                        Number.isInteger(json.int32) &&
                        json.int32 >= -2147483648 &&
                        json.int32 <= 2147483647
                    ) {
                        __D1.int32 = json.int32;
                    } else {
                        $fallback(
                            "/int32",
                            "/properties/int32",
                            "Expected valid integer between -2147483648 and 2147483647",
                        );
                    }
                }
                if (json.uint32 === null) {
                    __D1.uint32 = null;
                } else {
                    if (
                        typeof json.uint32 === "number" &&
                        Number.isInteger(json.uint32) &&
                        json.uint32 >= 0 &&
                        json.uint32 <= 4294967295
                    ) {
                        __D1.uint32 = json.uint32;
                    } else {
                        $fallback(
                            "/uint32",
                            "/properties/uint32",
                            "Expected valid integer between 0 and 4294967295",
                        );
                    }
                }
                if (
                    typeof json.int64 === "string" ||
                    typeof json.int64 === "number"
                ) {
                    try {
                        const val = BigInt(json.int64);
                        __D1.int64 = val;
                    } catch (err) {
                        $fallback(
                            "/int64",
                            "/properties/int64",
                            "Unable to parse BigInt from json.int64.",
                        );
                    }
                } else if (typeof json.int64 === "bigint") {
                    __D1.int64 = json.int64;
                } else if (json.int64 === null) {
                    __D1.int64 = null;
                } else {
                    $fallback(
                        "/int64",
                        "/properties/int64",
                        "Expected BigInt or Integer string. Got ${json.int64}",
                    );
                }
                if (
                    typeof json.uint64 === "string" ||
                    typeof json.uint64 === "number"
                ) {
                    try {
                        const val = BigInt(json.uint64);
                        if (val >= BigInt("0")) {
                            __D1.uint64 = val;
                        } else {
                            $fallback(
                                "/uint64",
                                "/properties/uint64",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } catch (err) {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unable to parse BigInt from json.uint64.",
                        );
                    }
                } else if (typeof json.uint64 === "bigint") {
                    if (json.uint64 >= BigInt("0")) {
                        __D1.uint64 = json.uint64;
                    } else {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } else if (json.uint64 === null) {
                    __D1.uint64 = null;
                } else {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Expected BigInt or Integer string. Got ${json.uint64}",
                    );
                }
                if (json.enumerator === null) {
                    __D1.enumerator = null;
                } else {
                    if (typeof json.enumerator === "string") {
                        if (
                            json.enumerator === "A" ||
                            json.enumerator === "B" ||
                            json.enumerator === "C"
                        ) {
                            __D1.enumerator = json.enumerator;
                        } else {
                            $fallback(
                                "/enumerator",
                                "/properties/enumerator",
                                "Expected one of the following values: [A, B, C] at /enumerator.",
                            );
                        }
                    } else {
                        $fallback(
                            "/enumerator",
                            "/properties/enumerator",
                            "Expected one of the following values: [A, B, C] at /enumerator.",
                        );
                    }
                }
                if (json.array === null) {
                    __D1.array = null;
                } else {
                    if (Array.isArray(json.array)) {
                        const __D2 = [];
                        for (const __D2AItem of json.array) {
                            let __D2AItemAResult;
                            if (__D2AItem === null) {
                                __D2AItemAResult = null;
                            } else {
                                if (typeof __D2AItem === "boolean") {
                                    __D2AItemAResult = __D2AItem;
                                } else {
                                    $fallback(
                                        "/array/[0]",
                                        "/properties/array/elements/type",
                                        "Expected boolean for /array/[0]",
                                    );
                                }
                            }
                            __D2.push(__D2AItemAResult);
                        }
                        __D1.array = __D2;
                    } else {
                        $fallback(
                            "/array",
                            "/properties/array",
                            "Expected Array",
                        );
                    }
                }
                if (json.object === null) {
                    __D1.object = null;
                } else {
                    if (
                        typeof json.object === "object" &&
                        json.object !== null
                    ) {
                        const __D2 = {};
                        if (json.object.string === null) {
                            __D2.string = json.object.string;
                        } else {
                            if (typeof json.object.string === "string") {
                                __D2.string = json.object.string;
                            } else {
                                $fallback(
                                    "/object/string",
                                    "/properties/object/properties/string/type",
                                    "Expected string at /object/string",
                                );
                            }
                        }
                        if (json.object.boolean === null) {
                            __D2.boolean = null;
                        } else {
                            if (typeof json.object.boolean === "boolean") {
                                __D2.boolean = json.object.boolean;
                            } else {
                                $fallback(
                                    "/object/boolean",
                                    "/properties/object/properties/boolean/type",
                                    "Expected boolean for /object/boolean",
                                );
                            }
                        }
                        if (json.object.timestamp === null) {
                            __D2.timestamp = null;
                        } else {
                            if (
                                typeof json.object.timestamp === "object" &&
                                json.object.timestamp instanceof Date
                            ) {
                                __D2.timestamp = json.object.timestamp;
                            } else if (
                                typeof json.object.timestamp === "string"
                            ) {
                                __D2.timestamp = new Date(
                                    json.object.timestamp,
                                );
                            } else {
                                $fallback(
                                    "/object/timestamp",
                                    "/properties/object/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /object/timestamp",
                                );
                            }
                        }
                        __D1.object = __D2;
                    } else {
                        $fallback(
                            "/object",
                            "/properties/object",
                            "Expected object",
                        );
                    }
                }
                if (json.record === null) {
                    __D1.record = null;
                } else {
                    if (
                        typeof json.record === "object" &&
                        json.record !== null
                    ) {
                        const __D2RResult = {};
                        for (const __D2RKey of Object.keys(json.record)) {
                            let __D2RKeyRVal;
                            if (json.record[__D2RKey] === null) {
                                __D2RKeyRVal = null;
                            } else {
                                if (
                                    typeof json.record[__D2RKey] === "boolean"
                                ) {
                                    __D2RKeyRVal = json.record[__D2RKey];
                                } else {
                                    $fallback(
                                        "/record/[key]",
                                        "/properties/record/values/type",
                                        "Expected boolean for /record/[key]",
                                    );
                                }
                            }
                            __D2RResult[__D2RKey] = __D2RKeyRVal;
                        }
                        __D1.record = __D2RResult;
                    } else {
                        $fallback(
                            "/record",
                            "/properties/record",
                            "Expected object.",
                        );
                    }
                }
                if (json.discriminator === null) {
                    __D1.discriminator = null;
                } else {
                    if (
                        typeof json.discriminator === "object" &&
                        json.discriminator !== null
                    ) {
                        switch (json.discriminator.type) {
                            case "A": {
                                if (
                                    typeof json.discriminator === "object" &&
                                    json.discriminator !== null
                                ) {
                                    const __D2 = {};
                                    __D2.type = "A";
                                    if (json.discriminator.title === null) {
                                        __D2.title = json.discriminator.title;
                                    } else {
                                        if (
                                            typeof json.discriminator.title ===
                                            "string"
                                        ) {
                                            __D2.title =
                                                json.discriminator.title;
                                        } else {
                                            $fallback(
                                                "/discriminator/title",
                                                "/properties/discriminator/mapping/properties/title/type",
                                                "Expected string at /discriminator/title",
                                            );
                                        }
                                    }
                                    __D1.discriminator = __D2;
                                } else {
                                    $fallback(
                                        "/discriminator",
                                        "/properties/discriminator/mapping",
                                        "Expected object",
                                    );
                                }
                                break;
                            }
                            case "B": {
                                if (
                                    typeof json.discriminator === "object" &&
                                    json.discriminator !== null
                                ) {
                                    const __D2 = {};
                                    __D2.type = "B";
                                    if (json.discriminator.title === null) {
                                        __D2.title = json.discriminator.title;
                                    } else {
                                        if (
                                            typeof json.discriminator.title ===
                                            "string"
                                        ) {
                                            __D2.title =
                                                json.discriminator.title;
                                        } else {
                                            $fallback(
                                                "/discriminator/title",
                                                "/properties/discriminator/mapping/properties/title/type",
                                                "Expected string at /discriminator/title",
                                            );
                                        }
                                    }
                                    if (
                                        json.discriminator.description === null
                                    ) {
                                        __D2.description =
                                            json.discriminator.description;
                                    } else {
                                        if (
                                            typeof json.discriminator
                                                .description === "string"
                                        ) {
                                            __D2.description =
                                                json.discriminator.description;
                                        } else {
                                            $fallback(
                                                "/discriminator/description",
                                                "/properties/discriminator/mapping/properties/description/type",
                                                "Expected string at /discriminator/description",
                                            );
                                        }
                                    }
                                    __D1.discriminator = __D2;
                                } else {
                                    $fallback(
                                        "/discriminator",
                                        "/properties/discriminator/mapping",
                                        "Expected object",
                                    );
                                }
                                break;
                            }
                            default:
                                $fallback(
                                    "/discriminator",
                                    "/properties/discriminator/mapping",
                                    "json.discriminator.type did not match one of the specified values",
                                );
                                break;
                        }
                    } else {
                        $fallback(
                            "/discriminator",
                            "/properties/discriminator",
                            "Expected Object.",
                        );
                    }
                }
                if (json.nestedObject === null) {
                    __D1.nestedObject = null;
                } else {
                    if (
                        typeof json.nestedObject === "object" &&
                        json.nestedObject !== null
                    ) {
                        const __D2 = {};
                        if (json.nestedObject.id === null) {
                            __D2.id = json.nestedObject.id;
                        } else {
                            if (typeof json.nestedObject.id === "string") {
                                __D2.id = json.nestedObject.id;
                            } else {
                                $fallback(
                                    "/nestedObject/id",
                                    "/properties/nestedObject/properties/id/type",
                                    "Expected string at /nestedObject/id",
                                );
                            }
                        }
                        if (json.nestedObject.timestamp === null) {
                            __D2.timestamp = null;
                        } else {
                            if (
                                typeof json.nestedObject.timestamp ===
                                    "object" &&
                                json.nestedObject.timestamp instanceof Date
                            ) {
                                __D2.timestamp = json.nestedObject.timestamp;
                            } else if (
                                typeof json.nestedObject.timestamp === "string"
                            ) {
                                __D2.timestamp = new Date(
                                    json.nestedObject.timestamp,
                                );
                            } else {
                                $fallback(
                                    "/nestedObject/timestamp",
                                    "/properties/nestedObject/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                                );
                            }
                        }
                        if (json.nestedObject.data === null) {
                            __D2.data = null;
                        } else {
                            if (
                                typeof json.nestedObject.data === "object" &&
                                json.nestedObject.data !== null
                            ) {
                                const __D3 = {};
                                if (json.nestedObject.data.id === null) {
                                    __D3.id = json.nestedObject.data.id;
                                } else {
                                    if (
                                        typeof json.nestedObject.data.id ===
                                        "string"
                                    ) {
                                        __D3.id = json.nestedObject.data.id;
                                    } else {
                                        $fallback(
                                            "/nestedObject/data/id",
                                            "/properties/nestedObject/properties/data/properties/id/type",
                                            "Expected string at /nestedObject/data/id",
                                        );
                                    }
                                }
                                if (json.nestedObject.data.timestamp === null) {
                                    __D3.timestamp = null;
                                } else {
                                    if (
                                        typeof json.nestedObject.data
                                            .timestamp === "object" &&
                                        json.nestedObject.data
                                            .timestamp instanceof Date
                                    ) {
                                        __D3.timestamp =
                                            json.nestedObject.data.timestamp;
                                    } else if (
                                        typeof json.nestedObject.data
                                            .timestamp === "string"
                                    ) {
                                        __D3.timestamp = new Date(
                                            json.nestedObject.data.timestamp,
                                        );
                                    } else {
                                        $fallback(
                                            "/nestedObject/data/timestamp",
                                            "/properties/nestedObject/properties/data/properties/timestamp",
                                            "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                                        );
                                    }
                                }
                                if (json.nestedObject.data.data === null) {
                                    __D3.data = null;
                                } else {
                                    if (
                                        typeof json.nestedObject.data.data ===
                                            "object" &&
                                        json.nestedObject.data.data !== null
                                    ) {
                                        const __D4 = {};
                                        if (
                                            json.nestedObject.data.data.id ===
                                            null
                                        ) {
                                            __D4.id =
                                                json.nestedObject.data.data.id;
                                        } else {
                                            if (
                                                typeof json.nestedObject.data
                                                    .data.id === "string"
                                            ) {
                                                __D4.id =
                                                    json.nestedObject.data.data.id;
                                            } else {
                                                $fallback(
                                                    "/nestedObject/data/data/id",
                                                    "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                                                    "Expected string at /nestedObject/data/data/id",
                                                );
                                            }
                                        }
                                        if (
                                            json.nestedObject.data.data
                                                .timestamp === null
                                        ) {
                                            __D4.timestamp = null;
                                        } else {
                                            if (
                                                typeof json.nestedObject.data
                                                    .data.timestamp ===
                                                    "object" &&
                                                json.nestedObject.data.data
                                                    .timestamp instanceof Date
                                            ) {
                                                __D4.timestamp =
                                                    json.nestedObject.data.data.timestamp;
                                            } else if (
                                                typeof json.nestedObject.data
                                                    .data.timestamp === "string"
                                            ) {
                                                __D4.timestamp = new Date(
                                                    json.nestedObject.data.data.timestamp,
                                                );
                                            } else {
                                                $fallback(
                                                    "/nestedObject/data/data/timestamp",
                                                    "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                                                    "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                                                );
                                            }
                                        }
                                        __D3.data = __D4;
                                    } else {
                                        $fallback(
                                            "/nestedObject/data/data",
                                            "/properties/nestedObject/properties/data/properties/data",
                                            "Expected object",
                                        );
                                    }
                                }
                                __D2.data = __D3;
                            } else {
                                $fallback(
                                    "/nestedObject/data",
                                    "/properties/nestedObject/properties/data",
                                    "Expected object",
                                );
                            }
                        }
                        __D1.nestedObject = __D2;
                    } else {
                        $fallback(
                            "/nestedObject",
                            "/properties/nestedObject",
                            "Expected object",
                        );
                    }
                }
                if (json.nestedArray === null) {
                    __D1.nestedArray = null;
                } else {
                    if (Array.isArray(json.nestedArray)) {
                        const __D2 = [];
                        for (const __D2AItem of json.nestedArray) {
                            let __D2AItemAResult;
                            if (__D2AItem === null) {
                                __D2AItemAResult = null;
                            } else {
                                if (Array.isArray(__D2AItem)) {
                                    const __D3 = [];
                                    for (const __D3AItem of __D2AItem) {
                                        let __D3AItemAResult;
                                        if (__D3AItem === null) {
                                            __D3AItemAResult = null;
                                        } else {
                                            if (
                                                typeof __D3AItem === "object" &&
                                                __D3AItem !== null
                                            ) {
                                                const __D4 = {};
                                                if (__D3AItem.id === null) {
                                                    __D4.id = __D3AItem.id;
                                                } else {
                                                    if (
                                                        typeof __D3AItem.id ===
                                                        "string"
                                                    ) {
                                                        __D4.id = __D3AItem.id;
                                                    } else {
                                                        $fallback(
                                                            "/nestedArray/[0]/[0]/id",
                                                            "/properties/nestedArray/elements/elements/properties/id/type",
                                                            "Expected string at /nestedArray/[0]/[0]/id",
                                                        );
                                                    }
                                                }
                                                if (
                                                    __D3AItem.timestamp === null
                                                ) {
                                                    __D4.timestamp = null;
                                                } else {
                                                    if (
                                                        typeof __D3AItem.timestamp ===
                                                            "object" &&
                                                        __D3AItem.timestamp instanceof
                                                            Date
                                                    ) {
                                                        __D4.timestamp =
                                                            __D3AItem.timestamp;
                                                    } else if (
                                                        typeof __D3AItem.timestamp ===
                                                        "string"
                                                    ) {
                                                        __D4.timestamp =
                                                            new Date(
                                                                __D3AItem.timestamp,
                                                            );
                                                    } else {
                                                        $fallback(
                                                            "/nestedArray/[0]/[0]/timestamp",
                                                            "/properties/nestedArray/elements/elements/properties/timestamp",
                                                            "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                                        );
                                                    }
                                                }
                                                __D3AItemAResult = __D4;
                                            } else {
                                                $fallback(
                                                    "/nestedArray/[0]/[0]",
                                                    "/properties/nestedArray/elements/elements",
                                                    "Expected object",
                                                );
                                            }
                                        }
                                        __D3.push(__D3AItemAResult);
                                    }
                                    __D2AItemAResult = __D3;
                                } else {
                                    $fallback(
                                        "/nestedArray/[0]",
                                        "/properties/nestedArray/elements",
                                        "Expected Array",
                                    );
                                }
                            }
                            __D2.push(__D2AItemAResult);
                        }
                        __D1.nestedArray = __D2;
                    } else {
                        $fallback(
                            "/nestedArray",
                            "/properties/nestedArray",
                            "Expected Array",
                        );
                    }
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            __D1.any = input.any;
            if (input.boolean === null) {
                __D1.boolean = null;
            } else {
                if (typeof input.boolean === "boolean") {
                    __D1.boolean = input.boolean;
                } else {
                    $fallback(
                        "/boolean",
                        "/properties/boolean/type",
                        "Expected boolean for /boolean",
                    );
                }
            }
            if (input.string === null) {
                __D1.string = input.string;
            } else {
                if (typeof input.string === "string") {
                    __D1.string = input.string;
                } else {
                    $fallback(
                        "/string",
                        "/properties/string/type",
                        "Expected string at /string",
                    );
                }
            }
            if (input.timestamp === null) {
                __D1.timestamp = null;
            } else {
                if (
                    typeof input.timestamp === "object" &&
                    input.timestamp instanceof Date
                ) {
                    __D1.timestamp = input.timestamp;
                } else if (typeof input.timestamp === "string") {
                    __D1.timestamp = new Date(input.timestamp);
                } else {
                    $fallback(
                        "/timestamp",
                        "/properties/timestamp",
                        "Expected instanceof Date or ISO Date string at /timestamp",
                    );
                }
            }
            if (input.float32 === null) {
                __D1.float32 = null;
            } else {
                if (
                    typeof input.float32 === "number" &&
                    !Number.isNaN(input.float32)
                ) {
                    __D1.float32 = input.float32;
                } else {
                    $fallback(
                        "/float32",
                        "/properties/float32/type",
                        "Expected number at /float32",
                    );
                }
            }
            if (input.float64 === null) {
                __D1.float64 = null;
            } else {
                if (
                    typeof input.float64 === "number" &&
                    !Number.isNaN(input.float64)
                ) {
                    __D1.float64 = input.float64;
                } else {
                    $fallback(
                        "/float64",
                        "/properties/float64/type",
                        "Expected number at /float64",
                    );
                }
            }
            if (input.int8 === null) {
                __D1.int8 = null;
            } else {
                if (
                    typeof input.int8 === "number" &&
                    Number.isInteger(input.int8) &&
                    input.int8 >= -128 &&
                    input.int8 <= 127
                ) {
                    __D1.int8 = input.int8;
                } else {
                    $fallback(
                        "/int8",
                        "/properties/int8",
                        "Expected valid integer between -128 and 127",
                    );
                }
            }
            if (input.uint8 === null) {
                __D1.uint8 = null;
            } else {
                if (
                    typeof input.uint8 === "number" &&
                    Number.isInteger(input.uint8) &&
                    input.uint8 >= 0 &&
                    input.uint8 <= 255
                ) {
                    __D1.uint8 = input.uint8;
                } else {
                    $fallback(
                        "/uint8",
                        "/properties/uint8",
                        "Expected valid integer between 0 and 255",
                    );
                }
            }
            if (input.int16 === null) {
                __D1.int16 = null;
            } else {
                if (
                    typeof input.int16 === "number" &&
                    Number.isInteger(input.int16) &&
                    input.int16 >= -32768 &&
                    input.int16 <= 32767
                ) {
                    __D1.int16 = input.int16;
                } else {
                    $fallback(
                        "/int16",
                        "/properties/int16",
                        "Expected valid integer between -32768 and 32767",
                    );
                }
            }
            if (input.uint16 === null) {
                __D1.uint16 = null;
            } else {
                if (
                    typeof input.uint16 === "number" &&
                    Number.isInteger(input.uint16) &&
                    input.uint16 >= 0 &&
                    input.uint16 <= 65535
                ) {
                    __D1.uint16 = input.uint16;
                } else {
                    $fallback(
                        "/uint16",
                        "/properties/uint16",
                        "Expected valid integer between 0 and 65535",
                    );
                }
            }
            if (input.int32 === null) {
                __D1.int32 = null;
            } else {
                if (
                    typeof input.int32 === "number" &&
                    Number.isInteger(input.int32) &&
                    input.int32 >= -2147483648 &&
                    input.int32 <= 2147483647
                ) {
                    __D1.int32 = input.int32;
                } else {
                    $fallback(
                        "/int32",
                        "/properties/int32",
                        "Expected valid integer between -2147483648 and 2147483647",
                    );
                }
            }
            if (input.uint32 === null) {
                __D1.uint32 = null;
            } else {
                if (
                    typeof input.uint32 === "number" &&
                    Number.isInteger(input.uint32) &&
                    input.uint32 >= 0 &&
                    input.uint32 <= 4294967295
                ) {
                    __D1.uint32 = input.uint32;
                } else {
                    $fallback(
                        "/uint32",
                        "/properties/uint32",
                        "Expected valid integer between 0 and 4294967295",
                    );
                }
            }
            if (
                typeof input.int64 === "string" ||
                typeof input.int64 === "number"
            ) {
                try {
                    const val = BigInt(input.int64);
                    __D1.int64 = val;
                } catch (err) {
                    $fallback(
                        "/int64",
                        "/properties/int64",
                        "Unable to parse BigInt from input.int64.",
                    );
                }
            } else if (typeof input.int64 === "bigint") {
                __D1.int64 = input.int64;
            } else if (input.int64 === null) {
                __D1.int64 = null;
            } else {
                $fallback(
                    "/int64",
                    "/properties/int64",
                    "Expected BigInt or Integer string. Got ${input.int64}",
                );
            }
            if (
                typeof input.uint64 === "string" ||
                typeof input.uint64 === "number"
            ) {
                try {
                    const val = BigInt(input.uint64);
                    if (val >= BigInt("0")) {
                        __D1.uint64 = val;
                    } else {
                        $fallback(
                            "/uint64",
                            "/properties/uint64",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } catch (err) {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Unable to parse BigInt from input.uint64.",
                    );
                }
            } else if (typeof input.uint64 === "bigint") {
                if (input.uint64 >= BigInt("0")) {
                    __D1.uint64 = input.uint64;
                } else {
                    $fallback(
                        "/uint64",
                        "/properties/uint64",
                        "Unsigned int must be greater than or equal to 0.",
                    );
                }
            } else if (input.uint64 === null) {
                __D1.uint64 = null;
            } else {
                $fallback(
                    "/uint64",
                    "/properties/uint64",
                    "Expected BigInt or Integer string. Got ${input.uint64}",
                );
            }
            if (input.enumerator === null) {
                __D1.enumerator = null;
            } else {
                if (typeof input.enumerator === "string") {
                    if (
                        input.enumerator === "A" ||
                        input.enumerator === "B" ||
                        input.enumerator === "C"
                    ) {
                        __D1.enumerator = input.enumerator;
                    } else {
                        $fallback(
                            "/enumerator",
                            "/properties/enumerator",
                            "Expected one of the following values: [A, B, C] at /enumerator.",
                        );
                    }
                } else {
                    $fallback(
                        "/enumerator",
                        "/properties/enumerator",
                        "Expected one of the following values: [A, B, C] at /enumerator.",
                    );
                }
            }
            if (input.array === null) {
                __D1.array = null;
            } else {
                if (Array.isArray(input.array)) {
                    const __D2 = [];
                    for (const __D2AItem of input.array) {
                        let __D2AItemAResult;
                        if (__D2AItem === null) {
                            __D2AItemAResult = null;
                        } else {
                            if (typeof __D2AItem === "boolean") {
                                __D2AItemAResult = __D2AItem;
                            } else {
                                $fallback(
                                    "/array/[0]",
                                    "/properties/array/elements/type",
                                    "Expected boolean for /array/[0]",
                                );
                            }
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.array = __D2;
                } else {
                    $fallback("/array", "/properties/array", "Expected Array");
                }
            }
            if (input.object === null) {
                __D1.object = null;
            } else {
                if (typeof input.object === "object" && input.object !== null) {
                    const __D2 = {};
                    if (input.object.string === null) {
                        __D2.string = input.object.string;
                    } else {
                        if (typeof input.object.string === "string") {
                            __D2.string = input.object.string;
                        } else {
                            $fallback(
                                "/object/string",
                                "/properties/object/properties/string/type",
                                "Expected string at /object/string",
                            );
                        }
                    }
                    if (input.object.boolean === null) {
                        __D2.boolean = null;
                    } else {
                        if (typeof input.object.boolean === "boolean") {
                            __D2.boolean = input.object.boolean;
                        } else {
                            $fallback(
                                "/object/boolean",
                                "/properties/object/properties/boolean/type",
                                "Expected boolean for /object/boolean",
                            );
                        }
                    }
                    if (input.object.timestamp === null) {
                        __D2.timestamp = null;
                    } else {
                        if (
                            typeof input.object.timestamp === "object" &&
                            input.object.timestamp instanceof Date
                        ) {
                            __D2.timestamp = input.object.timestamp;
                        } else if (typeof input.object.timestamp === "string") {
                            __D2.timestamp = new Date(input.object.timestamp);
                        } else {
                            $fallback(
                                "/object/timestamp",
                                "/properties/object/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /object/timestamp",
                            );
                        }
                    }
                    __D1.object = __D2;
                } else {
                    $fallback(
                        "/object",
                        "/properties/object",
                        "Expected object",
                    );
                }
            }
            if (input.record === null) {
                __D1.record = null;
            } else {
                if (typeof input.record === "object" && input.record !== null) {
                    const __D2RResult = {};
                    for (const __D2RKey of Object.keys(input.record)) {
                        let __D2RKeyRVal;
                        if (input.record[__D2RKey] === null) {
                            __D2RKeyRVal = null;
                        } else {
                            if (typeof input.record[__D2RKey] === "boolean") {
                                __D2RKeyRVal = input.record[__D2RKey];
                            } else {
                                $fallback(
                                    "/record/[key]",
                                    "/properties/record/values/type",
                                    "Expected boolean for /record/[key]",
                                );
                            }
                        }
                        __D2RResult[__D2RKey] = __D2RKeyRVal;
                    }
                    __D1.record = __D2RResult;
                } else {
                    $fallback(
                        "/record",
                        "/properties/record",
                        "Expected object.",
                    );
                }
            }
            if (input.discriminator === null) {
                __D1.discriminator = null;
            } else {
                if (
                    typeof input.discriminator === "object" &&
                    input.discriminator !== null
                ) {
                    switch (input.discriminator.type) {
                        case "A": {
                            if (
                                typeof input.discriminator === "object" &&
                                input.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "A";
                                if (input.discriminator.title === null) {
                                    __D2.title = input.discriminator.title;
                                } else {
                                    if (
                                        typeof input.discriminator.title ===
                                        "string"
                                    ) {
                                        __D2.title = input.discriminator.title;
                                    } else {
                                        $fallback(
                                            "/discriminator/title",
                                            "/properties/discriminator/mapping/properties/title/type",
                                            "Expected string at /discriminator/title",
                                        );
                                    }
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/properties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        case "B": {
                            if (
                                typeof input.discriminator === "object" &&
                                input.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "B";
                                if (input.discriminator.title === null) {
                                    __D2.title = input.discriminator.title;
                                } else {
                                    if (
                                        typeof input.discriminator.title ===
                                        "string"
                                    ) {
                                        __D2.title = input.discriminator.title;
                                    } else {
                                        $fallback(
                                            "/discriminator/title",
                                            "/properties/discriminator/mapping/properties/title/type",
                                            "Expected string at /discriminator/title",
                                        );
                                    }
                                }
                                if (input.discriminator.description === null) {
                                    __D2.description =
                                        input.discriminator.description;
                                } else {
                                    if (
                                        typeof input.discriminator
                                            .description === "string"
                                    ) {
                                        __D2.description =
                                            input.discriminator.description;
                                    } else {
                                        $fallback(
                                            "/discriminator/description",
                                            "/properties/discriminator/mapping/properties/description/type",
                                            "Expected string at /discriminator/description",
                                        );
                                    }
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/properties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        default:
                            $fallback(
                                "/discriminator",
                                "/properties/discriminator/mapping",
                                "input.discriminator.type did not match one of the specified values",
                            );
                            break;
                    }
                } else {
                    $fallback(
                        "/discriminator",
                        "/properties/discriminator",
                        "Expected Object.",
                    );
                }
            }
            if (input.nestedObject === null) {
                __D1.nestedObject = null;
            } else {
                if (
                    typeof input.nestedObject === "object" &&
                    input.nestedObject !== null
                ) {
                    const __D2 = {};
                    if (input.nestedObject.id === null) {
                        __D2.id = input.nestedObject.id;
                    } else {
                        if (typeof input.nestedObject.id === "string") {
                            __D2.id = input.nestedObject.id;
                        } else {
                            $fallback(
                                "/nestedObject/id",
                                "/properties/nestedObject/properties/id/type",
                                "Expected string at /nestedObject/id",
                            );
                        }
                    }
                    if (input.nestedObject.timestamp === null) {
                        __D2.timestamp = null;
                    } else {
                        if (
                            typeof input.nestedObject.timestamp === "object" &&
                            input.nestedObject.timestamp instanceof Date
                        ) {
                            __D2.timestamp = input.nestedObject.timestamp;
                        } else if (
                            typeof input.nestedObject.timestamp === "string"
                        ) {
                            __D2.timestamp = new Date(
                                input.nestedObject.timestamp,
                            );
                        } else {
                            $fallback(
                                "/nestedObject/timestamp",
                                "/properties/nestedObject/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                            );
                        }
                    }
                    if (input.nestedObject.data === null) {
                        __D2.data = null;
                    } else {
                        if (
                            typeof input.nestedObject.data === "object" &&
                            input.nestedObject.data !== null
                        ) {
                            const __D3 = {};
                            if (input.nestedObject.data.id === null) {
                                __D3.id = input.nestedObject.data.id;
                            } else {
                                if (
                                    typeof input.nestedObject.data.id ===
                                    "string"
                                ) {
                                    __D3.id = input.nestedObject.data.id;
                                } else {
                                    $fallback(
                                        "/nestedObject/data/id",
                                        "/properties/nestedObject/properties/data/properties/id/type",
                                        "Expected string at /nestedObject/data/id",
                                    );
                                }
                            }
                            if (input.nestedObject.data.timestamp === null) {
                                __D3.timestamp = null;
                            } else {
                                if (
                                    typeof input.nestedObject.data.timestamp ===
                                        "object" &&
                                    input.nestedObject.data.timestamp instanceof
                                        Date
                                ) {
                                    __D3.timestamp =
                                        input.nestedObject.data.timestamp;
                                } else if (
                                    typeof input.nestedObject.data.timestamp ===
                                    "string"
                                ) {
                                    __D3.timestamp = new Date(
                                        input.nestedObject.data.timestamp,
                                    );
                                } else {
                                    $fallback(
                                        "/nestedObject/data/timestamp",
                                        "/properties/nestedObject/properties/data/properties/timestamp",
                                        "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                                    );
                                }
                            }
                            if (input.nestedObject.data.data === null) {
                                __D3.data = null;
                            } else {
                                if (
                                    typeof input.nestedObject.data.data ===
                                        "object" &&
                                    input.nestedObject.data.data !== null
                                ) {
                                    const __D4 = {};
                                    if (
                                        input.nestedObject.data.data.id === null
                                    ) {
                                        __D4.id =
                                            input.nestedObject.data.data.id;
                                    } else {
                                        if (
                                            typeof input.nestedObject.data.data
                                                .id === "string"
                                        ) {
                                            __D4.id =
                                                input.nestedObject.data.data.id;
                                        } else {
                                            $fallback(
                                                "/nestedObject/data/data/id",
                                                "/properties/nestedObject/properties/data/properties/data/properties/id/type",
                                                "Expected string at /nestedObject/data/data/id",
                                            );
                                        }
                                    }
                                    if (
                                        input.nestedObject.data.data
                                            .timestamp === null
                                    ) {
                                        __D4.timestamp = null;
                                    } else {
                                        if (
                                            typeof input.nestedObject.data.data
                                                .timestamp === "object" &&
                                            input.nestedObject.data.data
                                                .timestamp instanceof Date
                                        ) {
                                            __D4.timestamp =
                                                input.nestedObject.data.data.timestamp;
                                        } else if (
                                            typeof input.nestedObject.data.data
                                                .timestamp === "string"
                                        ) {
                                            __D4.timestamp = new Date(
                                                input.nestedObject.data.data.timestamp,
                                            );
                                        } else {
                                            $fallback(
                                                "/nestedObject/data/data/timestamp",
                                                "/properties/nestedObject/properties/data/properties/data/properties/timestamp",
                                                "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                                            );
                                        }
                                    }
                                    __D3.data = __D4;
                                } else {
                                    $fallback(
                                        "/nestedObject/data/data",
                                        "/properties/nestedObject/properties/data/properties/data",
                                        "Expected object",
                                    );
                                }
                            }
                            __D2.data = __D3;
                        } else {
                            $fallback(
                                "/nestedObject/data",
                                "/properties/nestedObject/properties/data",
                                "Expected object",
                            );
                        }
                    }
                    __D1.nestedObject = __D2;
                } else {
                    $fallback(
                        "/nestedObject",
                        "/properties/nestedObject",
                        "Expected object",
                    );
                }
            }
            if (input.nestedArray === null) {
                __D1.nestedArray = null;
            } else {
                if (Array.isArray(input.nestedArray)) {
                    const __D2 = [];
                    for (const __D2AItem of input.nestedArray) {
                        let __D2AItemAResult;
                        if (__D2AItem === null) {
                            __D2AItemAResult = null;
                        } else {
                            if (Array.isArray(__D2AItem)) {
                                const __D3 = [];
                                for (const __D3AItem of __D2AItem) {
                                    let __D3AItemAResult;
                                    if (__D3AItem === null) {
                                        __D3AItemAResult = null;
                                    } else {
                                        if (
                                            typeof __D3AItem === "object" &&
                                            __D3AItem !== null
                                        ) {
                                            const __D4 = {};
                                            if (__D3AItem.id === null) {
                                                __D4.id = __D3AItem.id;
                                            } else {
                                                if (
                                                    typeof __D3AItem.id ===
                                                    "string"
                                                ) {
                                                    __D4.id = __D3AItem.id;
                                                } else {
                                                    $fallback(
                                                        "/nestedArray/[0]/[0]/id",
                                                        "/properties/nestedArray/elements/elements/properties/id/type",
                                                        "Expected string at /nestedArray/[0]/[0]/id",
                                                    );
                                                }
                                            }
                                            if (__D3AItem.timestamp === null) {
                                                __D4.timestamp = null;
                                            } else {
                                                if (
                                                    typeof __D3AItem.timestamp ===
                                                        "object" &&
                                                    __D3AItem.timestamp instanceof
                                                        Date
                                                ) {
                                                    __D4.timestamp =
                                                        __D3AItem.timestamp;
                                                } else if (
                                                    typeof __D3AItem.timestamp ===
                                                    "string"
                                                ) {
                                                    __D4.timestamp = new Date(
                                                        __D3AItem.timestamp,
                                                    );
                                                } else {
                                                    $fallback(
                                                        "/nestedArray/[0]/[0]/timestamp",
                                                        "/properties/nestedArray/elements/elements/properties/timestamp",
                                                        "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                                    );
                                                }
                                            }
                                            __D3AItemAResult = __D4;
                                        } else {
                                            $fallback(
                                                "/nestedArray/[0]/[0]",
                                                "/properties/nestedArray/elements/elements",
                                                "Expected object",
                                            );
                                        }
                                    }
                                    __D3.push(__D3AItemAResult);
                                }
                                __D2AItemAResult = __D3;
                            } else {
                                $fallback(
                                    "/nestedArray/[0]",
                                    "/properties/nestedArray/elements",
                                    "Expected Array",
                                );
                            }
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.nestedArray = __D2;
                } else {
                    $fallback(
                        "/nestedArray",
                        "/properties/nestedArray",
                        "Expected Array",
                    );
                }
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: ObjectWithEveryNullableType): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        if (input.any === null) {
            json += '"any":null';
        } else {
            if (typeof input.any !== "undefined") {
                json += '"any":' + JSON.stringify(input.any);
            }
        }
        if (typeof input.boolean === "boolean") {
            json += `,"boolean":${input.boolean}`;
        } else {
            json += ',"boolean":null';
        }
        if (typeof input.string === "string") {
            json += `,"string":`;
            if (input.string.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < input.string.length; i++) {
                    __point__ = input.string.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(input.string);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ += input.string.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${input.string}"`;
                    } else {
                        json += `"${__result__}${input.string.slice(__last__)}"`;
                    }
                }
            } else if (
                input.string.length < 5000 &&
                !STR_ESCAPE.test(input.string)
            ) {
                json += `"${input.string}"`;
            } else {
                json += JSON.stringify(input.string);
            }
        } else {
            json += ',"string":null';
        }
        if (
            typeof input.timestamp === "object" &&
            input.timestamp instanceof Date
        ) {
            json += `,"timestamp":"${input.timestamp.toISOString()}"`;
        } else {
            json += ',"timestamp":null';
        }
        if (typeof input.float32 === "number" && !Number.isNaN(input.float32)) {
            if (Number.isNaN(input.float32)) {
                throw new Error("Expected number at /float32 got NaN");
            }
            json += `,"float32":${input.float32}`;
        } else {
            json += ',"float32":null';
        }
        if (typeof input.float64 === "number" && !Number.isNaN(input.float64)) {
            if (Number.isNaN(input.float64)) {
                throw new Error("Expected number at /float64 got NaN");
            }
            json += `,"float64":${input.float64}`;
        } else {
            json += ',"float64":null';
        }
        if (typeof input.int8 === "number" && !Number.isNaN(input.int8)) {
            if (Number.isNaN(input.int8)) {
                throw new Error("Expected number at /int8 got NaN");
            }
            json += `,"int8":${input.int8}`;
        } else {
            json += ',"int8":null';
        }
        if (typeof input.uint8 === "number" && !Number.isNaN(input.uint8)) {
            if (Number.isNaN(input.uint8)) {
                throw new Error("Expected number at /uint8 got NaN");
            }
            json += `,"uint8":${input.uint8}`;
        } else {
            json += ',"uint8":null';
        }
        if (typeof input.int16 === "number" && !Number.isNaN(input.int16)) {
            if (Number.isNaN(input.int16)) {
                throw new Error("Expected number at /int16 got NaN");
            }
            json += `,"int16":${input.int16}`;
        } else {
            json += ',"int16":null';
        }
        if (typeof input.uint16 === "number" && !Number.isNaN(input.uint16)) {
            if (Number.isNaN(input.uint16)) {
                throw new Error("Expected number at /uint16 got NaN");
            }
            json += `,"uint16":${input.uint16}`;
        } else {
            json += ',"uint16":null';
        }
        if (typeof input.int32 === "number" && !Number.isNaN(input.int32)) {
            if (Number.isNaN(input.int32)) {
                throw new Error("Expected number at /int32 got NaN");
            }
            json += `,"int32":${input.int32}`;
        } else {
            json += ',"int32":null';
        }
        if (typeof input.uint32 === "number" && !Number.isNaN(input.uint32)) {
            if (Number.isNaN(input.uint32)) {
                throw new Error("Expected number at /uint32 got NaN");
            }
            json += `,"uint32":${input.uint32}`;
        } else {
            json += ',"uint32":null';
        }
        if (typeof input.int64 === "bigint") {
            json += `,"int64":"${input.int64.toString()}"`;
        } else {
            json += ',"int64":null';
        }
        if (typeof input.uint64 === "bigint") {
            json += `,"uint64":"${input.uint64.toString()}"`;
        } else {
            json += ',"uint64":null';
        }
        if (typeof input.enumerator === "string") {
            json += `,"enumerator":"${input.enumerator}"`;
        } else {
            json += ',"enumerator":null';
        }
        if (Array.isArray(input.array)) {
            json += ',"array":[';
            for (let i = 0; i < input.array.length; i++) {
                const inputArrayItem = input.array[i];
                if (i !== 0) {
                    json += ",";
                }
                if (typeof inputArrayItem === "boolean") {
                    json += `${inputArrayItem}`;
                } else {
                    json += "null";
                }
            }
            json += "]";
        } else {
            json += ',"array":null';
        }
        if (typeof input.object === "object" && input.object !== null) {
            json += ',"object":{';
            if (typeof input.object.string === "string") {
                json += `"string":`;
                if (input.object.string.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.object.string.length; i++) {
                        __point__ = input.object.string.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.object.string);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.object.string.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.object.string}"`;
                        } else {
                            json += `"${__result__}${input.object.string.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.object.string.length < 5000 &&
                    !STR_ESCAPE.test(input.object.string)
                ) {
                    json += `"${input.object.string}"`;
                } else {
                    json += JSON.stringify(input.object.string);
                }
            } else {
                json += '"string":null';
            }
            if (typeof input.object.boolean === "boolean") {
                json += `,"boolean":${input.object.boolean}`;
            } else {
                json += ',"boolean":null';
            }
            if (
                typeof input.object.timestamp === "object" &&
                input.object.timestamp instanceof Date
            ) {
                json += `,"timestamp":"${input.object.timestamp.toISOString()}"`;
            } else {
                json += ',"timestamp":null';
            }
            json += "}";
        } else {
            json += ',"object":null';
        }
        if (typeof input.record === "object" && input.record !== null) {
            const recordKeys = Object.keys(input.record);
            json += ',"record":{';
            for (let i = 0; i < recordKeys.length; i++) {
                const key = recordKeys[i];
                const innerVal = input.record[key];
                if (i !== 0) {
                    json += `,"${key}":`;
                } else {
                    json += `"${key}":`;
                }
                if (typeof innerVal === "boolean") {
                    json += `${innerVal}`;
                } else {
                    json += "null";
                }
            }
            json += "}";
        } else {
            json += ',"record":null';
        }
        if (
            typeof input.discriminator === "object" &&
            input.discriminator !== null
        ) {
            switch (input.discriminator.type) {
                case "A": {
                    json += ',"discriminator":{';
                    json += `"type":"A"`;
                    if (typeof input.discriminator.title === "string") {
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                    } else {
                        json += ',"title":null';
                    }
                    json += "}";
                    break;
                }
                case "B": {
                    json += ',"discriminator":{';
                    json += `"type":"B"`;
                    if (typeof input.discriminator.title === "string") {
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                    } else {
                        json += ',"title":null';
                    }
                    if (typeof input.discriminator.description === "string") {
                        json += `,"description":`;
                        if (input.discriminator.description.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.description.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.description.charCodeAt(
                                        i,
                                    );
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.description,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.description.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.description}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.description.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.description.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.description)
                        ) {
                            json += `"${input.discriminator.description}"`;
                        } else {
                            json += JSON.stringify(
                                input.discriminator.description,
                            );
                        }
                    } else {
                        json += ',"description":null';
                    }
                    json += "}";
                    break;
                }
            }
        } else {
            json += ',"discriminator":null';
        }
        if (
            typeof input.nestedObject === "object" &&
            input.nestedObject !== null
        ) {
            json += ',"nestedObject":{';
            if (typeof input.nestedObject.id === "string") {
                json += `"id":`;
                if (input.nestedObject.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.nestedObject.id.length; i++) {
                        __point__ = input.nestedObject.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.nestedObject.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.id)
                ) {
                    json += `"${input.nestedObject.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.id);
                }
            } else {
                json += '"id":null';
            }
            if (
                typeof input.nestedObject.timestamp === "object" &&
                input.nestedObject.timestamp instanceof Date
            ) {
                json += `,"timestamp":"${input.nestedObject.timestamp.toISOString()}"`;
            } else {
                json += ',"timestamp":null';
            }
            if (
                typeof input.nestedObject.data === "object" &&
                input.nestedObject.data !== null
            ) {
                json += ',"data":{';
                if (typeof input.nestedObject.data.id === "string") {
                    json += `"id":`;
                    if (input.nestedObject.data.id.length < 42) {
                        let __result__ = "";
                        let __last__ = -1;
                        let __point__ = 255;
                        let __finished__ = false;
                        for (
                            let i = 0;
                            i < input.nestedObject.data.id.length;
                            i++
                        ) {
                            __point__ =
                                input.nestedObject.data.id.charCodeAt(i);
                            if (
                                __point__ < 32 ||
                                (__point__ >= 0xd800 && __point__ <= 0xdfff)
                            ) {
                                json += JSON.stringify(
                                    input.nestedObject.data.id,
                                );
                                __finished__ = true;
                                break;
                            }
                            if (__point__ === 0x22 || __point__ === 0x5c) {
                                __last__ === -1 && (__last__ = 0);
                                __result__ +=
                                    input.nestedObject.data.id.slice(
                                        __last__,
                                        i,
                                    ) + "\\";
                                __last__ = i;
                            }
                        }
                        if (!__finished__) {
                            if (__last__ === -1) {
                                json += `"${input.nestedObject.data.id}"`;
                            } else {
                                json += `"${__result__}${input.nestedObject.data.id.slice(__last__)}"`;
                            }
                        }
                    } else if (
                        input.nestedObject.data.id.length < 5000 &&
                        !STR_ESCAPE.test(input.nestedObject.data.id)
                    ) {
                        json += `"${input.nestedObject.data.id}"`;
                    } else {
                        json += JSON.stringify(input.nestedObject.data.id);
                    }
                } else {
                    json += '"id":null';
                }
                if (
                    typeof input.nestedObject.data.timestamp === "object" &&
                    input.nestedObject.data.timestamp instanceof Date
                ) {
                    json += `,"timestamp":"${input.nestedObject.data.timestamp.toISOString()}"`;
                } else {
                    json += ',"timestamp":null';
                }
                if (
                    typeof input.nestedObject.data.data === "object" &&
                    input.nestedObject.data.data !== null
                ) {
                    json += ',"data":{';
                    if (typeof input.nestedObject.data.data.id === "string") {
                        json += `"id":`;
                        if (input.nestedObject.data.data.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.nestedObject.data.data.id.length;
                                i++
                            ) {
                                __point__ =
                                    input.nestedObject.data.data.id.charCodeAt(
                                        i,
                                    );
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.nestedObject.data.data.id,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.nestedObject.data.data.id.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.nestedObject.data.data.id}"`;
                                } else {
                                    json += `"${__result__}${input.nestedObject.data.data.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.nestedObject.data.data.id.length < 5000 &&
                            !STR_ESCAPE.test(input.nestedObject.data.data.id)
                        ) {
                            json += `"${input.nestedObject.data.data.id}"`;
                        } else {
                            json += JSON.stringify(
                                input.nestedObject.data.data.id,
                            );
                        }
                    } else {
                        json += '"id":null';
                    }
                    if (
                        typeof input.nestedObject.data.data.timestamp ===
                            "object" &&
                        input.nestedObject.data.data.timestamp instanceof Date
                    ) {
                        json += `,"timestamp":"${input.nestedObject.data.data.timestamp.toISOString()}"`;
                    } else {
                        json += ',"timestamp":null';
                    }
                    json += "}";
                } else {
                    json += ',"data":null';
                }
                json += "}";
            } else {
                json += ',"data":null';
            }
            json += "}";
        } else {
            json += ',"nestedObject":null';
        }
        if (Array.isArray(input.nestedArray)) {
            json += ',"nestedArray":[';
            for (let i = 0; i < input.nestedArray.length; i++) {
                const inputNestedArrayItem = input.nestedArray[i];
                if (i !== 0) {
                    json += ",";
                }
                if (Array.isArray(inputNestedArrayItem)) {
                    json += "[";
                    for (let i = 0; i < inputNestedArrayItem.length; i++) {
                        const inputNestedArrayItemItem =
                            inputNestedArrayItem[i];
                        if (i !== 0) {
                            json += ",";
                        }
                        if (
                            typeof inputNestedArrayItemItem === "object" &&
                            inputNestedArrayItemItem !== null
                        ) {
                            json += "{";
                            if (
                                typeof inputNestedArrayItemItem.id === "string"
                            ) {
                                json += `"id":`;
                                if (inputNestedArrayItemItem.id.length < 42) {
                                    let __result__ = "";
                                    let __last__ = -1;
                                    let __point__ = 255;
                                    let __finished__ = false;
                                    for (
                                        let i = 0;
                                        i < inputNestedArrayItemItem.id.length;
                                        i++
                                    ) {
                                        __point__ =
                                            inputNestedArrayItemItem.id.charCodeAt(
                                                i,
                                            );
                                        if (
                                            __point__ < 32 ||
                                            (__point__ >= 0xd800 &&
                                                __point__ <= 0xdfff)
                                        ) {
                                            json += JSON.stringify(
                                                inputNestedArrayItemItem.id,
                                            );
                                            __finished__ = true;
                                            break;
                                        }
                                        if (
                                            __point__ === 0x22 ||
                                            __point__ === 0x5c
                                        ) {
                                            __last__ === -1 && (__last__ = 0);
                                            __result__ +=
                                                inputNestedArrayItemItem.id.slice(
                                                    __last__,
                                                    i,
                                                ) + "\\";
                                            __last__ = i;
                                        }
                                    }
                                    if (!__finished__) {
                                        if (__last__ === -1) {
                                            json += `"${inputNestedArrayItemItem.id}"`;
                                        } else {
                                            json += `"${__result__}${inputNestedArrayItemItem.id.slice(__last__)}"`;
                                        }
                                    }
                                } else if (
                                    inputNestedArrayItemItem.id.length < 5000 &&
                                    !STR_ESCAPE.test(
                                        inputNestedArrayItemItem.id,
                                    )
                                ) {
                                    json += `"${inputNestedArrayItemItem.id}"`;
                                } else {
                                    json += JSON.stringify(
                                        inputNestedArrayItemItem.id,
                                    );
                                }
                            } else {
                                json += '"id":null';
                            }
                            if (
                                typeof inputNestedArrayItemItem.timestamp ===
                                    "object" &&
                                inputNestedArrayItemItem.timestamp instanceof
                                    Date
                            ) {
                                json += `,"timestamp":"${inputNestedArrayItemItem.timestamp.toISOString()}"`;
                            } else {
                                json += ',"timestamp":null';
                            }
                            json += "}";
                        } else {
                            json += "null";
                        }
                    }
                    json += "]";
                } else {
                    json += "null";
                }
            }
            json += "]";
        } else {
            json += ',"nestedArray":null';
        }
        json += "}";
        return json;
    },
};
export type ObjectWithEveryNullableTypeEnumerator = "A" | "B" | "C";
export interface ObjectWithEveryNullableTypeObject {
    string: string | null;
    boolean: boolean | null;
    timestamp: Date | null;
}

export type ObjectWithEveryNullableTypeRecord = Record<string, boolean>;

export type ObjectWithEveryNullableTypeDiscriminator =
    | ObjectWithEveryNullableTypeDiscriminatorA
    | ObjectWithEveryNullableTypeDiscriminatorB;

export interface ObjectWithEveryNullableTypeDiscriminatorA {
    type: "A";
    title: string | null;
}

export interface ObjectWithEveryNullableTypeDiscriminatorB {
    type: "B";
    title: string | null;
    description: string | null;
}

export interface ObjectWithEveryNullableTypeNestedObject {
    id: string | null;
    timestamp: Date | null;
    data: ObjectWithEveryNullableTypeNestedObjectData | null;
}

export interface ObjectWithEveryNullableTypeNestedObjectData {
    id: string | null;
    timestamp: Date | null;
    data: ObjectWithEveryNullableTypeNestedObjectDataData | null;
}

export interface ObjectWithEveryNullableTypeNestedObjectDataData {
    id: string | null;
    timestamp: Date | null;
}

export interface ObjectWithEveryNullableTypeNestedArrayItemItem {
    id: string | null;
    timestamp: Date | null;
}

export interface ObjectWithEveryOptionalType {
    any?: any;
    boolean?: boolean;
    string?: string;
    timestamp?: Date;
    float32?: number;
    float64?: number;
    int8?: number;
    uint8?: number;
    int16?: number;
    uint16?: number;
    int32?: number;
    uint32?: number;
    int64?: bigint;
    uint64?: bigint;
    enumerator?: ObjectWithEveryOptionalTypeEnumerator;
    array?: Array<boolean>;
    object?: ObjectWithEveryOptionalTypeObject;
    record?: ObjectWithEveryOptionalTypeRecord;
    discriminator?: ObjectWithEveryOptionalTypeDiscriminator;
    nestedObject?: ObjectWithEveryOptionalTypeNestedObject;
    nestedArray?: Array<Array<ObjectWithEveryOptionalTypeNestedArrayItemItem>>;
}
const $$ObjectWithEveryOptionalType = {
    parse(input: Record<any, any>): ObjectWithEveryOptionalType {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.any === "undefined") {
                    // ignore undefined
                } else {
                    __D1.any = json.any;
                }
                if (typeof json.boolean === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof json.boolean === "boolean") {
                        __D1.boolean = json.boolean;
                    } else {
                        $fallback(
                            "/boolean",
                            "/optionalProperties/boolean/type",
                            "Expected boolean for /boolean",
                        );
                    }
                }
                if (typeof json.string === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof json.string === "string") {
                        __D1.string = json.string;
                    } else {
                        $fallback(
                            "/string",
                            "/optionalProperties/string/type",
                            "Expected string at /string",
                        );
                    }
                }
                if (typeof json.timestamp === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.timestamp === "object" &&
                        json.timestamp instanceof Date
                    ) {
                        __D1.timestamp = json.timestamp;
                    } else if (typeof json.timestamp === "string") {
                        __D1.timestamp = new Date(json.timestamp);
                    } else {
                        $fallback(
                            "/timestamp",
                            "/optionalProperties/timestamp",
                            "Expected instanceof Date or ISO Date string at /timestamp",
                        );
                    }
                }
                if (typeof json.float32 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.float32 === "number" &&
                        !Number.isNaN(json.float32)
                    ) {
                        __D1.float32 = json.float32;
                    } else {
                        $fallback(
                            "/float32",
                            "/optionalProperties/float32/type",
                            "Expected number at /float32",
                        );
                    }
                }
                if (typeof json.float64 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.float64 === "number" &&
                        !Number.isNaN(json.float64)
                    ) {
                        __D1.float64 = json.float64;
                    } else {
                        $fallback(
                            "/float64",
                            "/optionalProperties/float64/type",
                            "Expected number at /float64",
                        );
                    }
                }
                if (typeof json.int8 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.int8 === "number" &&
                        Number.isInteger(json.int8) &&
                        json.int8 >= -128 &&
                        json.int8 <= 127
                    ) {
                        __D1.int8 = json.int8;
                    } else {
                        $fallback(
                            "/int8",
                            "/optionalProperties/int8",
                            "Expected valid integer between -128 and 127",
                        );
                    }
                }
                if (typeof json.uint8 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.uint8 === "number" &&
                        Number.isInteger(json.uint8) &&
                        json.uint8 >= 0 &&
                        json.uint8 <= 255
                    ) {
                        __D1.uint8 = json.uint8;
                    } else {
                        $fallback(
                            "/uint8",
                            "/optionalProperties/uint8",
                            "Expected valid integer between 0 and 255",
                        );
                    }
                }
                if (typeof json.int16 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.int16 === "number" &&
                        Number.isInteger(json.int16) &&
                        json.int16 >= -32768 &&
                        json.int16 <= 32767
                    ) {
                        __D1.int16 = json.int16;
                    } else {
                        $fallback(
                            "/int16",
                            "/optionalProperties/int16",
                            "Expected valid integer between -32768 and 32767",
                        );
                    }
                }
                if (typeof json.uint16 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.uint16 === "number" &&
                        Number.isInteger(json.uint16) &&
                        json.uint16 >= 0 &&
                        json.uint16 <= 65535
                    ) {
                        __D1.uint16 = json.uint16;
                    } else {
                        $fallback(
                            "/uint16",
                            "/optionalProperties/uint16",
                            "Expected valid integer between 0 and 65535",
                        );
                    }
                }
                if (typeof json.int32 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.int32 === "number" &&
                        Number.isInteger(json.int32) &&
                        json.int32 >= -2147483648 &&
                        json.int32 <= 2147483647
                    ) {
                        __D1.int32 = json.int32;
                    } else {
                        $fallback(
                            "/int32",
                            "/optionalProperties/int32",
                            "Expected valid integer between -2147483648 and 2147483647",
                        );
                    }
                }
                if (typeof json.uint32 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.uint32 === "number" &&
                        Number.isInteger(json.uint32) &&
                        json.uint32 >= 0 &&
                        json.uint32 <= 4294967295
                    ) {
                        __D1.uint32 = json.uint32;
                    } else {
                        $fallback(
                            "/uint32",
                            "/optionalProperties/uint32",
                            "Expected valid integer between 0 and 4294967295",
                        );
                    }
                }
                if (typeof json.int64 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.int64 === "string" ||
                        typeof json.int64 === "number"
                    ) {
                        try {
                            const val = BigInt(json.int64);
                            __D1.int64 = val;
                        } catch (err) {
                            $fallback(
                                "/int64",
                                "/optionalProperties/int64",
                                "Unable to parse BigInt from json.int64.",
                            );
                        }
                    } else if (typeof json.int64 === "bigint") {
                        __D1.int64 = json.int64;
                    } else {
                        $fallback(
                            "/int64",
                            "/optionalProperties/int64",
                            "Expected BigInt or Integer string. Got ${json.int64}",
                        );
                    }
                }
                if (typeof json.uint64 === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.uint64 === "string" ||
                        typeof json.uint64 === "number"
                    ) {
                        try {
                            const val = BigInt(json.uint64);
                            if (val >= BigInt("0")) {
                                __D1.uint64 = val;
                            } else {
                                $fallback(
                                    "/uint64",
                                    "/optionalProperties/uint64",
                                    "Unsigned int must be greater than or equal to 0.",
                                );
                            }
                        } catch (err) {
                            $fallback(
                                "/uint64",
                                "/optionalProperties/uint64",
                                "Unable to parse BigInt from json.uint64.",
                            );
                        }
                    } else if (typeof json.uint64 === "bigint") {
                        if (json.uint64 >= BigInt("0")) {
                            __D1.uint64 = json.uint64;
                        } else {
                            $fallback(
                                "/uint64",
                                "/optionalProperties/uint64",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } else {
                        $fallback(
                            "/uint64",
                            "/optionalProperties/uint64",
                            "Expected BigInt or Integer string. Got ${json.uint64}",
                        );
                    }
                }
                if (typeof json.enumerator === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof json.enumerator === "string") {
                        if (
                            json.enumerator === "A" ||
                            json.enumerator === "B" ||
                            json.enumerator === "C"
                        ) {
                            __D1.enumerator = json.enumerator;
                        } else {
                            $fallback(
                                "/enumerator",
                                "/optionalProperties/enumerator",
                                "Expected one of the following values: [A, B, C] at /enumerator.",
                            );
                        }
                    } else {
                        $fallback(
                            "/enumerator",
                            "/optionalProperties/enumerator",
                            "Expected one of the following values: [A, B, C] at /enumerator.",
                        );
                    }
                }
                if (typeof json.array === "undefined") {
                    // ignore undefined
                } else {
                    if (Array.isArray(json.array)) {
                        const __D2 = [];
                        for (const __D2AItem of json.array) {
                            let __D2AItemAResult;
                            if (typeof __D2AItem === "boolean") {
                                __D2AItemAResult = __D2AItem;
                            } else {
                                $fallback(
                                    "/array/[0]",
                                    "/optionalProperties/array/elements/type",
                                    "Expected boolean for /array/[0]",
                                );
                            }
                            __D2.push(__D2AItemAResult);
                        }
                        __D1.array = __D2;
                    } else {
                        $fallback(
                            "/array",
                            "/optionalProperties/array",
                            "Expected Array",
                        );
                    }
                }
                if (typeof json.object === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.object === "object" &&
                        json.object !== null
                    ) {
                        const __D2 = {};
                        if (typeof json.object.string === "string") {
                            __D2.string = json.object.string;
                        } else {
                            $fallback(
                                "/object/string",
                                "/optionalProperties/object/properties/string/type",
                                "Expected string at /object/string",
                            );
                        }
                        if (typeof json.object.boolean === "boolean") {
                            __D2.boolean = json.object.boolean;
                        } else {
                            $fallback(
                                "/object/boolean",
                                "/optionalProperties/object/properties/boolean/type",
                                "Expected boolean for /object/boolean",
                            );
                        }
                        if (
                            typeof json.object.timestamp === "object" &&
                            json.object.timestamp instanceof Date
                        ) {
                            __D2.timestamp = json.object.timestamp;
                        } else if (typeof json.object.timestamp === "string") {
                            __D2.timestamp = new Date(json.object.timestamp);
                        } else {
                            $fallback(
                                "/object/timestamp",
                                "/optionalProperties/object/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /object/timestamp",
                            );
                        }
                        __D1.object = __D2;
                    } else {
                        $fallback(
                            "/object",
                            "/optionalProperties/object",
                            "Expected object",
                        );
                    }
                }
                if (typeof json.record === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.record === "object" &&
                        json.record !== null
                    ) {
                        const __D2RResult = {};
                        for (const __D2RKey of Object.keys(json.record)) {
                            let __D2RKeyRVal;
                            if (typeof json.record[__D2RKey] === "boolean") {
                                __D2RKeyRVal = json.record[__D2RKey];
                            } else {
                                $fallback(
                                    "/record/[key]",
                                    "/optionalProperties/record/values/type",
                                    "Expected boolean for /record/[key]",
                                );
                            }
                            __D2RResult[__D2RKey] = __D2RKeyRVal;
                        }
                        __D1.record = __D2RResult;
                    } else {
                        $fallback(
                            "/record",
                            "/optionalProperties/record",
                            "Expected object.",
                        );
                    }
                }
                if (typeof json.discriminator === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.discriminator === "object" &&
                        json.discriminator !== null
                    ) {
                        switch (json.discriminator.type) {
                            case "A": {
                                if (
                                    typeof json.discriminator === "object" &&
                                    json.discriminator !== null
                                ) {
                                    const __D2 = {};
                                    __D2.type = "A";
                                    if (
                                        typeof json.discriminator.title ===
                                        "string"
                                    ) {
                                        __D2.title = json.discriminator.title;
                                    } else {
                                        $fallback(
                                            "/discriminator/title",
                                            "/optionalProperties/discriminator/mapping/properties/title/type",
                                            "Expected string at /discriminator/title",
                                        );
                                    }
                                    __D1.discriminator = __D2;
                                } else {
                                    $fallback(
                                        "/discriminator",
                                        "/optionalProperties/discriminator/mapping",
                                        "Expected object",
                                    );
                                }
                                break;
                            }
                            case "B": {
                                if (
                                    typeof json.discriminator === "object" &&
                                    json.discriminator !== null
                                ) {
                                    const __D2 = {};
                                    __D2.type = "B";
                                    if (
                                        typeof json.discriminator.title ===
                                        "string"
                                    ) {
                                        __D2.title = json.discriminator.title;
                                    } else {
                                        $fallback(
                                            "/discriminator/title",
                                            "/optionalProperties/discriminator/mapping/properties/title/type",
                                            "Expected string at /discriminator/title",
                                        );
                                    }
                                    if (
                                        typeof json.discriminator
                                            .description === "string"
                                    ) {
                                        __D2.description =
                                            json.discriminator.description;
                                    } else {
                                        $fallback(
                                            "/discriminator/description",
                                            "/optionalProperties/discriminator/mapping/properties/description/type",
                                            "Expected string at /discriminator/description",
                                        );
                                    }
                                    __D1.discriminator = __D2;
                                } else {
                                    $fallback(
                                        "/discriminator",
                                        "/optionalProperties/discriminator/mapping",
                                        "Expected object",
                                    );
                                }
                                break;
                            }
                            default:
                                $fallback(
                                    "/discriminator",
                                    "/optionalProperties/discriminator/mapping",
                                    "json.discriminator.type did not match one of the specified values",
                                );
                                break;
                        }
                    } else {
                        $fallback(
                            "/discriminator",
                            "/optionalProperties/discriminator",
                            "Expected Object.",
                        );
                    }
                }
                if (typeof json.nestedObject === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof json.nestedObject === "object" &&
                        json.nestedObject !== null
                    ) {
                        const __D2 = {};
                        if (typeof json.nestedObject.id === "string") {
                            __D2.id = json.nestedObject.id;
                        } else {
                            $fallback(
                                "/nestedObject/id",
                                "/optionalProperties/nestedObject/properties/id/type",
                                "Expected string at /nestedObject/id",
                            );
                        }
                        if (
                            typeof json.nestedObject.timestamp === "object" &&
                            json.nestedObject.timestamp instanceof Date
                        ) {
                            __D2.timestamp = json.nestedObject.timestamp;
                        } else if (
                            typeof json.nestedObject.timestamp === "string"
                        ) {
                            __D2.timestamp = new Date(
                                json.nestedObject.timestamp,
                            );
                        } else {
                            $fallback(
                                "/nestedObject/timestamp",
                                "/optionalProperties/nestedObject/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                            );
                        }
                        if (
                            typeof json.nestedObject.data === "object" &&
                            json.nestedObject.data !== null
                        ) {
                            const __D3 = {};
                            if (typeof json.nestedObject.data.id === "string") {
                                __D3.id = json.nestedObject.data.id;
                            } else {
                                $fallback(
                                    "/nestedObject/data/id",
                                    "/optionalProperties/nestedObject/properties/data/properties/id/type",
                                    "Expected string at /nestedObject/data/id",
                                );
                            }
                            if (
                                typeof json.nestedObject.data.timestamp ===
                                    "object" &&
                                json.nestedObject.data.timestamp instanceof Date
                            ) {
                                __D3.timestamp =
                                    json.nestedObject.data.timestamp;
                            } else if (
                                typeof json.nestedObject.data.timestamp ===
                                "string"
                            ) {
                                __D3.timestamp = new Date(
                                    json.nestedObject.data.timestamp,
                                );
                            } else {
                                $fallback(
                                    "/nestedObject/data/timestamp",
                                    "/optionalProperties/nestedObject/properties/data/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                                );
                            }
                            if (
                                typeof json.nestedObject.data.data ===
                                    "object" &&
                                json.nestedObject.data.data !== null
                            ) {
                                const __D4 = {};
                                if (
                                    typeof json.nestedObject.data.data.id ===
                                    "string"
                                ) {
                                    __D4.id = json.nestedObject.data.data.id;
                                } else {
                                    $fallback(
                                        "/nestedObject/data/data/id",
                                        "/optionalProperties/nestedObject/properties/data/properties/data/properties/id/type",
                                        "Expected string at /nestedObject/data/data/id",
                                    );
                                }
                                if (
                                    typeof json.nestedObject.data.data
                                        .timestamp === "object" &&
                                    json.nestedObject.data.data
                                        .timestamp instanceof Date
                                ) {
                                    __D4.timestamp =
                                        json.nestedObject.data.data.timestamp;
                                } else if (
                                    typeof json.nestedObject.data.data
                                        .timestamp === "string"
                                ) {
                                    __D4.timestamp = new Date(
                                        json.nestedObject.data.data.timestamp,
                                    );
                                } else {
                                    $fallback(
                                        "/nestedObject/data/data/timestamp",
                                        "/optionalProperties/nestedObject/properties/data/properties/data/properties/timestamp",
                                        "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                                    );
                                }
                                __D3.data = __D4;
                            } else {
                                $fallback(
                                    "/nestedObject/data/data",
                                    "/optionalProperties/nestedObject/properties/data/properties/data",
                                    "Expected object",
                                );
                            }
                            __D2.data = __D3;
                        } else {
                            $fallback(
                                "/nestedObject/data",
                                "/optionalProperties/nestedObject/properties/data",
                                "Expected object",
                            );
                        }
                        __D1.nestedObject = __D2;
                    } else {
                        $fallback(
                            "/nestedObject",
                            "/optionalProperties/nestedObject",
                            "Expected object",
                        );
                    }
                }
                if (typeof json.nestedArray === "undefined") {
                    // ignore undefined
                } else {
                    if (Array.isArray(json.nestedArray)) {
                        const __D2 = [];
                        for (const __D2AItem of json.nestedArray) {
                            let __D2AItemAResult;
                            if (Array.isArray(__D2AItem)) {
                                const __D3 = [];
                                for (const __D3AItem of __D2AItem) {
                                    let __D3AItemAResult;
                                    if (
                                        typeof __D3AItem === "object" &&
                                        __D3AItem !== null
                                    ) {
                                        const __D4 = {};
                                        if (typeof __D3AItem.id === "string") {
                                            __D4.id = __D3AItem.id;
                                        } else {
                                            $fallback(
                                                "/nestedArray/[0]/[0]/id",
                                                "/optionalProperties/nestedArray/elements/elements/properties/id/type",
                                                "Expected string at /nestedArray/[0]/[0]/id",
                                            );
                                        }
                                        if (
                                            typeof __D3AItem.timestamp ===
                                                "object" &&
                                            __D3AItem.timestamp instanceof Date
                                        ) {
                                            __D4.timestamp =
                                                __D3AItem.timestamp;
                                        } else if (
                                            typeof __D3AItem.timestamp ===
                                            "string"
                                        ) {
                                            __D4.timestamp = new Date(
                                                __D3AItem.timestamp,
                                            );
                                        } else {
                                            $fallback(
                                                "/nestedArray/[0]/[0]/timestamp",
                                                "/optionalProperties/nestedArray/elements/elements/properties/timestamp",
                                                "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                            );
                                        }
                                        __D3AItemAResult = __D4;
                                    } else {
                                        $fallback(
                                            "/nestedArray/[0]/[0]",
                                            "/optionalProperties/nestedArray/elements/elements",
                                            "Expected object",
                                        );
                                    }
                                    __D3.push(__D3AItemAResult);
                                }
                                __D2AItemAResult = __D3;
                            } else {
                                $fallback(
                                    "/nestedArray/[0]",
                                    "/optionalProperties/nestedArray/elements",
                                    "Expected Array",
                                );
                            }
                            __D2.push(__D2AItemAResult);
                        }
                        __D1.nestedArray = __D2;
                    } else {
                        $fallback(
                            "/nestedArray",
                            "/optionalProperties/nestedArray",
                            "Expected Array",
                        );
                    }
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.any === "undefined") {
                // ignore undefined
            } else {
                __D1.any = input.any;
            }
            if (typeof input.boolean === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.boolean === "boolean") {
                    __D1.boolean = input.boolean;
                } else {
                    $fallback(
                        "/boolean",
                        "/optionalProperties/boolean/type",
                        "Expected boolean for /boolean",
                    );
                }
            }
            if (typeof input.string === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.string === "string") {
                    __D1.string = input.string;
                } else {
                    $fallback(
                        "/string",
                        "/optionalProperties/string/type",
                        "Expected string at /string",
                    );
                }
            }
            if (typeof input.timestamp === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.timestamp === "object" &&
                    input.timestamp instanceof Date
                ) {
                    __D1.timestamp = input.timestamp;
                } else if (typeof input.timestamp === "string") {
                    __D1.timestamp = new Date(input.timestamp);
                } else {
                    $fallback(
                        "/timestamp",
                        "/optionalProperties/timestamp",
                        "Expected instanceof Date or ISO Date string at /timestamp",
                    );
                }
            }
            if (typeof input.float32 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.float32 === "number" &&
                    !Number.isNaN(input.float32)
                ) {
                    __D1.float32 = input.float32;
                } else {
                    $fallback(
                        "/float32",
                        "/optionalProperties/float32/type",
                        "Expected number at /float32",
                    );
                }
            }
            if (typeof input.float64 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.float64 === "number" &&
                    !Number.isNaN(input.float64)
                ) {
                    __D1.float64 = input.float64;
                } else {
                    $fallback(
                        "/float64",
                        "/optionalProperties/float64/type",
                        "Expected number at /float64",
                    );
                }
            }
            if (typeof input.int8 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.int8 === "number" &&
                    Number.isInteger(input.int8) &&
                    input.int8 >= -128 &&
                    input.int8 <= 127
                ) {
                    __D1.int8 = input.int8;
                } else {
                    $fallback(
                        "/int8",
                        "/optionalProperties/int8",
                        "Expected valid integer between -128 and 127",
                    );
                }
            }
            if (typeof input.uint8 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.uint8 === "number" &&
                    Number.isInteger(input.uint8) &&
                    input.uint8 >= 0 &&
                    input.uint8 <= 255
                ) {
                    __D1.uint8 = input.uint8;
                } else {
                    $fallback(
                        "/uint8",
                        "/optionalProperties/uint8",
                        "Expected valid integer between 0 and 255",
                    );
                }
            }
            if (typeof input.int16 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.int16 === "number" &&
                    Number.isInteger(input.int16) &&
                    input.int16 >= -32768 &&
                    input.int16 <= 32767
                ) {
                    __D1.int16 = input.int16;
                } else {
                    $fallback(
                        "/int16",
                        "/optionalProperties/int16",
                        "Expected valid integer between -32768 and 32767",
                    );
                }
            }
            if (typeof input.uint16 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.uint16 === "number" &&
                    Number.isInteger(input.uint16) &&
                    input.uint16 >= 0 &&
                    input.uint16 <= 65535
                ) {
                    __D1.uint16 = input.uint16;
                } else {
                    $fallback(
                        "/uint16",
                        "/optionalProperties/uint16",
                        "Expected valid integer between 0 and 65535",
                    );
                }
            }
            if (typeof input.int32 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.int32 === "number" &&
                    Number.isInteger(input.int32) &&
                    input.int32 >= -2147483648 &&
                    input.int32 <= 2147483647
                ) {
                    __D1.int32 = input.int32;
                } else {
                    $fallback(
                        "/int32",
                        "/optionalProperties/int32",
                        "Expected valid integer between -2147483648 and 2147483647",
                    );
                }
            }
            if (typeof input.uint32 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.uint32 === "number" &&
                    Number.isInteger(input.uint32) &&
                    input.uint32 >= 0 &&
                    input.uint32 <= 4294967295
                ) {
                    __D1.uint32 = input.uint32;
                } else {
                    $fallback(
                        "/uint32",
                        "/optionalProperties/uint32",
                        "Expected valid integer between 0 and 4294967295",
                    );
                }
            }
            if (typeof input.int64 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.int64 === "string" ||
                    typeof input.int64 === "number"
                ) {
                    try {
                        const val = BigInt(input.int64);
                        __D1.int64 = val;
                    } catch (err) {
                        $fallback(
                            "/int64",
                            "/optionalProperties/int64",
                            "Unable to parse BigInt from input.int64.",
                        );
                    }
                } else if (typeof input.int64 === "bigint") {
                    __D1.int64 = input.int64;
                } else {
                    $fallback(
                        "/int64",
                        "/optionalProperties/int64",
                        "Expected BigInt or Integer string. Got ${input.int64}",
                    );
                }
            }
            if (typeof input.uint64 === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.uint64 === "string" ||
                    typeof input.uint64 === "number"
                ) {
                    try {
                        const val = BigInt(input.uint64);
                        if (val >= BigInt("0")) {
                            __D1.uint64 = val;
                        } else {
                            $fallback(
                                "/uint64",
                                "/optionalProperties/uint64",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } catch (err) {
                        $fallback(
                            "/uint64",
                            "/optionalProperties/uint64",
                            "Unable to parse BigInt from input.uint64.",
                        );
                    }
                } else if (typeof input.uint64 === "bigint") {
                    if (input.uint64 >= BigInt("0")) {
                        __D1.uint64 = input.uint64;
                    } else {
                        $fallback(
                            "/uint64",
                            "/optionalProperties/uint64",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } else {
                    $fallback(
                        "/uint64",
                        "/optionalProperties/uint64",
                        "Expected BigInt or Integer string. Got ${input.uint64}",
                    );
                }
            }
            if (typeof input.enumerator === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.enumerator === "string") {
                    if (
                        input.enumerator === "A" ||
                        input.enumerator === "B" ||
                        input.enumerator === "C"
                    ) {
                        __D1.enumerator = input.enumerator;
                    } else {
                        $fallback(
                            "/enumerator",
                            "/optionalProperties/enumerator",
                            "Expected one of the following values: [A, B, C] at /enumerator.",
                        );
                    }
                } else {
                    $fallback(
                        "/enumerator",
                        "/optionalProperties/enumerator",
                        "Expected one of the following values: [A, B, C] at /enumerator.",
                    );
                }
            }
            if (typeof input.array === "undefined") {
                // ignore undefined
            } else {
                if (Array.isArray(input.array)) {
                    const __D2 = [];
                    for (const __D2AItem of input.array) {
                        let __D2AItemAResult;
                        if (typeof __D2AItem === "boolean") {
                            __D2AItemAResult = __D2AItem;
                        } else {
                            $fallback(
                                "/array/[0]",
                                "/optionalProperties/array/elements/type",
                                "Expected boolean for /array/[0]",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.array = __D2;
                } else {
                    $fallback(
                        "/array",
                        "/optionalProperties/array",
                        "Expected Array",
                    );
                }
            }
            if (typeof input.object === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.object === "object" && input.object !== null) {
                    const __D2 = {};
                    if (typeof input.object.string === "string") {
                        __D2.string = input.object.string;
                    } else {
                        $fallback(
                            "/object/string",
                            "/optionalProperties/object/properties/string/type",
                            "Expected string at /object/string",
                        );
                    }
                    if (typeof input.object.boolean === "boolean") {
                        __D2.boolean = input.object.boolean;
                    } else {
                        $fallback(
                            "/object/boolean",
                            "/optionalProperties/object/properties/boolean/type",
                            "Expected boolean for /object/boolean",
                        );
                    }
                    if (
                        typeof input.object.timestamp === "object" &&
                        input.object.timestamp instanceof Date
                    ) {
                        __D2.timestamp = input.object.timestamp;
                    } else if (typeof input.object.timestamp === "string") {
                        __D2.timestamp = new Date(input.object.timestamp);
                    } else {
                        $fallback(
                            "/object/timestamp",
                            "/optionalProperties/object/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /object/timestamp",
                        );
                    }
                    __D1.object = __D2;
                } else {
                    $fallback(
                        "/object",
                        "/optionalProperties/object",
                        "Expected object",
                    );
                }
            }
            if (typeof input.record === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.record === "object" && input.record !== null) {
                    const __D2RResult = {};
                    for (const __D2RKey of Object.keys(input.record)) {
                        let __D2RKeyRVal;
                        if (typeof input.record[__D2RKey] === "boolean") {
                            __D2RKeyRVal = input.record[__D2RKey];
                        } else {
                            $fallback(
                                "/record/[key]",
                                "/optionalProperties/record/values/type",
                                "Expected boolean for /record/[key]",
                            );
                        }
                        __D2RResult[__D2RKey] = __D2RKeyRVal;
                    }
                    __D1.record = __D2RResult;
                } else {
                    $fallback(
                        "/record",
                        "/optionalProperties/record",
                        "Expected object.",
                    );
                }
            }
            if (typeof input.discriminator === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.discriminator === "object" &&
                    input.discriminator !== null
                ) {
                    switch (input.discriminator.type) {
                        case "A": {
                            if (
                                typeof input.discriminator === "object" &&
                                input.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "A";
                                if (
                                    typeof input.discriminator.title ===
                                    "string"
                                ) {
                                    __D2.title = input.discriminator.title;
                                } else {
                                    $fallback(
                                        "/discriminator/title",
                                        "/optionalProperties/discriminator/mapping/properties/title/type",
                                        "Expected string at /discriminator/title",
                                    );
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/optionalProperties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        case "B": {
                            if (
                                typeof input.discriminator === "object" &&
                                input.discriminator !== null
                            ) {
                                const __D2 = {};
                                __D2.type = "B";
                                if (
                                    typeof input.discriminator.title ===
                                    "string"
                                ) {
                                    __D2.title = input.discriminator.title;
                                } else {
                                    $fallback(
                                        "/discriminator/title",
                                        "/optionalProperties/discriminator/mapping/properties/title/type",
                                        "Expected string at /discriminator/title",
                                    );
                                }
                                if (
                                    typeof input.discriminator.description ===
                                    "string"
                                ) {
                                    __D2.description =
                                        input.discriminator.description;
                                } else {
                                    $fallback(
                                        "/discriminator/description",
                                        "/optionalProperties/discriminator/mapping/properties/description/type",
                                        "Expected string at /discriminator/description",
                                    );
                                }
                                __D1.discriminator = __D2;
                            } else {
                                $fallback(
                                    "/discriminator",
                                    "/optionalProperties/discriminator/mapping",
                                    "Expected object",
                                );
                            }
                            break;
                        }
                        default:
                            $fallback(
                                "/discriminator",
                                "/optionalProperties/discriminator/mapping",
                                "input.discriminator.type did not match one of the specified values",
                            );
                            break;
                    }
                } else {
                    $fallback(
                        "/discriminator",
                        "/optionalProperties/discriminator",
                        "Expected Object.",
                    );
                }
            }
            if (typeof input.nestedObject === "undefined") {
                // ignore undefined
            } else {
                if (
                    typeof input.nestedObject === "object" &&
                    input.nestedObject !== null
                ) {
                    const __D2 = {};
                    if (typeof input.nestedObject.id === "string") {
                        __D2.id = input.nestedObject.id;
                    } else {
                        $fallback(
                            "/nestedObject/id",
                            "/optionalProperties/nestedObject/properties/id/type",
                            "Expected string at /nestedObject/id",
                        );
                    }
                    if (
                        typeof input.nestedObject.timestamp === "object" &&
                        input.nestedObject.timestamp instanceof Date
                    ) {
                        __D2.timestamp = input.nestedObject.timestamp;
                    } else if (
                        typeof input.nestedObject.timestamp === "string"
                    ) {
                        __D2.timestamp = new Date(input.nestedObject.timestamp);
                    } else {
                        $fallback(
                            "/nestedObject/timestamp",
                            "/optionalProperties/nestedObject/properties/timestamp",
                            "Expected instanceof Date or ISO Date string at /nestedObject/timestamp",
                        );
                    }
                    if (
                        typeof input.nestedObject.data === "object" &&
                        input.nestedObject.data !== null
                    ) {
                        const __D3 = {};
                        if (typeof input.nestedObject.data.id === "string") {
                            __D3.id = input.nestedObject.data.id;
                        } else {
                            $fallback(
                                "/nestedObject/data/id",
                                "/optionalProperties/nestedObject/properties/data/properties/id/type",
                                "Expected string at /nestedObject/data/id",
                            );
                        }
                        if (
                            typeof input.nestedObject.data.timestamp ===
                                "object" &&
                            input.nestedObject.data.timestamp instanceof Date
                        ) {
                            __D3.timestamp = input.nestedObject.data.timestamp;
                        } else if (
                            typeof input.nestedObject.data.timestamp ===
                            "string"
                        ) {
                            __D3.timestamp = new Date(
                                input.nestedObject.data.timestamp,
                            );
                        } else {
                            $fallback(
                                "/nestedObject/data/timestamp",
                                "/optionalProperties/nestedObject/properties/data/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /nestedObject/data/timestamp",
                            );
                        }
                        if (
                            typeof input.nestedObject.data.data === "object" &&
                            input.nestedObject.data.data !== null
                        ) {
                            const __D4 = {};
                            if (
                                typeof input.nestedObject.data.data.id ===
                                "string"
                            ) {
                                __D4.id = input.nestedObject.data.data.id;
                            } else {
                                $fallback(
                                    "/nestedObject/data/data/id",
                                    "/optionalProperties/nestedObject/properties/data/properties/data/properties/id/type",
                                    "Expected string at /nestedObject/data/data/id",
                                );
                            }
                            if (
                                typeof input.nestedObject.data.data
                                    .timestamp === "object" &&
                                input.nestedObject.data.data
                                    .timestamp instanceof Date
                            ) {
                                __D4.timestamp =
                                    input.nestedObject.data.data.timestamp;
                            } else if (
                                typeof input.nestedObject.data.data
                                    .timestamp === "string"
                            ) {
                                __D4.timestamp = new Date(
                                    input.nestedObject.data.data.timestamp,
                                );
                            } else {
                                $fallback(
                                    "/nestedObject/data/data/timestamp",
                                    "/optionalProperties/nestedObject/properties/data/properties/data/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /nestedObject/data/data/timestamp",
                                );
                            }
                            __D3.data = __D4;
                        } else {
                            $fallback(
                                "/nestedObject/data/data",
                                "/optionalProperties/nestedObject/properties/data/properties/data",
                                "Expected object",
                            );
                        }
                        __D2.data = __D3;
                    } else {
                        $fallback(
                            "/nestedObject/data",
                            "/optionalProperties/nestedObject/properties/data",
                            "Expected object",
                        );
                    }
                    __D1.nestedObject = __D2;
                } else {
                    $fallback(
                        "/nestedObject",
                        "/optionalProperties/nestedObject",
                        "Expected object",
                    );
                }
            }
            if (typeof input.nestedArray === "undefined") {
                // ignore undefined
            } else {
                if (Array.isArray(input.nestedArray)) {
                    const __D2 = [];
                    for (const __D2AItem of input.nestedArray) {
                        let __D2AItemAResult;
                        if (Array.isArray(__D2AItem)) {
                            const __D3 = [];
                            for (const __D3AItem of __D2AItem) {
                                let __D3AItemAResult;
                                if (
                                    typeof __D3AItem === "object" &&
                                    __D3AItem !== null
                                ) {
                                    const __D4 = {};
                                    if (typeof __D3AItem.id === "string") {
                                        __D4.id = __D3AItem.id;
                                    } else {
                                        $fallback(
                                            "/nestedArray/[0]/[0]/id",
                                            "/optionalProperties/nestedArray/elements/elements/properties/id/type",
                                            "Expected string at /nestedArray/[0]/[0]/id",
                                        );
                                    }
                                    if (
                                        typeof __D3AItem.timestamp ===
                                            "object" &&
                                        __D3AItem.timestamp instanceof Date
                                    ) {
                                        __D4.timestamp = __D3AItem.timestamp;
                                    } else if (
                                        typeof __D3AItem.timestamp === "string"
                                    ) {
                                        __D4.timestamp = new Date(
                                            __D3AItem.timestamp,
                                        );
                                    } else {
                                        $fallback(
                                            "/nestedArray/[0]/[0]/timestamp",
                                            "/optionalProperties/nestedArray/elements/elements/properties/timestamp",
                                            "Expected instanceof Date or ISO Date string at /nestedArray/[0]/[0]/timestamp",
                                        );
                                    }
                                    __D3AItemAResult = __D4;
                                } else {
                                    $fallback(
                                        "/nestedArray/[0]/[0]",
                                        "/optionalProperties/nestedArray/elements/elements",
                                        "Expected object",
                                    );
                                }
                                __D3.push(__D3AItemAResult);
                            }
                            __D2AItemAResult = __D3;
                        } else {
                            $fallback(
                                "/nestedArray/[0]",
                                "/optionalProperties/nestedArray/elements",
                                "Expected Array",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.nestedArray = __D2;
                } else {
                    $fallback(
                        "/nestedArray",
                        "/optionalProperties/nestedArray",
                        "Expected Array",
                    );
                }
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: ObjectWithEveryOptionalType): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        let inputHasFields = false;
        if (typeof input.any !== "undefined") {
            if (inputHasFields) {
                if (typeof input.any !== "undefined") {
                    json += ',"any":' + JSON.stringify(input.any);
                }
            } else {
                if (typeof input.any !== "undefined") {
                    json += '"any":' + JSON.stringify(input.any);
                }
                inputHasFields = true;
            }
        }
        if (typeof input.boolean !== "undefined") {
            if (inputHasFields) {
                json += `,"boolean":${input.boolean}`;
            } else {
                json += `"boolean":${input.boolean}`;
                inputHasFields = true;
            }
        }
        if (typeof input.string !== "undefined") {
            if (inputHasFields) {
                json += `,"string":`;
                if (input.string.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.string.length; i++) {
                        __point__ = input.string.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.string);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.string.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.string}"`;
                        } else {
                            json += `"${__result__}${input.string.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.string.length < 5000 &&
                    !STR_ESCAPE.test(input.string)
                ) {
                    json += `"${input.string}"`;
                } else {
                    json += JSON.stringify(input.string);
                }
            } else {
                json += `"string":`;
                if (input.string.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.string.length; i++) {
                        __point__ = input.string.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.string);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.string.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.string}"`;
                        } else {
                            json += `"${__result__}${input.string.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.string.length < 5000 &&
                    !STR_ESCAPE.test(input.string)
                ) {
                    json += `"${input.string}"`;
                } else {
                    json += JSON.stringify(input.string);
                }
                inputHasFields = true;
            }
        }
        if (typeof input.timestamp !== "undefined") {
            if (inputHasFields) {
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
            } else {
                json += `"timestamp":"${input.timestamp.toISOString()}"`;
                inputHasFields = true;
            }
        }
        if (typeof input.float32 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.float32)) {
                    throw new Error("Expected number at /float32 got NaN");
                }
                json += `,"float32":${input.float32}`;
            } else {
                if (Number.isNaN(input.float32)) {
                    throw new Error("Expected number at /float32 got NaN");
                }
                json += `"float32":${input.float32}`;
                inputHasFields = true;
            }
        }
        if (typeof input.float64 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.float64)) {
                    throw new Error("Expected number at /float64 got NaN");
                }
                json += `,"float64":${input.float64}`;
            } else {
                if (Number.isNaN(input.float64)) {
                    throw new Error("Expected number at /float64 got NaN");
                }
                json += `"float64":${input.float64}`;
                inputHasFields = true;
            }
        }
        if (typeof input.int8 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.int8)) {
                    throw new Error("Expected number at /int8 got NaN");
                }
                json += `,"int8":${input.int8}`;
            } else {
                if (Number.isNaN(input.int8)) {
                    throw new Error("Expected number at /int8 got NaN");
                }
                json += `"int8":${input.int8}`;
                inputHasFields = true;
            }
        }
        if (typeof input.uint8 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.uint8)) {
                    throw new Error("Expected number at /uint8 got NaN");
                }
                json += `,"uint8":${input.uint8}`;
            } else {
                if (Number.isNaN(input.uint8)) {
                    throw new Error("Expected number at /uint8 got NaN");
                }
                json += `"uint8":${input.uint8}`;
                inputHasFields = true;
            }
        }
        if (typeof input.int16 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.int16)) {
                    throw new Error("Expected number at /int16 got NaN");
                }
                json += `,"int16":${input.int16}`;
            } else {
                if (Number.isNaN(input.int16)) {
                    throw new Error("Expected number at /int16 got NaN");
                }
                json += `"int16":${input.int16}`;
                inputHasFields = true;
            }
        }
        if (typeof input.uint16 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.uint16)) {
                    throw new Error("Expected number at /uint16 got NaN");
                }
                json += `,"uint16":${input.uint16}`;
            } else {
                if (Number.isNaN(input.uint16)) {
                    throw new Error("Expected number at /uint16 got NaN");
                }
                json += `"uint16":${input.uint16}`;
                inputHasFields = true;
            }
        }
        if (typeof input.int32 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.int32)) {
                    throw new Error("Expected number at /int32 got NaN");
                }
                json += `,"int32":${input.int32}`;
            } else {
                if (Number.isNaN(input.int32)) {
                    throw new Error("Expected number at /int32 got NaN");
                }
                json += `"int32":${input.int32}`;
                inputHasFields = true;
            }
        }
        if (typeof input.uint32 !== "undefined") {
            if (inputHasFields) {
                if (Number.isNaN(input.uint32)) {
                    throw new Error("Expected number at /uint32 got NaN");
                }
                json += `,"uint32":${input.uint32}`;
            } else {
                if (Number.isNaN(input.uint32)) {
                    throw new Error("Expected number at /uint32 got NaN");
                }
                json += `"uint32":${input.uint32}`;
                inputHasFields = true;
            }
        }
        if (typeof input.int64 !== "undefined") {
            if (inputHasFields) {
                json += `,"int64":"${input.int64.toString()}"`;
            } else {
                json += `"int64":"${input.int64.toString()}"`;
                inputHasFields = true;
            }
        }
        if (typeof input.uint64 !== "undefined") {
            if (inputHasFields) {
                json += `,"uint64":"${input.uint64.toString()}"`;
            } else {
                json += `"uint64":"${input.uint64.toString()}"`;
                inputHasFields = true;
            }
        }
        if (typeof input.enumerator !== "undefined") {
            if (inputHasFields) {
                json += `,"enumerator":"${input.enumerator}"`;
            } else {
                json += `"enumerator":"${input.enumerator}"`;
                inputHasFields = true;
            }
        }
        if (typeof input.array !== "undefined") {
            if (inputHasFields) {
                json += ',"array":[';
                for (let i = 0; i < input.array.length; i++) {
                    const inputArrayItem = input.array[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += `${inputArrayItem}`;
                }
                json += "]";
            } else {
                json += '"array":[';
                for (let i = 0; i < input.array.length; i++) {
                    const inputArrayItem = input.array[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += `${inputArrayItem}`;
                }
                json += "]";
                inputHasFields = true;
            }
        }
        if (typeof input.object !== "undefined") {
            if (inputHasFields) {
                json += ',"object":{';
                json += `"string":`;
                if (input.object.string.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.object.string.length; i++) {
                        __point__ = input.object.string.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.object.string);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.object.string.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.object.string}"`;
                        } else {
                            json += `"${__result__}${input.object.string.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.object.string.length < 5000 &&
                    !STR_ESCAPE.test(input.object.string)
                ) {
                    json += `"${input.object.string}"`;
                } else {
                    json += JSON.stringify(input.object.string);
                }
                json += `,"boolean":${input.object.boolean}`;
                json += `,"timestamp":"${input.object.timestamp.toISOString()}"`;
                json += "}";
            } else {
                json += '"object":{';
                json += `"string":`;
                if (input.object.string.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.object.string.length; i++) {
                        __point__ = input.object.string.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.object.string);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.object.string.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.object.string}"`;
                        } else {
                            json += `"${__result__}${input.object.string.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.object.string.length < 5000 &&
                    !STR_ESCAPE.test(input.object.string)
                ) {
                    json += `"${input.object.string}"`;
                } else {
                    json += JSON.stringify(input.object.string);
                }
                json += `,"boolean":${input.object.boolean}`;
                json += `,"timestamp":"${input.object.timestamp.toISOString()}"`;
                json += "}";
                inputHasFields = true;
            }
        }
        if (typeof input.record !== "undefined") {
            if (inputHasFields) {
                const recordKeys = Object.keys(input.record);
                json += ',"record":{';
                for (let i = 0; i < recordKeys.length; i++) {
                    const key = recordKeys[i];
                    const innerVal = input.record[key];
                    if (i !== 0) {
                        json += `,"${key}":`;
                    } else {
                        json += `"${key}":`;
                    }
                    json += `${innerVal}`;
                }
                json += "}";
            } else {
                const recordKeys = Object.keys(input.record);
                json += '"record":{';
                for (let i = 0; i < recordKeys.length; i++) {
                    const key = recordKeys[i];
                    const innerVal = input.record[key];
                    if (i !== 0) {
                        json += `,"${key}":`;
                    } else {
                        json += `"${key}":`;
                    }
                    json += `${innerVal}`;
                }
                json += "}";
                inputHasFields = true;
            }
        }
        if (typeof input.discriminator !== "undefined") {
            if (inputHasFields) {
                switch (input.discriminator.type) {
                    case "A": {
                        json += ',"discriminator":{';
                        json += `"type":"A"`;
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                        json += "}";
                        break;
                    }
                    case "B": {
                        json += ',"discriminator":{';
                        json += `"type":"B"`;
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                        json += `,"description":`;
                        if (input.discriminator.description.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.description.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.description.charCodeAt(
                                        i,
                                    );
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.description,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.description.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.description}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.description.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.description.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.description)
                        ) {
                            json += `"${input.discriminator.description}"`;
                        } else {
                            json += JSON.stringify(
                                input.discriminator.description,
                            );
                        }
                        json += "}";
                        break;
                    }
                }
            } else {
                switch (input.discriminator.type) {
                    case "A": {
                        json += '"discriminator":{';
                        json += `"type":"A"`;
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                        json += "}";
                        break;
                    }
                    case "B": {
                        json += '"discriminator":{';
                        json += `"type":"B"`;
                        json += `,"title":`;
                        if (input.discriminator.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.title.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.title,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.title.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.title}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.title.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.title)
                        ) {
                            json += `"${input.discriminator.title}"`;
                        } else {
                            json += JSON.stringify(input.discriminator.title);
                        }
                        json += `,"description":`;
                        if (input.discriminator.description.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.discriminator.description.length;
                                i++
                            ) {
                                __point__ =
                                    input.discriminator.description.charCodeAt(
                                        i,
                                    );
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.discriminator.description,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.discriminator.description.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.discriminator.description}"`;
                                } else {
                                    json += `"${__result__}${input.discriminator.description.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.discriminator.description.length < 5000 &&
                            !STR_ESCAPE.test(input.discriminator.description)
                        ) {
                            json += `"${input.discriminator.description}"`;
                        } else {
                            json += JSON.stringify(
                                input.discriminator.description,
                            );
                        }
                        json += "}";
                        break;
                    }
                }
                inputHasFields = true;
            }
        }
        if (typeof input.nestedObject !== "undefined") {
            if (inputHasFields) {
                json += ',"nestedObject":{';
                json += `"id":`;
                if (input.nestedObject.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.nestedObject.id.length; i++) {
                        __point__ = input.nestedObject.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.nestedObject.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.id)
                ) {
                    json += `"${input.nestedObject.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.id);
                }
                json += `,"timestamp":"${input.nestedObject.timestamp.toISOString()}"`;
                json += ',"data":{';
                json += `"id":`;
                if (input.nestedObject.data.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.nestedObject.data.id.length;
                        i++
                    ) {
                        __point__ = input.nestedObject.data.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.nestedObject.data.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.data.id.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.data.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.data.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.data.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.data.id)
                ) {
                    json += `"${input.nestedObject.data.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.data.id);
                }
                json += `,"timestamp":"${input.nestedObject.data.timestamp.toISOString()}"`;
                json += ',"data":{';
                json += `"id":`;
                if (input.nestedObject.data.data.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.nestedObject.data.data.id.length;
                        i++
                    ) {
                        __point__ =
                            input.nestedObject.data.data.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(
                                input.nestedObject.data.data.id,
                            );
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.data.data.id.slice(
                                    __last__,
                                    i,
                                ) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.data.data.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.data.data.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.data.data.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.data.data.id)
                ) {
                    json += `"${input.nestedObject.data.data.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.data.data.id);
                }
                json += `,"timestamp":"${input.nestedObject.data.data.timestamp.toISOString()}"`;
                json += "}";
                json += "}";
                json += "}";
            } else {
                json += '"nestedObject":{';
                json += `"id":`;
                if (input.nestedObject.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.nestedObject.id.length; i++) {
                        __point__ = input.nestedObject.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.nestedObject.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.id)
                ) {
                    json += `"${input.nestedObject.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.id);
                }
                json += `,"timestamp":"${input.nestedObject.timestamp.toISOString()}"`;
                json += ',"data":{';
                json += `"id":`;
                if (input.nestedObject.data.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.nestedObject.data.id.length;
                        i++
                    ) {
                        __point__ = input.nestedObject.data.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.nestedObject.data.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.data.id.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.data.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.data.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.data.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.data.id)
                ) {
                    json += `"${input.nestedObject.data.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.data.id);
                }
                json += `,"timestamp":"${input.nestedObject.data.timestamp.toISOString()}"`;
                json += ',"data":{';
                json += `"id":`;
                if (input.nestedObject.data.data.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.nestedObject.data.data.id.length;
                        i++
                    ) {
                        __point__ =
                            input.nestedObject.data.data.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(
                                input.nestedObject.data.data.id,
                            );
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.nestedObject.data.data.id.slice(
                                    __last__,
                                    i,
                                ) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.nestedObject.data.data.id}"`;
                        } else {
                            json += `"${__result__}${input.nestedObject.data.data.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.nestedObject.data.data.id.length < 5000 &&
                    !STR_ESCAPE.test(input.nestedObject.data.data.id)
                ) {
                    json += `"${input.nestedObject.data.data.id}"`;
                } else {
                    json += JSON.stringify(input.nestedObject.data.data.id);
                }
                json += `,"timestamp":"${input.nestedObject.data.data.timestamp.toISOString()}"`;
                json += "}";
                json += "}";
                json += "}";
                inputHasFields = true;
            }
        }
        if (typeof input.nestedArray !== "undefined") {
            if (inputHasFields) {
                json += ',"nestedArray":[';
                for (let i = 0; i < input.nestedArray.length; i++) {
                    const inputNestedArrayItem = input.nestedArray[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += "[";
                    for (let i = 0; i < inputNestedArrayItem.length; i++) {
                        const inputNestedArrayItemItem =
                            inputNestedArrayItem[i];
                        if (i !== 0) {
                            json += ",";
                        }
                        json += "{";
                        json += `"id":`;
                        if (inputNestedArrayItemItem.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < inputNestedArrayItemItem.id.length;
                                i++
                            ) {
                                __point__ =
                                    inputNestedArrayItemItem.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        inputNestedArrayItemItem.id,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        inputNestedArrayItemItem.id.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${inputNestedArrayItemItem.id}"`;
                                } else {
                                    json += `"${__result__}${inputNestedArrayItemItem.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            inputNestedArrayItemItem.id.length < 5000 &&
                            !STR_ESCAPE.test(inputNestedArrayItemItem.id)
                        ) {
                            json += `"${inputNestedArrayItemItem.id}"`;
                        } else {
                            json += JSON.stringify(inputNestedArrayItemItem.id);
                        }
                        json += `,"timestamp":"${inputNestedArrayItemItem.timestamp.toISOString()}"`;
                        json += "}";
                    }
                    json += "]";
                }
                json += "]";
            } else {
                json += '"nestedArray":[';
                for (let i = 0; i < input.nestedArray.length; i++) {
                    const inputNestedArrayItem = input.nestedArray[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += "[";
                    for (let i = 0; i < inputNestedArrayItem.length; i++) {
                        const inputNestedArrayItemItem =
                            inputNestedArrayItem[i];
                        if (i !== 0) {
                            json += ",";
                        }
                        json += "{";
                        json += `"id":`;
                        if (inputNestedArrayItemItem.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < inputNestedArrayItemItem.id.length;
                                i++
                            ) {
                                __point__ =
                                    inputNestedArrayItemItem.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        inputNestedArrayItemItem.id,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        inputNestedArrayItemItem.id.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${inputNestedArrayItemItem.id}"`;
                                } else {
                                    json += `"${__result__}${inputNestedArrayItemItem.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            inputNestedArrayItemItem.id.length < 5000 &&
                            !STR_ESCAPE.test(inputNestedArrayItemItem.id)
                        ) {
                            json += `"${inputNestedArrayItemItem.id}"`;
                        } else {
                            json += JSON.stringify(inputNestedArrayItemItem.id);
                        }
                        json += `,"timestamp":"${inputNestedArrayItemItem.timestamp.toISOString()}"`;
                        json += "}";
                    }
                    json += "]";
                }
                json += "]";
                inputHasFields = true;
            }
        }
        json += "}";
        return json;
    },
};
export type ObjectWithEveryOptionalTypeEnumerator = "A" | "B" | "C";
export interface ObjectWithEveryOptionalTypeObject {
    string: string;
    boolean: boolean;
    timestamp: Date;
}

export type ObjectWithEveryOptionalTypeRecord = Record<string, boolean>;

export type ObjectWithEveryOptionalTypeDiscriminator =
    | ObjectWithEveryOptionalTypeDiscriminatorA
    | ObjectWithEveryOptionalTypeDiscriminatorB;

export interface ObjectWithEveryOptionalTypeDiscriminatorA {
    type: "A";
    title: string;
}

export interface ObjectWithEveryOptionalTypeDiscriminatorB {
    type: "B";
    title: string;
    description: string;
}

export interface ObjectWithEveryOptionalTypeNestedObject {
    id: string;
    timestamp: Date;
    data: ObjectWithEveryOptionalTypeNestedObjectData;
}

export interface ObjectWithEveryOptionalTypeNestedObjectData {
    id: string;
    timestamp: Date;
    data: ObjectWithEveryOptionalTypeNestedObjectDataData;
}

export interface ObjectWithEveryOptionalTypeNestedObjectDataData {
    id: string;
    timestamp: Date;
}

export interface ObjectWithEveryOptionalTypeNestedArrayItemItem {
    id: string;
    timestamp: Date;
}

export interface AutoReconnectParams {
    messageCount: number;
}
const $$AutoReconnectParams = {
    parse(input: Record<any, any>): AutoReconnectParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.messageCount === "number" &&
                    Number.isInteger(json.messageCount) &&
                    json.messageCount >= 0 &&
                    json.messageCount <= 255
                ) {
                    __D1.messageCount = json.messageCount;
                } else {
                    $fallback(
                        "/messageCount",
                        "/properties/messageCount",
                        "Expected valid integer between 0 and 255",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.messageCount === "number" &&
                Number.isInteger(input.messageCount) &&
                input.messageCount >= 0 &&
                input.messageCount <= 255
            ) {
                __D1.messageCount = input.messageCount;
            } else {
                $fallback(
                    "/messageCount",
                    "/properties/messageCount",
                    "Expected valid integer between 0 and 255",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: AutoReconnectParams): string {
        let json = "";

        json += "{";

        if (Number.isNaN(input.messageCount)) {
            throw new Error("Expected number at /messageCount got NaN");
        }
        json += `"messageCount":${input.messageCount}`;
        json += "}";
        return json;
    },
};

export interface AutoReconnectResponse {
    count: number;
    message: string;
}
const $$AutoReconnectResponse = {
    parse(input: Record<any, any>): AutoReconnectResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.count === "number" &&
                    Number.isInteger(json.count) &&
                    json.count >= 0 &&
                    json.count <= 255
                ) {
                    __D1.count = json.count;
                } else {
                    $fallback(
                        "/count",
                        "/properties/count",
                        "Expected valid integer between 0 and 255",
                    );
                }
                if (typeof json.message === "string") {
                    __D1.message = json.message;
                } else {
                    $fallback(
                        "/message",
                        "/properties/message/type",
                        "Expected string at /message",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.count === "number" &&
                Number.isInteger(input.count) &&
                input.count >= 0 &&
                input.count <= 255
            ) {
                __D1.count = input.count;
            } else {
                $fallback(
                    "/count",
                    "/properties/count",
                    "Expected valid integer between 0 and 255",
                );
            }
            if (typeof input.message === "string") {
                __D1.message = input.message;
            } else {
                $fallback(
                    "/message",
                    "/properties/message/type",
                    "Expected string at /message",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: AutoReconnectResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";

        if (Number.isNaN(input.count)) {
            throw new Error("Expected number at /count got NaN");
        }
        json += `"count":${input.count}`;
        json += `,"message":`;
        if (input.message.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.message.length; i++) {
                __point__ = input.message.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.message);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.message.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.message}"`;
                } else {
                    json += `"${__result__}${input.message.slice(__last__)}"`;
                }
            }
        } else if (
            input.message.length < 5000 &&
            !STR_ESCAPE.test(input.message)
        ) {
            json += `"${input.message}"`;
        } else {
            json += JSON.stringify(input.message);
        }
        json += "}";
        return json;
    },
};

export interface StreamConnectionErrorTestParams {
    statusCode: number;
    statusMessage: string;
}
const $$StreamConnectionErrorTestParams = {
    parse(input: Record<any, any>): StreamConnectionErrorTestParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.statusCode === "number" &&
                    Number.isInteger(json.statusCode) &&
                    json.statusCode >= 0 &&
                    json.statusCode <= 65535
                ) {
                    __D1.statusCode = json.statusCode;
                } else {
                    $fallback(
                        "/statusCode",
                        "/properties/statusCode",
                        "Expected valid integer between 0 and 65535",
                    );
                }
                if (typeof json.statusMessage === "string") {
                    __D1.statusMessage = json.statusMessage;
                } else {
                    $fallback(
                        "/statusMessage",
                        "/properties/statusMessage/type",
                        "Expected string at /statusMessage",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.statusCode === "number" &&
                Number.isInteger(input.statusCode) &&
                input.statusCode >= 0 &&
                input.statusCode <= 65535
            ) {
                __D1.statusCode = input.statusCode;
            } else {
                $fallback(
                    "/statusCode",
                    "/properties/statusCode",
                    "Expected valid integer between 0 and 65535",
                );
            }
            if (typeof input.statusMessage === "string") {
                __D1.statusMessage = input.statusMessage;
            } else {
                $fallback(
                    "/statusMessage",
                    "/properties/statusMessage/type",
                    "Expected string at /statusMessage",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: StreamConnectionErrorTestParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";

        if (Number.isNaN(input.statusCode)) {
            throw new Error("Expected number at /statusCode got NaN");
        }
        json += `"statusCode":${input.statusCode}`;
        json += `,"statusMessage":`;
        if (input.statusMessage.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.statusMessage.length; i++) {
                __point__ = input.statusMessage.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.statusMessage);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.statusMessage.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.statusMessage}"`;
                } else {
                    json += `"${__result__}${input.statusMessage.slice(__last__)}"`;
                }
            }
        } else if (
            input.statusMessage.length < 5000 &&
            !STR_ESCAPE.test(input.statusMessage)
        ) {
            json += `"${input.statusMessage}"`;
        } else {
            json += JSON.stringify(input.statusMessage);
        }
        json += "}";
        return json;
    },
};

export interface StreamConnectionErrorTestResponse {
    message: string;
}
const $$StreamConnectionErrorTestResponse = {
    parse(input: Record<any, any>): StreamConnectionErrorTestResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.message === "string") {
                    __D1.message = json.message;
                } else {
                    $fallback(
                        "/message",
                        "/properties/message/type",
                        "Expected string at /message",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.message === "string") {
                __D1.message = input.message;
            } else {
                $fallback(
                    "/message",
                    "/properties/message/type",
                    "Expected string at /message",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: StreamConnectionErrorTestResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"message":`;
        if (input.message.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.message.length; i++) {
                __point__ = input.message.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.message);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.message.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.message}"`;
                } else {
                    json += `"${__result__}${input.message.slice(__last__)}"`;
                }
            }
        } else if (
            input.message.length < 5000 &&
            !STR_ESCAPE.test(input.message)
        ) {
            json += `"${input.message}"`;
        } else {
            json += JSON.stringify(input.message);
        }
        json += "}";
        return json;
    },
};

export interface StreamLargeObjectsResponse {
    numbers: Array<number>;
    objects: Array<StreamLargeObjectsResponseObjectsItem>;
}
const $$StreamLargeObjectsResponse = {
    parse(input: Record<any, any>): StreamLargeObjectsResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (Array.isArray(json.numbers)) {
                    const __D2 = [];
                    for (const __D2AItem of json.numbers) {
                        let __D2AItemAResult;
                        if (
                            typeof __D2AItem === "number" &&
                            !Number.isNaN(__D2AItem)
                        ) {
                            __D2AItemAResult = __D2AItem;
                        } else {
                            $fallback(
                                "/numbers/[0]",
                                "/properties/numbers/elements/type",
                                "Expected number at /numbers/[0]",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.numbers = __D2;
                } else {
                    $fallback(
                        "/numbers",
                        "/properties/numbers",
                        "Expected Array",
                    );
                }
                if (Array.isArray(json.objects)) {
                    const __D2 = [];
                    for (const __D2AItem of json.objects) {
                        let __D2AItemAResult;
                        if (
                            typeof __D2AItem === "object" &&
                            __D2AItem !== null
                        ) {
                            const __D3 = {};
                            if (typeof __D2AItem.id === "string") {
                                __D3.id = __D2AItem.id;
                            } else {
                                $fallback(
                                    "/objects/[0]/id",
                                    "/properties/objects/elements/properties/id/type",
                                    "Expected string at /objects/[0]/id",
                                );
                            }
                            if (typeof __D2AItem.name === "string") {
                                __D3.name = __D2AItem.name;
                            } else {
                                $fallback(
                                    "/objects/[0]/name",
                                    "/properties/objects/elements/properties/name/type",
                                    "Expected string at /objects/[0]/name",
                                );
                            }
                            if (typeof __D2AItem.email === "string") {
                                __D3.email = __D2AItem.email;
                            } else {
                                $fallback(
                                    "/objects/[0]/email",
                                    "/properties/objects/elements/properties/email/type",
                                    "Expected string at /objects/[0]/email",
                                );
                            }
                            __D2AItemAResult = __D3;
                        } else {
                            $fallback(
                                "/objects/[0]",
                                "/properties/objects/elements",
                                "Expected object",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.objects = __D2;
                } else {
                    $fallback(
                        "/objects",
                        "/properties/objects",
                        "Expected Array",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (Array.isArray(input.numbers)) {
                const __D2 = [];
                for (const __D2AItem of input.numbers) {
                    let __D2AItemAResult;
                    if (
                        typeof __D2AItem === "number" &&
                        !Number.isNaN(__D2AItem)
                    ) {
                        __D2AItemAResult = __D2AItem;
                    } else {
                        $fallback(
                            "/numbers/[0]",
                            "/properties/numbers/elements/type",
                            "Expected number at /numbers/[0]",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.numbers = __D2;
            } else {
                $fallback("/numbers", "/properties/numbers", "Expected Array");
            }
            if (Array.isArray(input.objects)) {
                const __D2 = [];
                for (const __D2AItem of input.objects) {
                    let __D2AItemAResult;
                    if (typeof __D2AItem === "object" && __D2AItem !== null) {
                        const __D3 = {};
                        if (typeof __D2AItem.id === "string") {
                            __D3.id = __D2AItem.id;
                        } else {
                            $fallback(
                                "/objects/[0]/id",
                                "/properties/objects/elements/properties/id/type",
                                "Expected string at /objects/[0]/id",
                            );
                        }
                        if (typeof __D2AItem.name === "string") {
                            __D3.name = __D2AItem.name;
                        } else {
                            $fallback(
                                "/objects/[0]/name",
                                "/properties/objects/elements/properties/name/type",
                                "Expected string at /objects/[0]/name",
                            );
                        }
                        if (typeof __D2AItem.email === "string") {
                            __D3.email = __D2AItem.email;
                        } else {
                            $fallback(
                                "/objects/[0]/email",
                                "/properties/objects/elements/properties/email/type",
                                "Expected string at /objects/[0]/email",
                            );
                        }
                        __D2AItemAResult = __D3;
                    } else {
                        $fallback(
                            "/objects/[0]",
                            "/properties/objects/elements",
                            "Expected object",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.objects = __D2;
            } else {
                $fallback("/objects", "/properties/objects", "Expected Array");
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: StreamLargeObjectsResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += '"numbers":[';
        for (let i = 0; i < input.numbers.length; i++) {
            const inputNumbersItem = input.numbers[i];
            if (i !== 0) {
                json += ",";
            }

            if (Number.isNaN(inputNumbersItem)) {
                throw new Error("Expected number at /numbers/i got NaN");
            }
            json += `${inputNumbersItem}`;
        }
        json += "]";
        json += ',"objects":[';
        for (let i = 0; i < input.objects.length; i++) {
            const inputObjectsItem = input.objects[i];
            if (i !== 0) {
                json += ",";
            }
            json += "{";
            json += `"id":`;
            if (inputObjectsItem.id.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputObjectsItem.id.length; i++) {
                    __point__ = inputObjectsItem.id.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputObjectsItem.id);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputObjectsItem.id.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputObjectsItem.id}"`;
                    } else {
                        json += `"${__result__}${inputObjectsItem.id.slice(__last__)}"`;
                    }
                }
            } else if (
                inputObjectsItem.id.length < 5000 &&
                !STR_ESCAPE.test(inputObjectsItem.id)
            ) {
                json += `"${inputObjectsItem.id}"`;
            } else {
                json += JSON.stringify(inputObjectsItem.id);
            }
            json += `,"name":`;
            if (inputObjectsItem.name.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputObjectsItem.name.length; i++) {
                    __point__ = inputObjectsItem.name.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputObjectsItem.name);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputObjectsItem.name.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputObjectsItem.name}"`;
                    } else {
                        json += `"${__result__}${inputObjectsItem.name.slice(__last__)}"`;
                    }
                }
            } else if (
                inputObjectsItem.name.length < 5000 &&
                !STR_ESCAPE.test(inputObjectsItem.name)
            ) {
                json += `"${inputObjectsItem.name}"`;
            } else {
                json += JSON.stringify(inputObjectsItem.name);
            }
            json += `,"email":`;
            if (inputObjectsItem.email.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputObjectsItem.email.length; i++) {
                    __point__ = inputObjectsItem.email.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputObjectsItem.email);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputObjectsItem.email.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputObjectsItem.email}"`;
                    } else {
                        json += `"${__result__}${inputObjectsItem.email.slice(__last__)}"`;
                    }
                }
            } else if (
                inputObjectsItem.email.length < 5000 &&
                !STR_ESCAPE.test(inputObjectsItem.email)
            ) {
                json += `"${inputObjectsItem.email}"`;
            } else {
                json += JSON.stringify(inputObjectsItem.email);
            }
            json += "}";
        }
        json += "]";
        json += "}";
        return json;
    },
};
export interface StreamLargeObjectsResponseObjectsItem {
    id: string;
    name: string;
    email: string;
}

export interface ChatMessageParams {
    channelId: string;
}
const $$ChatMessageParams = {
    parse(input: Record<any, any>): ChatMessageParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.channelId === "string") {
                    __D1.channelId = json.channelId;
                } else {
                    $fallback(
                        "/channelId",
                        "/properties/channelId/type",
                        "Expected string at /channelId",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.channelId === "string") {
                __D1.channelId = input.channelId;
            } else {
                $fallback(
                    "/channelId",
                    "/properties/channelId/type",
                    "Expected string at /channelId",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: ChatMessageParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"channelId":`;
        if (input.channelId.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.channelId.length; i++) {
                __point__ = input.channelId.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.channelId);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.channelId.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.channelId}"`;
                } else {
                    json += `"${__result__}${input.channelId.slice(__last__)}"`;
                }
            }
        } else if (
            input.channelId.length < 5000 &&
            !STR_ESCAPE.test(input.channelId)
        ) {
            json += `"${input.channelId}"`;
        } else {
            json += JSON.stringify(input.channelId);
        }
        json += "}";
        return json;
    },
};

export type ChatMessage = ChatMessageText | ChatMessageImage | ChatMessageUrl;
const $$ChatMessage = {
    parse(input: Record<any, any>): ChatMessage {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                switch (json.messageType) {
                    case "TEXT": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.messageType = "TEXT";
                            if (typeof json.id === "string") {
                                __D1.id = json.id;
                            } else {
                                $fallback(
                                    "/id",
                                    "/mapping/properties/id/type",
                                    "Expected string at /id",
                                );
                            }
                            if (typeof json.channelId === "string") {
                                __D1.channelId = json.channelId;
                            } else {
                                $fallback(
                                    "/channelId",
                                    "/mapping/properties/channelId/type",
                                    "Expected string at /channelId",
                                );
                            }
                            if (typeof json.userId === "string") {
                                __D1.userId = json.userId;
                            } else {
                                $fallback(
                                    "/userId",
                                    "/mapping/properties/userId/type",
                                    "Expected string at /userId",
                                );
                            }
                            if (
                                typeof json.date === "object" &&
                                json.date instanceof Date
                            ) {
                                __D1.date = json.date;
                            } else if (typeof json.date === "string") {
                                __D1.date = new Date(json.date);
                            } else {
                                $fallback(
                                    "/date",
                                    "/mapping/properties/date",
                                    "Expected instanceof Date or ISO Date string at /date",
                                );
                            }
                            if (typeof json.text === "string") {
                                __D1.text = json.text;
                            } else {
                                $fallback(
                                    "/text",
                                    "/mapping/properties/text/type",
                                    "Expected string at /text",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "IMAGE": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.messageType = "IMAGE";
                            if (typeof json.id === "string") {
                                __D1.id = json.id;
                            } else {
                                $fallback(
                                    "/id",
                                    "/mapping/properties/id/type",
                                    "Expected string at /id",
                                );
                            }
                            if (typeof json.channelId === "string") {
                                __D1.channelId = json.channelId;
                            } else {
                                $fallback(
                                    "/channelId",
                                    "/mapping/properties/channelId/type",
                                    "Expected string at /channelId",
                                );
                            }
                            if (typeof json.userId === "string") {
                                __D1.userId = json.userId;
                            } else {
                                $fallback(
                                    "/userId",
                                    "/mapping/properties/userId/type",
                                    "Expected string at /userId",
                                );
                            }
                            if (
                                typeof json.date === "object" &&
                                json.date instanceof Date
                            ) {
                                __D1.date = json.date;
                            } else if (typeof json.date === "string") {
                                __D1.date = new Date(json.date);
                            } else {
                                $fallback(
                                    "/date",
                                    "/mapping/properties/date",
                                    "Expected instanceof Date or ISO Date string at /date",
                                );
                            }
                            if (typeof json.image === "string") {
                                __D1.image = json.image;
                            } else {
                                $fallback(
                                    "/image",
                                    "/mapping/properties/image/type",
                                    "Expected string at /image",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "URL": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.messageType = "URL";
                            if (typeof json.id === "string") {
                                __D1.id = json.id;
                            } else {
                                $fallback(
                                    "/id",
                                    "/mapping/properties/id/type",
                                    "Expected string at /id",
                                );
                            }
                            if (typeof json.channelId === "string") {
                                __D1.channelId = json.channelId;
                            } else {
                                $fallback(
                                    "/channelId",
                                    "/mapping/properties/channelId/type",
                                    "Expected string at /channelId",
                                );
                            }
                            if (typeof json.userId === "string") {
                                __D1.userId = json.userId;
                            } else {
                                $fallback(
                                    "/userId",
                                    "/mapping/properties/userId/type",
                                    "Expected string at /userId",
                                );
                            }
                            if (
                                typeof json.date === "object" &&
                                json.date instanceof Date
                            ) {
                                __D1.date = json.date;
                            } else if (typeof json.date === "string") {
                                __D1.date = new Date(json.date);
                            } else {
                                $fallback(
                                    "/date",
                                    "/mapping/properties/date",
                                    "Expected instanceof Date or ISO Date string at /date",
                                );
                            }
                            if (typeof json.url === "string") {
                                __D1.url = json.url;
                            } else {
                                $fallback(
                                    "/url",
                                    "/mapping/properties/url/type",
                                    "Expected string at /url",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    default:
                        $fallback(
                            "",
                            "/mapping",
                            "json.messageType did not match one of the specified values",
                        );
                        break;
                }
            } else {
                $fallback("", "", "Expected Object.");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            switch (input.messageType) {
                case "TEXT": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.messageType = "TEXT";
                        if (typeof input.id === "string") {
                            __D1.id = input.id;
                        } else {
                            $fallback(
                                "/id",
                                "/mapping/properties/id/type",
                                "Expected string at /id",
                            );
                        }
                        if (typeof input.channelId === "string") {
                            __D1.channelId = input.channelId;
                        } else {
                            $fallback(
                                "/channelId",
                                "/mapping/properties/channelId/type",
                                "Expected string at /channelId",
                            );
                        }
                        if (typeof input.userId === "string") {
                            __D1.userId = input.userId;
                        } else {
                            $fallback(
                                "/userId",
                                "/mapping/properties/userId/type",
                                "Expected string at /userId",
                            );
                        }
                        if (
                            typeof input.date === "object" &&
                            input.date instanceof Date
                        ) {
                            __D1.date = input.date;
                        } else if (typeof input.date === "string") {
                            __D1.date = new Date(input.date);
                        } else {
                            $fallback(
                                "/date",
                                "/mapping/properties/date",
                                "Expected instanceof Date or ISO Date string at /date",
                            );
                        }
                        if (typeof input.text === "string") {
                            __D1.text = input.text;
                        } else {
                            $fallback(
                                "/text",
                                "/mapping/properties/text/type",
                                "Expected string at /text",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "IMAGE": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.messageType = "IMAGE";
                        if (typeof input.id === "string") {
                            __D1.id = input.id;
                        } else {
                            $fallback(
                                "/id",
                                "/mapping/properties/id/type",
                                "Expected string at /id",
                            );
                        }
                        if (typeof input.channelId === "string") {
                            __D1.channelId = input.channelId;
                        } else {
                            $fallback(
                                "/channelId",
                                "/mapping/properties/channelId/type",
                                "Expected string at /channelId",
                            );
                        }
                        if (typeof input.userId === "string") {
                            __D1.userId = input.userId;
                        } else {
                            $fallback(
                                "/userId",
                                "/mapping/properties/userId/type",
                                "Expected string at /userId",
                            );
                        }
                        if (
                            typeof input.date === "object" &&
                            input.date instanceof Date
                        ) {
                            __D1.date = input.date;
                        } else if (typeof input.date === "string") {
                            __D1.date = new Date(input.date);
                        } else {
                            $fallback(
                                "/date",
                                "/mapping/properties/date",
                                "Expected instanceof Date or ISO Date string at /date",
                            );
                        }
                        if (typeof input.image === "string") {
                            __D1.image = input.image;
                        } else {
                            $fallback(
                                "/image",
                                "/mapping/properties/image/type",
                                "Expected string at /image",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "URL": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.messageType = "URL";
                        if (typeof input.id === "string") {
                            __D1.id = input.id;
                        } else {
                            $fallback(
                                "/id",
                                "/mapping/properties/id/type",
                                "Expected string at /id",
                            );
                        }
                        if (typeof input.channelId === "string") {
                            __D1.channelId = input.channelId;
                        } else {
                            $fallback(
                                "/channelId",
                                "/mapping/properties/channelId/type",
                                "Expected string at /channelId",
                            );
                        }
                        if (typeof input.userId === "string") {
                            __D1.userId = input.userId;
                        } else {
                            $fallback(
                                "/userId",
                                "/mapping/properties/userId/type",
                                "Expected string at /userId",
                            );
                        }
                        if (
                            typeof input.date === "object" &&
                            input.date instanceof Date
                        ) {
                            __D1.date = input.date;
                        } else if (typeof input.date === "string") {
                            __D1.date = new Date(input.date);
                        } else {
                            $fallback(
                                "/date",
                                "/mapping/properties/date",
                                "Expected instanceof Date or ISO Date string at /date",
                            );
                        }
                        if (typeof input.url === "string") {
                            __D1.url = input.url;
                        } else {
                            $fallback(
                                "/url",
                                "/mapping/properties/url/type",
                                "Expected string at /url",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                default:
                    $fallback(
                        "",
                        "/mapping",
                        "input.messageType did not match one of the specified values",
                    );
                    break;
            }
        } else {
            $fallback("", "", "Expected Object.");
        }
        return result;
    },
    serialize(input: ChatMessage): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        switch (input.messageType) {
            case "TEXT": {
                json += "{";
                json += `"messageType":"TEXT"`;
                json += `,"id":`;
                if (input.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.id.length; i++) {
                        __point__ = input.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.id}"`;
                        } else {
                            json += `"${__result__}${input.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.id.length < 5000 &&
                    !STR_ESCAPE.test(input.id)
                ) {
                    json += `"${input.id}"`;
                } else {
                    json += JSON.stringify(input.id);
                }
                json += `,"channelId":`;
                if (input.channelId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.channelId.length; i++) {
                        __point__ = input.channelId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.channelId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.channelId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.channelId}"`;
                        } else {
                            json += `"${__result__}${input.channelId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.channelId.length < 5000 &&
                    !STR_ESCAPE.test(input.channelId)
                ) {
                    json += `"${input.channelId}"`;
                } else {
                    json += JSON.stringify(input.channelId);
                }
                json += `,"userId":`;
                if (input.userId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.userId.length; i++) {
                        __point__ = input.userId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.userId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.userId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.userId}"`;
                        } else {
                            json += `"${__result__}${input.userId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.userId.length < 5000 &&
                    !STR_ESCAPE.test(input.userId)
                ) {
                    json += `"${input.userId}"`;
                } else {
                    json += JSON.stringify(input.userId);
                }
                json += `,"date":"${input.date.toISOString()}"`;
                json += `,"text":`;
                if (input.text.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.text.length; i++) {
                        __point__ = input.text.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.text);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.text.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.text}"`;
                        } else {
                            json += `"${__result__}${input.text.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.text.length < 5000 &&
                    !STR_ESCAPE.test(input.text)
                ) {
                    json += `"${input.text}"`;
                } else {
                    json += JSON.stringify(input.text);
                }
                json += "}";
                break;
            }
            case "IMAGE": {
                json += "{";
                json += `"messageType":"IMAGE"`;
                json += `,"id":`;
                if (input.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.id.length; i++) {
                        __point__ = input.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.id}"`;
                        } else {
                            json += `"${__result__}${input.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.id.length < 5000 &&
                    !STR_ESCAPE.test(input.id)
                ) {
                    json += `"${input.id}"`;
                } else {
                    json += JSON.stringify(input.id);
                }
                json += `,"channelId":`;
                if (input.channelId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.channelId.length; i++) {
                        __point__ = input.channelId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.channelId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.channelId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.channelId}"`;
                        } else {
                            json += `"${__result__}${input.channelId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.channelId.length < 5000 &&
                    !STR_ESCAPE.test(input.channelId)
                ) {
                    json += `"${input.channelId}"`;
                } else {
                    json += JSON.stringify(input.channelId);
                }
                json += `,"userId":`;
                if (input.userId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.userId.length; i++) {
                        __point__ = input.userId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.userId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.userId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.userId}"`;
                        } else {
                            json += `"${__result__}${input.userId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.userId.length < 5000 &&
                    !STR_ESCAPE.test(input.userId)
                ) {
                    json += `"${input.userId}"`;
                } else {
                    json += JSON.stringify(input.userId);
                }
                json += `,"date":"${input.date.toISOString()}"`;
                json += `,"image":`;
                if (input.image.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.image.length; i++) {
                        __point__ = input.image.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.image);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.image.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.image}"`;
                        } else {
                            json += `"${__result__}${input.image.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.image.length < 5000 &&
                    !STR_ESCAPE.test(input.image)
                ) {
                    json += `"${input.image}"`;
                } else {
                    json += JSON.stringify(input.image);
                }
                json += "}";
                break;
            }
            case "URL": {
                json += "{";
                json += `"messageType":"URL"`;
                json += `,"id":`;
                if (input.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.id.length; i++) {
                        __point__ = input.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.id.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.id}"`;
                        } else {
                            json += `"${__result__}${input.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.id.length < 5000 &&
                    !STR_ESCAPE.test(input.id)
                ) {
                    json += `"${input.id}"`;
                } else {
                    json += JSON.stringify(input.id);
                }
                json += `,"channelId":`;
                if (input.channelId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.channelId.length; i++) {
                        __point__ = input.channelId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.channelId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.channelId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.channelId}"`;
                        } else {
                            json += `"${__result__}${input.channelId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.channelId.length < 5000 &&
                    !STR_ESCAPE.test(input.channelId)
                ) {
                    json += `"${input.channelId}"`;
                } else {
                    json += JSON.stringify(input.channelId);
                }
                json += `,"userId":`;
                if (input.userId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.userId.length; i++) {
                        __point__ = input.userId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.userId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.userId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.userId}"`;
                        } else {
                            json += `"${__result__}${input.userId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.userId.length < 5000 &&
                    !STR_ESCAPE.test(input.userId)
                ) {
                    json += `"${input.userId}"`;
                } else {
                    json += JSON.stringify(input.userId);
                }
                json += `,"date":"${input.date.toISOString()}"`;
                json += `,"url":`;
                if (input.url.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.url.length; i++) {
                        __point__ = input.url.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.url);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ += input.url.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.url}"`;
                        } else {
                            json += `"${__result__}${input.url.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.url.length < 5000 &&
                    !STR_ESCAPE.test(input.url)
                ) {
                    json += `"${input.url}"`;
                } else {
                    json += JSON.stringify(input.url);
                }
                json += "}";
                break;
            }
        }
        return json;
    },
};
export interface ChatMessageText {
    messageType: "TEXT";
    id: string;
    channelId: string;
    userId: string;
    date: Date;
    text: string;
}

export interface ChatMessageImage {
    messageType: "IMAGE";
    id: string;
    channelId: string;
    userId: string;
    date: Date;
    image: string;
}

export interface ChatMessageUrl {
    messageType: "URL";
    id: string;
    channelId: string;
    userId: string;
    date: Date;
    url: string;
}

export type WsMessageParams =
    | WsMessageParamsCreateEntity
    | WsMessageParamsUpdateEntity
    | WsMessageParamsDisconnect;
const $$WsMessageParams = {
    parse(input: Record<any, any>): WsMessageParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                switch (json.type) {
                    case "CREATE_ENTITY": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.type = "CREATE_ENTITY";
                            if (typeof json.entityId === "string") {
                                __D1.entityId = json.entityId;
                            } else {
                                $fallback(
                                    "/entityId",
                                    "/mapping/properties/entityId/type",
                                    "Expected string at /entityId",
                                );
                            }
                            if (
                                typeof json.x === "number" &&
                                !Number.isNaN(json.x)
                            ) {
                                __D1.x = json.x;
                            } else {
                                $fallback(
                                    "/x",
                                    "/mapping/properties/x/type",
                                    "Expected number at /x",
                                );
                            }
                            if (
                                typeof json.y === "number" &&
                                !Number.isNaN(json.y)
                            ) {
                                __D1.y = json.y;
                            } else {
                                $fallback(
                                    "/y",
                                    "/mapping/properties/y/type",
                                    "Expected number at /y",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "UPDATE_ENTITY": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.type = "UPDATE_ENTITY";
                            if (typeof json.entityId === "string") {
                                __D1.entityId = json.entityId;
                            } else {
                                $fallback(
                                    "/entityId",
                                    "/mapping/properties/entityId/type",
                                    "Expected string at /entityId",
                                );
                            }
                            if (
                                typeof json.x === "number" &&
                                !Number.isNaN(json.x)
                            ) {
                                __D1.x = json.x;
                            } else {
                                $fallback(
                                    "/x",
                                    "/mapping/properties/x/type",
                                    "Expected number at /x",
                                );
                            }
                            if (
                                typeof json.y === "number" &&
                                !Number.isNaN(json.y)
                            ) {
                                __D1.y = json.y;
                            } else {
                                $fallback(
                                    "/y",
                                    "/mapping/properties/y/type",
                                    "Expected number at /y",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "DISCONNECT": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.type = "DISCONNECT";
                            if (typeof json.reason === "string") {
                                __D1.reason = json.reason;
                            } else {
                                $fallback(
                                    "/reason",
                                    "/mapping/properties/reason/type",
                                    "Expected string at /reason",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    default:
                        $fallback(
                            "",
                            "/mapping",
                            "json.type did not match one of the specified values",
                        );
                        break;
                }
            } else {
                $fallback("", "", "Expected Object.");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            switch (input.type) {
                case "CREATE_ENTITY": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.type = "CREATE_ENTITY";
                        if (typeof input.entityId === "string") {
                            __D1.entityId = input.entityId;
                        } else {
                            $fallback(
                                "/entityId",
                                "/mapping/properties/entityId/type",
                                "Expected string at /entityId",
                            );
                        }
                        if (
                            typeof input.x === "number" &&
                            !Number.isNaN(input.x)
                        ) {
                            __D1.x = input.x;
                        } else {
                            $fallback(
                                "/x",
                                "/mapping/properties/x/type",
                                "Expected number at /x",
                            );
                        }
                        if (
                            typeof input.y === "number" &&
                            !Number.isNaN(input.y)
                        ) {
                            __D1.y = input.y;
                        } else {
                            $fallback(
                                "/y",
                                "/mapping/properties/y/type",
                                "Expected number at /y",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "UPDATE_ENTITY": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.type = "UPDATE_ENTITY";
                        if (typeof input.entityId === "string") {
                            __D1.entityId = input.entityId;
                        } else {
                            $fallback(
                                "/entityId",
                                "/mapping/properties/entityId/type",
                                "Expected string at /entityId",
                            );
                        }
                        if (
                            typeof input.x === "number" &&
                            !Number.isNaN(input.x)
                        ) {
                            __D1.x = input.x;
                        } else {
                            $fallback(
                                "/x",
                                "/mapping/properties/x/type",
                                "Expected number at /x",
                            );
                        }
                        if (
                            typeof input.y === "number" &&
                            !Number.isNaN(input.y)
                        ) {
                            __D1.y = input.y;
                        } else {
                            $fallback(
                                "/y",
                                "/mapping/properties/y/type",
                                "Expected number at /y",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "DISCONNECT": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.type = "DISCONNECT";
                        if (typeof input.reason === "string") {
                            __D1.reason = input.reason;
                        } else {
                            $fallback(
                                "/reason",
                                "/mapping/properties/reason/type",
                                "Expected string at /reason",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                default:
                    $fallback(
                        "",
                        "/mapping",
                        "input.type did not match one of the specified values",
                    );
                    break;
            }
        } else {
            $fallback("", "", "Expected Object.");
        }
        return result;
    },
    serialize(input: WsMessageParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        switch (input.type) {
            case "CREATE_ENTITY": {
                json += "{";
                json += `"type":"CREATE_ENTITY"`;
                json += `,"entityId":`;
                if (input.entityId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.entityId.length; i++) {
                        __point__ = input.entityId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.entityId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.entityId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.entityId}"`;
                        } else {
                            json += `"${__result__}${input.entityId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.entityId.length < 5000 &&
                    !STR_ESCAPE.test(input.entityId)
                ) {
                    json += `"${input.entityId}"`;
                } else {
                    json += JSON.stringify(input.entityId);
                }

                if (Number.isNaN(input.x)) {
                    throw new Error("Expected number at /x got NaN");
                }
                json += `,"x":${input.x}`;

                if (Number.isNaN(input.y)) {
                    throw new Error("Expected number at /y got NaN");
                }
                json += `,"y":${input.y}`;
                json += "}";
                break;
            }
            case "UPDATE_ENTITY": {
                json += "{";
                json += `"type":"UPDATE_ENTITY"`;
                json += `,"entityId":`;
                if (input.entityId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.entityId.length; i++) {
                        __point__ = input.entityId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.entityId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.entityId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.entityId}"`;
                        } else {
                            json += `"${__result__}${input.entityId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.entityId.length < 5000 &&
                    !STR_ESCAPE.test(input.entityId)
                ) {
                    json += `"${input.entityId}"`;
                } else {
                    json += JSON.stringify(input.entityId);
                }

                if (Number.isNaN(input.x)) {
                    throw new Error("Expected number at /x got NaN");
                }
                json += `,"x":${input.x}`;

                if (Number.isNaN(input.y)) {
                    throw new Error("Expected number at /y got NaN");
                }
                json += `,"y":${input.y}`;
                json += "}";
                break;
            }
            case "DISCONNECT": {
                json += "{";
                json += `"type":"DISCONNECT"`;
                json += `,"reason":`;
                if (input.reason.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.reason.length; i++) {
                        __point__ = input.reason.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.reason);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.reason.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.reason}"`;
                        } else {
                            json += `"${__result__}${input.reason.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.reason.length < 5000 &&
                    !STR_ESCAPE.test(input.reason)
                ) {
                    json += `"${input.reason}"`;
                } else {
                    json += JSON.stringify(input.reason);
                }
                json += "}";
                break;
            }
        }
        return json;
    },
};
export interface WsMessageParamsCreateEntity {
    type: "CREATE_ENTITY";
    entityId: string;
    x: number;
    y: number;
}

export interface WsMessageParamsUpdateEntity {
    type: "UPDATE_ENTITY";
    entityId: string;
    x: number;
    y: number;
}

export interface WsMessageParamsDisconnect {
    type: "DISCONNECT";
    reason: string;
}

export type WsMessageResponse =
    | WsMessageResponseEntityCreated
    | WsMessageResponseEntityUpdated;
const $$WsMessageResponse = {
    parse(input: Record<any, any>): WsMessageResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                switch (json.type) {
                    case "ENTITY_CREATED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.type = "ENTITY_CREATED";
                            if (typeof json.entityId === "string") {
                                __D1.entityId = json.entityId;
                            } else {
                                $fallback(
                                    "/entityId",
                                    "/mapping/properties/entityId/type",
                                    "Expected string at /entityId",
                                );
                            }
                            if (
                                typeof json.x === "number" &&
                                !Number.isNaN(json.x)
                            ) {
                                __D1.x = json.x;
                            } else {
                                $fallback(
                                    "/x",
                                    "/mapping/properties/x/type",
                                    "Expected number at /x",
                                );
                            }
                            if (
                                typeof json.y === "number" &&
                                !Number.isNaN(json.y)
                            ) {
                                __D1.y = json.y;
                            } else {
                                $fallback(
                                    "/y",
                                    "/mapping/properties/y/type",
                                    "Expected number at /y",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "ENTITY_UPDATED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.type = "ENTITY_UPDATED";
                            if (typeof json.entityId === "string") {
                                __D1.entityId = json.entityId;
                            } else {
                                $fallback(
                                    "/entityId",
                                    "/mapping/properties/entityId/type",
                                    "Expected string at /entityId",
                                );
                            }
                            if (
                                typeof json.x === "number" &&
                                !Number.isNaN(json.x)
                            ) {
                                __D1.x = json.x;
                            } else {
                                $fallback(
                                    "/x",
                                    "/mapping/properties/x/type",
                                    "Expected number at /x",
                                );
                            }
                            if (
                                typeof json.y === "number" &&
                                !Number.isNaN(json.y)
                            ) {
                                __D1.y = json.y;
                            } else {
                                $fallback(
                                    "/y",
                                    "/mapping/properties/y/type",
                                    "Expected number at /y",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    default:
                        $fallback(
                            "",
                            "/mapping",
                            "json.type did not match one of the specified values",
                        );
                        break;
                }
            } else {
                $fallback("", "", "Expected Object.");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            switch (input.type) {
                case "ENTITY_CREATED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.type = "ENTITY_CREATED";
                        if (typeof input.entityId === "string") {
                            __D1.entityId = input.entityId;
                        } else {
                            $fallback(
                                "/entityId",
                                "/mapping/properties/entityId/type",
                                "Expected string at /entityId",
                            );
                        }
                        if (
                            typeof input.x === "number" &&
                            !Number.isNaN(input.x)
                        ) {
                            __D1.x = input.x;
                        } else {
                            $fallback(
                                "/x",
                                "/mapping/properties/x/type",
                                "Expected number at /x",
                            );
                        }
                        if (
                            typeof input.y === "number" &&
                            !Number.isNaN(input.y)
                        ) {
                            __D1.y = input.y;
                        } else {
                            $fallback(
                                "/y",
                                "/mapping/properties/y/type",
                                "Expected number at /y",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "ENTITY_UPDATED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.type = "ENTITY_UPDATED";
                        if (typeof input.entityId === "string") {
                            __D1.entityId = input.entityId;
                        } else {
                            $fallback(
                                "/entityId",
                                "/mapping/properties/entityId/type",
                                "Expected string at /entityId",
                            );
                        }
                        if (
                            typeof input.x === "number" &&
                            !Number.isNaN(input.x)
                        ) {
                            __D1.x = input.x;
                        } else {
                            $fallback(
                                "/x",
                                "/mapping/properties/x/type",
                                "Expected number at /x",
                            );
                        }
                        if (
                            typeof input.y === "number" &&
                            !Number.isNaN(input.y)
                        ) {
                            __D1.y = input.y;
                        } else {
                            $fallback(
                                "/y",
                                "/mapping/properties/y/type",
                                "Expected number at /y",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                default:
                    $fallback(
                        "",
                        "/mapping",
                        "input.type did not match one of the specified values",
                    );
                    break;
            }
        } else {
            $fallback("", "", "Expected Object.");
        }
        return result;
    },
    serialize(input: WsMessageResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        switch (input.type) {
            case "ENTITY_CREATED": {
                json += "{";
                json += `"type":"ENTITY_CREATED"`;
                json += `,"entityId":`;
                if (input.entityId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.entityId.length; i++) {
                        __point__ = input.entityId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.entityId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.entityId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.entityId}"`;
                        } else {
                            json += `"${__result__}${input.entityId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.entityId.length < 5000 &&
                    !STR_ESCAPE.test(input.entityId)
                ) {
                    json += `"${input.entityId}"`;
                } else {
                    json += JSON.stringify(input.entityId);
                }

                if (Number.isNaN(input.x)) {
                    throw new Error("Expected number at /x got NaN");
                }
                json += `,"x":${input.x}`;

                if (Number.isNaN(input.y)) {
                    throw new Error("Expected number at /y got NaN");
                }
                json += `,"y":${input.y}`;
                json += "}";
                break;
            }
            case "ENTITY_UPDATED": {
                json += "{";
                json += `"type":"ENTITY_UPDATED"`;
                json += `,"entityId":`;
                if (input.entityId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.entityId.length; i++) {
                        __point__ = input.entityId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.entityId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.entityId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.entityId}"`;
                        } else {
                            json += `"${__result__}${input.entityId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.entityId.length < 5000 &&
                    !STR_ESCAPE.test(input.entityId)
                ) {
                    json += `"${input.entityId}"`;
                } else {
                    json += JSON.stringify(input.entityId);
                }

                if (Number.isNaN(input.x)) {
                    throw new Error("Expected number at /x got NaN");
                }
                json += `,"x":${input.x}`;

                if (Number.isNaN(input.y)) {
                    throw new Error("Expected number at /y got NaN");
                }
                json += `,"y":${input.y}`;
                json += "}";
                break;
            }
        }
        return json;
    },
};
export interface WsMessageResponseEntityCreated {
    type: "ENTITY_CREATED";
    entityId: string;
    x: number;
    y: number;
}

export interface WsMessageResponseEntityUpdated {
    type: "ENTITY_UPDATED";
    entityId: string;
    x: number;
    y: number;
}

export interface PostParams {
    postId: string;
}
const $$PostParams = {
    parse(input: Record<any, any>): PostParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.postId === "string") {
                    __D1.postId = json.postId;
                } else {
                    $fallback(
                        "/postId",
                        "/properties/postId/type",
                        "Expected string at /postId",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.postId === "string") {
                __D1.postId = input.postId;
            } else {
                $fallback(
                    "/postId",
                    "/properties/postId/type",
                    "Expected string at /postId",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: PostParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"postId":`;
        if (input.postId.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.postId.length; i++) {
                __point__ = input.postId.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.postId);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.postId.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.postId}"`;
                } else {
                    json += `"${__result__}${input.postId.slice(__last__)}"`;
                }
            }
        } else if (
            input.postId.length < 5000 &&
            !STR_ESCAPE.test(input.postId)
        ) {
            json += `"${input.postId}"`;
        } else {
            json += JSON.stringify(input.postId);
        }
        json += "}";
        return json;
    },
};

export interface Post {
    id: string;
    title: string;
    type: PostType;
    description: string | null;
    content: string;
    tags: Array<string>;
    authorId: string;
    author: Author;
    createdAt: Date;
    updatedAt: Date;
}
const $$Post = {
    parse(input: Record<any, any>): Post {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.id === "string") {
                    __D1.id = json.id;
                } else {
                    $fallback(
                        "/id",
                        "/properties/id/type",
                        "Expected string at /id",
                    );
                }
                if (typeof json.title === "string") {
                    __D1.title = json.title;
                } else {
                    $fallback(
                        "/title",
                        "/properties/title/type",
                        "Expected string at /title",
                    );
                }
                if (typeof json.type === "string") {
                    if (
                        json.type === "text" ||
                        json.type === "image" ||
                        json.type === "video"
                    ) {
                        __D1.type = json.type;
                    } else {
                        $fallback(
                            "/type",
                            "/properties/type",
                            "Expected one of the following values: [text, image, video] at /type.",
                        );
                    }
                } else {
                    $fallback(
                        "/type",
                        "/properties/type",
                        "Expected one of the following values: [text, image, video] at /type.",
                    );
                }
                if (json.description === null) {
                    __D1.description = json.description;
                } else {
                    if (typeof json.description === "string") {
                        __D1.description = json.description;
                    } else {
                        $fallback(
                            "/description",
                            "/properties/description/type",
                            "Expected string at /description",
                        );
                    }
                }
                if (typeof json.content === "string") {
                    __D1.content = json.content;
                } else {
                    $fallback(
                        "/content",
                        "/properties/content/type",
                        "Expected string at /content",
                    );
                }
                if (Array.isArray(json.tags)) {
                    const __D2 = [];
                    for (const __D2AItem of json.tags) {
                        let __D2AItemAResult;
                        if (typeof __D2AItem === "string") {
                            __D2AItemAResult = __D2AItem;
                        } else {
                            $fallback(
                                "/tags/[0]",
                                "/properties/tags/elements/type",
                                "Expected string at /tags/[0]",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.tags = __D2;
                } else {
                    $fallback("/tags", "/properties/tags", "Expected Array");
                }
                if (typeof json.authorId === "string") {
                    __D1.authorId = json.authorId;
                } else {
                    $fallback(
                        "/authorId",
                        "/properties/authorId/type",
                        "Expected string at /authorId",
                    );
                }
                if (typeof json.author === "object" && json.author !== null) {
                    const __D2 = {};
                    if (typeof json.author.id === "string") {
                        __D2.id = json.author.id;
                    } else {
                        $fallback(
                            "/author/id",
                            "/properties/author/properties/id/type",
                            "Expected string at /author/id",
                        );
                    }
                    if (typeof json.author.name === "string") {
                        __D2.name = json.author.name;
                    } else {
                        $fallback(
                            "/author/name",
                            "/properties/author/properties/name/type",
                            "Expected string at /author/name",
                        );
                    }
                    if (json.author.bio === null) {
                        __D2.bio = json.author.bio;
                    } else {
                        if (typeof json.author.bio === "string") {
                            __D2.bio = json.author.bio;
                        } else {
                            $fallback(
                                "/author/bio",
                                "/properties/author/properties/bio/type",
                                "Expected string at /author/bio",
                            );
                        }
                    }
                    if (
                        typeof json.author.createdAt === "object" &&
                        json.author.createdAt instanceof Date
                    ) {
                        __D2.createdAt = json.author.createdAt;
                    } else if (typeof json.author.createdAt === "string") {
                        __D2.createdAt = new Date(json.author.createdAt);
                    } else {
                        $fallback(
                            "/author/createdAt",
                            "/properties/author/properties/createdAt",
                            "Expected instanceof Date or ISO Date string at /author/createdAt",
                        );
                    }
                    if (
                        typeof json.author.updatedAt === "object" &&
                        json.author.updatedAt instanceof Date
                    ) {
                        __D2.updatedAt = json.author.updatedAt;
                    } else if (typeof json.author.updatedAt === "string") {
                        __D2.updatedAt = new Date(json.author.updatedAt);
                    } else {
                        $fallback(
                            "/author/updatedAt",
                            "/properties/author/properties/updatedAt",
                            "Expected instanceof Date or ISO Date string at /author/updatedAt",
                        );
                    }
                    __D1.author = __D2;
                } else {
                    $fallback(
                        "/author",
                        "/properties/author",
                        "Expected object",
                    );
                }
                if (
                    typeof json.createdAt === "object" &&
                    json.createdAt instanceof Date
                ) {
                    __D1.createdAt = json.createdAt;
                } else if (typeof json.createdAt === "string") {
                    __D1.createdAt = new Date(json.createdAt);
                } else {
                    $fallback(
                        "/createdAt",
                        "/properties/createdAt",
                        "Expected instanceof Date or ISO Date string at /createdAt",
                    );
                }
                if (
                    typeof json.updatedAt === "object" &&
                    json.updatedAt instanceof Date
                ) {
                    __D1.updatedAt = json.updatedAt;
                } else if (typeof json.updatedAt === "string") {
                    __D1.updatedAt = new Date(json.updatedAt);
                } else {
                    $fallback(
                        "/updatedAt",
                        "/properties/updatedAt",
                        "Expected instanceof Date or ISO Date string at /updatedAt",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.id === "string") {
                __D1.id = input.id;
            } else {
                $fallback(
                    "/id",
                    "/properties/id/type",
                    "Expected string at /id",
                );
            }
            if (typeof input.title === "string") {
                __D1.title = input.title;
            } else {
                $fallback(
                    "/title",
                    "/properties/title/type",
                    "Expected string at /title",
                );
            }
            if (typeof input.type === "string") {
                if (
                    input.type === "text" ||
                    input.type === "image" ||
                    input.type === "video"
                ) {
                    __D1.type = input.type;
                } else {
                    $fallback(
                        "/type",
                        "/properties/type",
                        "Expected one of the following values: [text, image, video] at /type.",
                    );
                }
            } else {
                $fallback(
                    "/type",
                    "/properties/type",
                    "Expected one of the following values: [text, image, video] at /type.",
                );
            }
            if (input.description === null) {
                __D1.description = input.description;
            } else {
                if (typeof input.description === "string") {
                    __D1.description = input.description;
                } else {
                    $fallback(
                        "/description",
                        "/properties/description/type",
                        "Expected string at /description",
                    );
                }
            }
            if (typeof input.content === "string") {
                __D1.content = input.content;
            } else {
                $fallback(
                    "/content",
                    "/properties/content/type",
                    "Expected string at /content",
                );
            }
            if (Array.isArray(input.tags)) {
                const __D2 = [];
                for (const __D2AItem of input.tags) {
                    let __D2AItemAResult;
                    if (typeof __D2AItem === "string") {
                        __D2AItemAResult = __D2AItem;
                    } else {
                        $fallback(
                            "/tags/[0]",
                            "/properties/tags/elements/type",
                            "Expected string at /tags/[0]",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.tags = __D2;
            } else {
                $fallback("/tags", "/properties/tags", "Expected Array");
            }
            if (typeof input.authorId === "string") {
                __D1.authorId = input.authorId;
            } else {
                $fallback(
                    "/authorId",
                    "/properties/authorId/type",
                    "Expected string at /authorId",
                );
            }
            if (typeof input.author === "object" && input.author !== null) {
                const __D2 = {};
                if (typeof input.author.id === "string") {
                    __D2.id = input.author.id;
                } else {
                    $fallback(
                        "/author/id",
                        "/properties/author/properties/id/type",
                        "Expected string at /author/id",
                    );
                }
                if (typeof input.author.name === "string") {
                    __D2.name = input.author.name;
                } else {
                    $fallback(
                        "/author/name",
                        "/properties/author/properties/name/type",
                        "Expected string at /author/name",
                    );
                }
                if (input.author.bio === null) {
                    __D2.bio = input.author.bio;
                } else {
                    if (typeof input.author.bio === "string") {
                        __D2.bio = input.author.bio;
                    } else {
                        $fallback(
                            "/author/bio",
                            "/properties/author/properties/bio/type",
                            "Expected string at /author/bio",
                        );
                    }
                }
                if (
                    typeof input.author.createdAt === "object" &&
                    input.author.createdAt instanceof Date
                ) {
                    __D2.createdAt = input.author.createdAt;
                } else if (typeof input.author.createdAt === "string") {
                    __D2.createdAt = new Date(input.author.createdAt);
                } else {
                    $fallback(
                        "/author/createdAt",
                        "/properties/author/properties/createdAt",
                        "Expected instanceof Date or ISO Date string at /author/createdAt",
                    );
                }
                if (
                    typeof input.author.updatedAt === "object" &&
                    input.author.updatedAt instanceof Date
                ) {
                    __D2.updatedAt = input.author.updatedAt;
                } else if (typeof input.author.updatedAt === "string") {
                    __D2.updatedAt = new Date(input.author.updatedAt);
                } else {
                    $fallback(
                        "/author/updatedAt",
                        "/properties/author/properties/updatedAt",
                        "Expected instanceof Date or ISO Date string at /author/updatedAt",
                    );
                }
                __D1.author = __D2;
            } else {
                $fallback("/author", "/properties/author", "Expected object");
            }
            if (
                typeof input.createdAt === "object" &&
                input.createdAt instanceof Date
            ) {
                __D1.createdAt = input.createdAt;
            } else if (typeof input.createdAt === "string") {
                __D1.createdAt = new Date(input.createdAt);
            } else {
                $fallback(
                    "/createdAt",
                    "/properties/createdAt",
                    "Expected instanceof Date or ISO Date string at /createdAt",
                );
            }
            if (
                typeof input.updatedAt === "object" &&
                input.updatedAt instanceof Date
            ) {
                __D1.updatedAt = input.updatedAt;
            } else if (typeof input.updatedAt === "string") {
                __D1.updatedAt = new Date(input.updatedAt);
            } else {
                $fallback(
                    "/updatedAt",
                    "/properties/updatedAt",
                    "Expected instanceof Date or ISO Date string at /updatedAt",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: Post): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"id":`;
        if (input.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.id.length; i++) {
                __point__ = input.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.id}"`;
                } else {
                    json += `"${__result__}${input.id.slice(__last__)}"`;
                }
            }
        } else if (input.id.length < 5000 && !STR_ESCAPE.test(input.id)) {
            json += `"${input.id}"`;
        } else {
            json += JSON.stringify(input.id);
        }
        json += `,"title":`;
        if (input.title.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.title.length; i++) {
                __point__ = input.title.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.title);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.title.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.title}"`;
                } else {
                    json += `"${__result__}${input.title.slice(__last__)}"`;
                }
            }
        } else if (input.title.length < 5000 && !STR_ESCAPE.test(input.title)) {
            json += `"${input.title}"`;
        } else {
            json += JSON.stringify(input.title);
        }
        json += `,"type":"${input.type}"`;
        if (typeof input.description === "string") {
            json += `,"description":`;
            if (input.description.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < input.description.length; i++) {
                    __point__ = input.description.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(input.description);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            input.description.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${input.description}"`;
                    } else {
                        json += `"${__result__}${input.description.slice(__last__)}"`;
                    }
                }
            } else if (
                input.description.length < 5000 &&
                !STR_ESCAPE.test(input.description)
            ) {
                json += `"${input.description}"`;
            } else {
                json += JSON.stringify(input.description);
            }
        } else {
            json += ',"description":null';
        }
        json += `,"content":`;
        if (input.content.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.content.length; i++) {
                __point__ = input.content.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.content);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.content.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.content}"`;
                } else {
                    json += `"${__result__}${input.content.slice(__last__)}"`;
                }
            }
        } else if (
            input.content.length < 5000 &&
            !STR_ESCAPE.test(input.content)
        ) {
            json += `"${input.content}"`;
        } else {
            json += JSON.stringify(input.content);
        }
        json += ',"tags":[';
        for (let i = 0; i < input.tags.length; i++) {
            const inputTagsItem = input.tags[i];
            if (i !== 0) {
                json += ",";
            }
            json += ``;
            if (inputTagsItem.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputTagsItem.length; i++) {
                    __point__ = inputTagsItem.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputTagsItem);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ += inputTagsItem.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputTagsItem}"`;
                    } else {
                        json += `"${__result__}${inputTagsItem.slice(__last__)}"`;
                    }
                }
            } else if (
                inputTagsItem.length < 5000 &&
                !STR_ESCAPE.test(inputTagsItem)
            ) {
                json += `"${inputTagsItem}"`;
            } else {
                json += JSON.stringify(inputTagsItem);
            }
        }
        json += "]";
        json += `,"authorId":`;
        if (input.authorId.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.authorId.length; i++) {
                __point__ = input.authorId.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.authorId);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.authorId.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.authorId}"`;
                } else {
                    json += `"${__result__}${input.authorId.slice(__last__)}"`;
                }
            }
        } else if (
            input.authorId.length < 5000 &&
            !STR_ESCAPE.test(input.authorId)
        ) {
            json += `"${input.authorId}"`;
        } else {
            json += JSON.stringify(input.authorId);
        }
        json += ',"author":{';
        json += `"id":`;
        if (input.author.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.author.id.length; i++) {
                __point__ = input.author.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.author.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.author.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.author.id}"`;
                } else {
                    json += `"${__result__}${input.author.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.author.id.length < 5000 &&
            !STR_ESCAPE.test(input.author.id)
        ) {
            json += `"${input.author.id}"`;
        } else {
            json += JSON.stringify(input.author.id);
        }
        json += `,"name":`;
        if (input.author.name.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.author.name.length; i++) {
                __point__ = input.author.name.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.author.name);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.author.name.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.author.name}"`;
                } else {
                    json += `"${__result__}${input.author.name.slice(__last__)}"`;
                }
            }
        } else if (
            input.author.name.length < 5000 &&
            !STR_ESCAPE.test(input.author.name)
        ) {
            json += `"${input.author.name}"`;
        } else {
            json += JSON.stringify(input.author.name);
        }
        if (typeof input.author.bio === "string") {
            json += `,"bio":`;
            if (input.author.bio.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < input.author.bio.length; i++) {
                    __point__ = input.author.bio.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(input.author.bio);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            input.author.bio.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${input.author.bio}"`;
                    } else {
                        json += `"${__result__}${input.author.bio.slice(__last__)}"`;
                    }
                }
            } else if (
                input.author.bio.length < 5000 &&
                !STR_ESCAPE.test(input.author.bio)
            ) {
                json += `"${input.author.bio}"`;
            } else {
                json += JSON.stringify(input.author.bio);
            }
        } else {
            json += ',"bio":null';
        }
        json += `,"createdAt":"${input.author.createdAt.toISOString()}"`;
        json += `,"updatedAt":"${input.author.updatedAt.toISOString()}"`;
        json += "}";
        json += `,"createdAt":"${input.createdAt.toISOString()}"`;
        json += `,"updatedAt":"${input.updatedAt.toISOString()}"`;
        json += "}";
        return json;
    },
};
export type PostType = "text" | "image" | "video";
export interface Author {
    id: string;
    name: string;
    bio: string | null;
    createdAt: Date;
    updatedAt: Date;
}

export interface PostListParams {
    limit: number;
    type?: PostType;
}
const $$PostListParams = {
    parse(input: Record<any, any>): PostListParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.limit === "number" &&
                    Number.isInteger(json.limit) &&
                    json.limit >= -128 &&
                    json.limit <= 127
                ) {
                    __D1.limit = json.limit;
                } else {
                    $fallback(
                        "/limit",
                        "/properties/limit",
                        "Expected valid integer between -128 and 127",
                    );
                }
                if (typeof json.type === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof json.type === "string") {
                        if (
                            json.type === "text" ||
                            json.type === "image" ||
                            json.type === "video"
                        ) {
                            __D1.type = json.type;
                        } else {
                            $fallback(
                                "/type",
                                "/optionalProperties/type",
                                "Expected one of the following values: [text, image, video] at /type.",
                            );
                        }
                    } else {
                        $fallback(
                            "/type",
                            "/optionalProperties/type",
                            "Expected one of the following values: [text, image, video] at /type.",
                        );
                    }
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.limit === "number" &&
                Number.isInteger(input.limit) &&
                input.limit >= -128 &&
                input.limit <= 127
            ) {
                __D1.limit = input.limit;
            } else {
                $fallback(
                    "/limit",
                    "/properties/limit",
                    "Expected valid integer between -128 and 127",
                );
            }
            if (typeof input.type === "undefined") {
                // ignore undefined
            } else {
                if (typeof input.type === "string") {
                    if (
                        input.type === "text" ||
                        input.type === "image" ||
                        input.type === "video"
                    ) {
                        __D1.type = input.type;
                    } else {
                        $fallback(
                            "/type",
                            "/optionalProperties/type",
                            "Expected one of the following values: [text, image, video] at /type.",
                        );
                    }
                } else {
                    $fallback(
                        "/type",
                        "/optionalProperties/type",
                        "Expected one of the following values: [text, image, video] at /type.",
                    );
                }
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: PostListParams): string {
        let json = "";

        json += "{";

        if (Number.isNaN(input.limit)) {
            throw new Error("Expected number at /limit got NaN");
        }
        json += `"limit":${input.limit}`;
        if (typeof input.type !== "undefined") {
            json += `,"type":"${input.type}"`;
        }
        json += "}";
        return json;
    },
};

export interface PostListResponse {
    total: number;
    items: Array<Post>;
}
const $$PostListResponse = {
    parse(input: Record<any, any>): PostListResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.total === "number" &&
                    Number.isInteger(json.total) &&
                    json.total >= -2147483648 &&
                    json.total <= 2147483647
                ) {
                    __D1.total = json.total;
                } else {
                    $fallback(
                        "/total",
                        "/properties/total",
                        "Expected valid integer between -2147483648 and 2147483647",
                    );
                }
                if (Array.isArray(json.items)) {
                    const __D2 = [];
                    for (const __D2AItem of json.items) {
                        let __D2AItemAResult;
                        if (
                            typeof __D2AItem === "object" &&
                            __D2AItem !== null
                        ) {
                            const __D3 = {};
                            if (typeof __D2AItem.id === "string") {
                                __D3.id = __D2AItem.id;
                            } else {
                                $fallback(
                                    "/items/[0]/id",
                                    "/properties/items/elements/properties/id/type",
                                    "Expected string at /items/[0]/id",
                                );
                            }
                            if (typeof __D2AItem.title === "string") {
                                __D3.title = __D2AItem.title;
                            } else {
                                $fallback(
                                    "/items/[0]/title",
                                    "/properties/items/elements/properties/title/type",
                                    "Expected string at /items/[0]/title",
                                );
                            }
                            if (typeof __D2AItem.type === "string") {
                                if (
                                    __D2AItem.type === "text" ||
                                    __D2AItem.type === "image" ||
                                    __D2AItem.type === "video"
                                ) {
                                    __D3.type = __D2AItem.type;
                                } else {
                                    $fallback(
                                        "/items/[0]/type",
                                        "/properties/items/elements/properties/type",
                                        "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                                    );
                                }
                            } else {
                                $fallback(
                                    "/items/[0]/type",
                                    "/properties/items/elements/properties/type",
                                    "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                                );
                            }
                            if (__D2AItem.description === null) {
                                __D3.description = __D2AItem.description;
                            } else {
                                if (typeof __D2AItem.description === "string") {
                                    __D3.description = __D2AItem.description;
                                } else {
                                    $fallback(
                                        "/items/[0]/description",
                                        "/properties/items/elements/properties/description/type",
                                        "Expected string at /items/[0]/description",
                                    );
                                }
                            }
                            if (typeof __D2AItem.content === "string") {
                                __D3.content = __D2AItem.content;
                            } else {
                                $fallback(
                                    "/items/[0]/content",
                                    "/properties/items/elements/properties/content/type",
                                    "Expected string at /items/[0]/content",
                                );
                            }
                            if (Array.isArray(__D2AItem.tags)) {
                                const __D4 = [];
                                for (const __D4AItem of __D2AItem.tags) {
                                    let __D4AItemAResult;
                                    if (typeof __D4AItem === "string") {
                                        __D4AItemAResult = __D4AItem;
                                    } else {
                                        $fallback(
                                            "/items/[0]/tags/[0]",
                                            "/properties/items/elements/properties/tags/elements/type",
                                            "Expected string at /items/[0]/tags/[0]",
                                        );
                                    }
                                    __D4.push(__D4AItemAResult);
                                }
                                __D3.tags = __D4;
                            } else {
                                $fallback(
                                    "/items/[0]/tags",
                                    "/properties/items/elements/properties/tags",
                                    "Expected Array",
                                );
                            }
                            if (typeof __D2AItem.authorId === "string") {
                                __D3.authorId = __D2AItem.authorId;
                            } else {
                                $fallback(
                                    "/items/[0]/authorId",
                                    "/properties/items/elements/properties/authorId/type",
                                    "Expected string at /items/[0]/authorId",
                                );
                            }
                            if (
                                typeof __D2AItem.author === "object" &&
                                __D2AItem.author !== null
                            ) {
                                const __D4 = {};
                                if (typeof __D2AItem.author.id === "string") {
                                    __D4.id = __D2AItem.author.id;
                                } else {
                                    $fallback(
                                        "/items/[0]/author/id",
                                        "/properties/items/elements/properties/author/properties/id/type",
                                        "Expected string at /items/[0]/author/id",
                                    );
                                }
                                if (typeof __D2AItem.author.name === "string") {
                                    __D4.name = __D2AItem.author.name;
                                } else {
                                    $fallback(
                                        "/items/[0]/author/name",
                                        "/properties/items/elements/properties/author/properties/name/type",
                                        "Expected string at /items/[0]/author/name",
                                    );
                                }
                                if (__D2AItem.author.bio === null) {
                                    __D4.bio = __D2AItem.author.bio;
                                } else {
                                    if (
                                        typeof __D2AItem.author.bio === "string"
                                    ) {
                                        __D4.bio = __D2AItem.author.bio;
                                    } else {
                                        $fallback(
                                            "/items/[0]/author/bio",
                                            "/properties/items/elements/properties/author/properties/bio/type",
                                            "Expected string at /items/[0]/author/bio",
                                        );
                                    }
                                }
                                if (
                                    typeof __D2AItem.author.createdAt ===
                                        "object" &&
                                    __D2AItem.author.createdAt instanceof Date
                                ) {
                                    __D4.createdAt = __D2AItem.author.createdAt;
                                } else if (
                                    typeof __D2AItem.author.createdAt ===
                                    "string"
                                ) {
                                    __D4.createdAt = new Date(
                                        __D2AItem.author.createdAt,
                                    );
                                } else {
                                    $fallback(
                                        "/items/[0]/author/createdAt",
                                        "/properties/items/elements/properties/author/properties/createdAt",
                                        "Expected instanceof Date or ISO Date string at /items/[0]/author/createdAt",
                                    );
                                }
                                if (
                                    typeof __D2AItem.author.updatedAt ===
                                        "object" &&
                                    __D2AItem.author.updatedAt instanceof Date
                                ) {
                                    __D4.updatedAt = __D2AItem.author.updatedAt;
                                } else if (
                                    typeof __D2AItem.author.updatedAt ===
                                    "string"
                                ) {
                                    __D4.updatedAt = new Date(
                                        __D2AItem.author.updatedAt,
                                    );
                                } else {
                                    $fallback(
                                        "/items/[0]/author/updatedAt",
                                        "/properties/items/elements/properties/author/properties/updatedAt",
                                        "Expected instanceof Date or ISO Date string at /items/[0]/author/updatedAt",
                                    );
                                }
                                __D3.author = __D4;
                            } else {
                                $fallback(
                                    "/items/[0]/author",
                                    "/properties/items/elements/properties/author",
                                    "Expected object",
                                );
                            }
                            if (
                                typeof __D2AItem.createdAt === "object" &&
                                __D2AItem.createdAt instanceof Date
                            ) {
                                __D3.createdAt = __D2AItem.createdAt;
                            } else if (
                                typeof __D2AItem.createdAt === "string"
                            ) {
                                __D3.createdAt = new Date(__D2AItem.createdAt);
                            } else {
                                $fallback(
                                    "/items/[0]/createdAt",
                                    "/properties/items/elements/properties/createdAt",
                                    "Expected instanceof Date or ISO Date string at /items/[0]/createdAt",
                                );
                            }
                            if (
                                typeof __D2AItem.updatedAt === "object" &&
                                __D2AItem.updatedAt instanceof Date
                            ) {
                                __D3.updatedAt = __D2AItem.updatedAt;
                            } else if (
                                typeof __D2AItem.updatedAt === "string"
                            ) {
                                __D3.updatedAt = new Date(__D2AItem.updatedAt);
                            } else {
                                $fallback(
                                    "/items/[0]/updatedAt",
                                    "/properties/items/elements/properties/updatedAt",
                                    "Expected instanceof Date or ISO Date string at /items/[0]/updatedAt",
                                );
                            }
                            __D2AItemAResult = __D3;
                        } else {
                            $fallback(
                                "/items/[0]",
                                "/properties/items/elements",
                                "Expected object",
                            );
                        }
                        __D2.push(__D2AItemAResult);
                    }
                    __D1.items = __D2;
                } else {
                    $fallback("/items", "/properties/items", "Expected Array");
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.total === "number" &&
                Number.isInteger(input.total) &&
                input.total >= -2147483648 &&
                input.total <= 2147483647
            ) {
                __D1.total = input.total;
            } else {
                $fallback(
                    "/total",
                    "/properties/total",
                    "Expected valid integer between -2147483648 and 2147483647",
                );
            }
            if (Array.isArray(input.items)) {
                const __D2 = [];
                for (const __D2AItem of input.items) {
                    let __D2AItemAResult;
                    if (typeof __D2AItem === "object" && __D2AItem !== null) {
                        const __D3 = {};
                        if (typeof __D2AItem.id === "string") {
                            __D3.id = __D2AItem.id;
                        } else {
                            $fallback(
                                "/items/[0]/id",
                                "/properties/items/elements/properties/id/type",
                                "Expected string at /items/[0]/id",
                            );
                        }
                        if (typeof __D2AItem.title === "string") {
                            __D3.title = __D2AItem.title;
                        } else {
                            $fallback(
                                "/items/[0]/title",
                                "/properties/items/elements/properties/title/type",
                                "Expected string at /items/[0]/title",
                            );
                        }
                        if (typeof __D2AItem.type === "string") {
                            if (
                                __D2AItem.type === "text" ||
                                __D2AItem.type === "image" ||
                                __D2AItem.type === "video"
                            ) {
                                __D3.type = __D2AItem.type;
                            } else {
                                $fallback(
                                    "/items/[0]/type",
                                    "/properties/items/elements/properties/type",
                                    "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                                );
                            }
                        } else {
                            $fallback(
                                "/items/[0]/type",
                                "/properties/items/elements/properties/type",
                                "Expected one of the following values: [text, image, video] at /items/[0]/type.",
                            );
                        }
                        if (__D2AItem.description === null) {
                            __D3.description = __D2AItem.description;
                        } else {
                            if (typeof __D2AItem.description === "string") {
                                __D3.description = __D2AItem.description;
                            } else {
                                $fallback(
                                    "/items/[0]/description",
                                    "/properties/items/elements/properties/description/type",
                                    "Expected string at /items/[0]/description",
                                );
                            }
                        }
                        if (typeof __D2AItem.content === "string") {
                            __D3.content = __D2AItem.content;
                        } else {
                            $fallback(
                                "/items/[0]/content",
                                "/properties/items/elements/properties/content/type",
                                "Expected string at /items/[0]/content",
                            );
                        }
                        if (Array.isArray(__D2AItem.tags)) {
                            const __D4 = [];
                            for (const __D4AItem of __D2AItem.tags) {
                                let __D4AItemAResult;
                                if (typeof __D4AItem === "string") {
                                    __D4AItemAResult = __D4AItem;
                                } else {
                                    $fallback(
                                        "/items/[0]/tags/[0]",
                                        "/properties/items/elements/properties/tags/elements/type",
                                        "Expected string at /items/[0]/tags/[0]",
                                    );
                                }
                                __D4.push(__D4AItemAResult);
                            }
                            __D3.tags = __D4;
                        } else {
                            $fallback(
                                "/items/[0]/tags",
                                "/properties/items/elements/properties/tags",
                                "Expected Array",
                            );
                        }
                        if (typeof __D2AItem.authorId === "string") {
                            __D3.authorId = __D2AItem.authorId;
                        } else {
                            $fallback(
                                "/items/[0]/authorId",
                                "/properties/items/elements/properties/authorId/type",
                                "Expected string at /items/[0]/authorId",
                            );
                        }
                        if (
                            typeof __D2AItem.author === "object" &&
                            __D2AItem.author !== null
                        ) {
                            const __D4 = {};
                            if (typeof __D2AItem.author.id === "string") {
                                __D4.id = __D2AItem.author.id;
                            } else {
                                $fallback(
                                    "/items/[0]/author/id",
                                    "/properties/items/elements/properties/author/properties/id/type",
                                    "Expected string at /items/[0]/author/id",
                                );
                            }
                            if (typeof __D2AItem.author.name === "string") {
                                __D4.name = __D2AItem.author.name;
                            } else {
                                $fallback(
                                    "/items/[0]/author/name",
                                    "/properties/items/elements/properties/author/properties/name/type",
                                    "Expected string at /items/[0]/author/name",
                                );
                            }
                            if (__D2AItem.author.bio === null) {
                                __D4.bio = __D2AItem.author.bio;
                            } else {
                                if (typeof __D2AItem.author.bio === "string") {
                                    __D4.bio = __D2AItem.author.bio;
                                } else {
                                    $fallback(
                                        "/items/[0]/author/bio",
                                        "/properties/items/elements/properties/author/properties/bio/type",
                                        "Expected string at /items/[0]/author/bio",
                                    );
                                }
                            }
                            if (
                                typeof __D2AItem.author.createdAt ===
                                    "object" &&
                                __D2AItem.author.createdAt instanceof Date
                            ) {
                                __D4.createdAt = __D2AItem.author.createdAt;
                            } else if (
                                typeof __D2AItem.author.createdAt === "string"
                            ) {
                                __D4.createdAt = new Date(
                                    __D2AItem.author.createdAt,
                                );
                            } else {
                                $fallback(
                                    "/items/[0]/author/createdAt",
                                    "/properties/items/elements/properties/author/properties/createdAt",
                                    "Expected instanceof Date or ISO Date string at /items/[0]/author/createdAt",
                                );
                            }
                            if (
                                typeof __D2AItem.author.updatedAt ===
                                    "object" &&
                                __D2AItem.author.updatedAt instanceof Date
                            ) {
                                __D4.updatedAt = __D2AItem.author.updatedAt;
                            } else if (
                                typeof __D2AItem.author.updatedAt === "string"
                            ) {
                                __D4.updatedAt = new Date(
                                    __D2AItem.author.updatedAt,
                                );
                            } else {
                                $fallback(
                                    "/items/[0]/author/updatedAt",
                                    "/properties/items/elements/properties/author/properties/updatedAt",
                                    "Expected instanceof Date or ISO Date string at /items/[0]/author/updatedAt",
                                );
                            }
                            __D3.author = __D4;
                        } else {
                            $fallback(
                                "/items/[0]/author",
                                "/properties/items/elements/properties/author",
                                "Expected object",
                            );
                        }
                        if (
                            typeof __D2AItem.createdAt === "object" &&
                            __D2AItem.createdAt instanceof Date
                        ) {
                            __D3.createdAt = __D2AItem.createdAt;
                        } else if (typeof __D2AItem.createdAt === "string") {
                            __D3.createdAt = new Date(__D2AItem.createdAt);
                        } else {
                            $fallback(
                                "/items/[0]/createdAt",
                                "/properties/items/elements/properties/createdAt",
                                "Expected instanceof Date or ISO Date string at /items/[0]/createdAt",
                            );
                        }
                        if (
                            typeof __D2AItem.updatedAt === "object" &&
                            __D2AItem.updatedAt instanceof Date
                        ) {
                            __D3.updatedAt = __D2AItem.updatedAt;
                        } else if (typeof __D2AItem.updatedAt === "string") {
                            __D3.updatedAt = new Date(__D2AItem.updatedAt);
                        } else {
                            $fallback(
                                "/items/[0]/updatedAt",
                                "/properties/items/elements/properties/updatedAt",
                                "Expected instanceof Date or ISO Date string at /items/[0]/updatedAt",
                            );
                        }
                        __D2AItemAResult = __D3;
                    } else {
                        $fallback(
                            "/items/[0]",
                            "/properties/items/elements",
                            "Expected object",
                        );
                    }
                    __D2.push(__D2AItemAResult);
                }
                __D1.items = __D2;
            } else {
                $fallback("/items", "/properties/items", "Expected Array");
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: PostListResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";

        if (Number.isNaN(input.total)) {
            throw new Error("Expected number at /total got NaN");
        }
        json += `"total":${input.total}`;
        json += ',"items":[';
        for (let i = 0; i < input.items.length; i++) {
            const inputItemsItem = input.items[i];
            if (i !== 0) {
                json += ",";
            }
            json += "{";
            json += `"id":`;
            if (inputItemsItem.id.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.id.length; i++) {
                    __point__ = inputItemsItem.id.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.id);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.id.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.id}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.id.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.id.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.id)
            ) {
                json += `"${inputItemsItem.id}"`;
            } else {
                json += JSON.stringify(inputItemsItem.id);
            }
            json += `,"title":`;
            if (inputItemsItem.title.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.title.length; i++) {
                    __point__ = inputItemsItem.title.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.title);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.title.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.title}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.title.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.title.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.title)
            ) {
                json += `"${inputItemsItem.title}"`;
            } else {
                json += JSON.stringify(inputItemsItem.title);
            }
            json += `,"type":"${inputItemsItem.type}"`;
            if (typeof inputItemsItem.description === "string") {
                json += `,"description":`;
                if (inputItemsItem.description.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < inputItemsItem.description.length;
                        i++
                    ) {
                        __point__ = inputItemsItem.description.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(inputItemsItem.description);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                inputItemsItem.description.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${inputItemsItem.description}"`;
                        } else {
                            json += `"${__result__}${inputItemsItem.description.slice(__last__)}"`;
                        }
                    }
                } else if (
                    inputItemsItem.description.length < 5000 &&
                    !STR_ESCAPE.test(inputItemsItem.description)
                ) {
                    json += `"${inputItemsItem.description}"`;
                } else {
                    json += JSON.stringify(inputItemsItem.description);
                }
            } else {
                json += ',"description":null';
            }
            json += `,"content":`;
            if (inputItemsItem.content.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.content.length; i++) {
                    __point__ = inputItemsItem.content.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.content);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.content.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.content}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.content.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.content.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.content)
            ) {
                json += `"${inputItemsItem.content}"`;
            } else {
                json += JSON.stringify(inputItemsItem.content);
            }
            json += ',"tags":[';
            for (let i = 0; i < inputItemsItem.tags.length; i++) {
                const inputItemsItemTagsItem = inputItemsItem.tags[i];
                if (i !== 0) {
                    json += ",";
                }
                json += ``;
                if (inputItemsItemTagsItem.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < inputItemsItemTagsItem.length; i++) {
                        __point__ = inputItemsItemTagsItem.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(inputItemsItemTagsItem);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                inputItemsItemTagsItem.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${inputItemsItemTagsItem}"`;
                        } else {
                            json += `"${__result__}${inputItemsItemTagsItem.slice(__last__)}"`;
                        }
                    }
                } else if (
                    inputItemsItemTagsItem.length < 5000 &&
                    !STR_ESCAPE.test(inputItemsItemTagsItem)
                ) {
                    json += `"${inputItemsItemTagsItem}"`;
                } else {
                    json += JSON.stringify(inputItemsItemTagsItem);
                }
            }
            json += "]";
            json += `,"authorId":`;
            if (inputItemsItem.authorId.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.authorId.length; i++) {
                    __point__ = inputItemsItem.authorId.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.authorId);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.authorId.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.authorId}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.authorId.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.authorId.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.authorId)
            ) {
                json += `"${inputItemsItem.authorId}"`;
            } else {
                json += JSON.stringify(inputItemsItem.authorId);
            }
            json += ',"author":{';
            json += `"id":`;
            if (inputItemsItem.author.id.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.author.id.length; i++) {
                    __point__ = inputItemsItem.author.id.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.author.id);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.author.id.slice(__last__, i) + "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.author.id}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.author.id.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.author.id.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.author.id)
            ) {
                json += `"${inputItemsItem.author.id}"`;
            } else {
                json += JSON.stringify(inputItemsItem.author.id);
            }
            json += `,"name":`;
            if (inputItemsItem.author.name.length < 42) {
                let __result__ = "";
                let __last__ = -1;
                let __point__ = 255;
                let __finished__ = false;
                for (let i = 0; i < inputItemsItem.author.name.length; i++) {
                    __point__ = inputItemsItem.author.name.charCodeAt(i);
                    if (
                        __point__ < 32 ||
                        (__point__ >= 0xd800 && __point__ <= 0xdfff)
                    ) {
                        json += JSON.stringify(inputItemsItem.author.name);
                        __finished__ = true;
                        break;
                    }
                    if (__point__ === 0x22 || __point__ === 0x5c) {
                        __last__ === -1 && (__last__ = 0);
                        __result__ +=
                            inputItemsItem.author.name.slice(__last__, i) +
                            "\\";
                        __last__ = i;
                    }
                }
                if (!__finished__) {
                    if (__last__ === -1) {
                        json += `"${inputItemsItem.author.name}"`;
                    } else {
                        json += `"${__result__}${inputItemsItem.author.name.slice(__last__)}"`;
                    }
                }
            } else if (
                inputItemsItem.author.name.length < 5000 &&
                !STR_ESCAPE.test(inputItemsItem.author.name)
            ) {
                json += `"${inputItemsItem.author.name}"`;
            } else {
                json += JSON.stringify(inputItemsItem.author.name);
            }
            if (typeof inputItemsItem.author.bio === "string") {
                json += `,"bio":`;
                if (inputItemsItem.author.bio.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < inputItemsItem.author.bio.length; i++) {
                        __point__ = inputItemsItem.author.bio.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(inputItemsItem.author.bio);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                inputItemsItem.author.bio.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${inputItemsItem.author.bio}"`;
                        } else {
                            json += `"${__result__}${inputItemsItem.author.bio.slice(__last__)}"`;
                        }
                    }
                } else if (
                    inputItemsItem.author.bio.length < 5000 &&
                    !STR_ESCAPE.test(inputItemsItem.author.bio)
                ) {
                    json += `"${inputItemsItem.author.bio}"`;
                } else {
                    json += JSON.stringify(inputItemsItem.author.bio);
                }
            } else {
                json += ',"bio":null';
            }
            json += `,"createdAt":"${inputItemsItem.author.createdAt.toISOString()}"`;
            json += `,"updatedAt":"${inputItemsItem.author.updatedAt.toISOString()}"`;
            json += "}";
            json += `,"createdAt":"${inputItemsItem.createdAt.toISOString()}"`;
            json += `,"updatedAt":"${inputItemsItem.updatedAt.toISOString()}"`;
            json += "}";
        }
        json += "]";
        json += "}";
        return json;
    },
};

export type PostEvent =
    | PostEventPostCreated
    | PostEventPostDeleted
    | PostEventPostUpdated
    | PostEventPostLiked
    | PostEventPostCommented;
const $$PostEvent = {
    parse(input: Record<any, any>): PostEvent {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                switch (json.eventType) {
                    case "POST_CREATED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.eventType = "POST_CREATED";
                            if (typeof json.postId === "string") {
                                __D1.postId = json.postId;
                            } else {
                                $fallback(
                                    "/postId",
                                    "/mapping/properties/postId/type",
                                    "Expected string at /postId",
                                );
                            }
                            if (
                                typeof json.timestamp === "object" &&
                                json.timestamp instanceof Date
                            ) {
                                __D1.timestamp = json.timestamp;
                            } else if (typeof json.timestamp === "string") {
                                __D1.timestamp = new Date(json.timestamp);
                            } else {
                                $fallback(
                                    "/timestamp",
                                    "/mapping/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /timestamp",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "POST_DELETED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.eventType = "POST_DELETED";
                            if (typeof json.postId === "string") {
                                __D1.postId = json.postId;
                            } else {
                                $fallback(
                                    "/postId",
                                    "/mapping/properties/postId/type",
                                    "Expected string at /postId",
                                );
                            }
                            if (
                                typeof json.timestamp === "object" &&
                                json.timestamp instanceof Date
                            ) {
                                __D1.timestamp = json.timestamp;
                            } else if (typeof json.timestamp === "string") {
                                __D1.timestamp = new Date(json.timestamp);
                            } else {
                                $fallback(
                                    "/timestamp",
                                    "/mapping/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /timestamp",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "POST_UPDATED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.eventType = "POST_UPDATED";
                            if (typeof json.postId === "string") {
                                __D1.postId = json.postId;
                            } else {
                                $fallback(
                                    "/postId",
                                    "/mapping/properties/postId/type",
                                    "Expected string at /postId",
                                );
                            }
                            if (
                                typeof json.timestamp === "object" &&
                                json.timestamp instanceof Date
                            ) {
                                __D1.timestamp = json.timestamp;
                            } else if (typeof json.timestamp === "string") {
                                __D1.timestamp = new Date(json.timestamp);
                            } else {
                                $fallback(
                                    "/timestamp",
                                    "/mapping/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /timestamp",
                                );
                            }
                            if (
                                typeof json.data === "object" &&
                                json.data !== null
                            ) {
                                const __D2 = {};
                                if (typeof json.data.id === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (typeof json.data.id === "string") {
                                        __D2.id = json.data.id;
                                    } else {
                                        $fallback(
                                            "/data/id",
                                            "/mapping/properties/data/optionalProperties/id/type",
                                            "Expected string at /data/id",
                                        );
                                    }
                                }
                                if (typeof json.data.title === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (typeof json.data.title === "string") {
                                        __D2.title = json.data.title;
                                    } else {
                                        $fallback(
                                            "/data/title",
                                            "/mapping/properties/data/optionalProperties/title/type",
                                            "Expected string at /data/title",
                                        );
                                    }
                                }
                                if (typeof json.data.type === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (typeof json.data.type === "string") {
                                        if (
                                            json.data.type === "text" ||
                                            json.data.type === "image" ||
                                            json.data.type === "video"
                                        ) {
                                            __D2.type = json.data.type;
                                        } else {
                                            $fallback(
                                                "/data/type",
                                                "/mapping/properties/data/optionalProperties/type",
                                                "Expected one of the following values: [text, image, video] at /data/type.",
                                            );
                                        }
                                    } else {
                                        $fallback(
                                            "/data/type",
                                            "/mapping/properties/data/optionalProperties/type",
                                            "Expected one of the following values: [text, image, video] at /data/type.",
                                        );
                                    }
                                }
                                if (
                                    typeof json.data.description === "undefined"
                                ) {
                                    // ignore undefined
                                } else {
                                    if (json.data.description === null) {
                                        __D2.description =
                                            json.data.description;
                                    } else {
                                        if (
                                            typeof json.data.description ===
                                            "string"
                                        ) {
                                            __D2.description =
                                                json.data.description;
                                        } else {
                                            $fallback(
                                                "/data/description",
                                                "/mapping/properties/data/optionalProperties/description/type",
                                                "Expected string at /data/description",
                                            );
                                        }
                                    }
                                }
                                if (typeof json.data.content === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (typeof json.data.content === "string") {
                                        __D2.content = json.data.content;
                                    } else {
                                        $fallback(
                                            "/data/content",
                                            "/mapping/properties/data/optionalProperties/content/type",
                                            "Expected string at /data/content",
                                        );
                                    }
                                }
                                if (typeof json.data.tags === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (Array.isArray(json.data.tags)) {
                                        const __D3 = [];
                                        for (const __D3AItem of json.data
                                            .tags) {
                                            let __D3AItemAResult;
                                            if (typeof __D3AItem === "string") {
                                                __D3AItemAResult = __D3AItem;
                                            } else {
                                                $fallback(
                                                    "/data/tags/[0]",
                                                    "/mapping/properties/data/optionalProperties/tags/elements/type",
                                                    "Expected string at /data/tags/[0]",
                                                );
                                            }
                                            __D3.push(__D3AItemAResult);
                                        }
                                        __D2.tags = __D3;
                                    } else {
                                        $fallback(
                                            "/data/tags",
                                            "/mapping/properties/data/optionalProperties/tags",
                                            "Expected Array",
                                        );
                                    }
                                }
                                if (typeof json.data.authorId === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (
                                        typeof json.data.authorId === "string"
                                    ) {
                                        __D2.authorId = json.data.authorId;
                                    } else {
                                        $fallback(
                                            "/data/authorId",
                                            "/mapping/properties/data/optionalProperties/authorId/type",
                                            "Expected string at /data/authorId",
                                        );
                                    }
                                }
                                if (typeof json.data.author === "undefined") {
                                    // ignore undefined
                                } else {
                                    if (
                                        typeof json.data.author === "object" &&
                                        json.data.author !== null
                                    ) {
                                        const __D3 = {};
                                        if (
                                            typeof json.data.author.id ===
                                            "string"
                                        ) {
                                            __D3.id = json.data.author.id;
                                        } else {
                                            $fallback(
                                                "/data/author/id",
                                                "/mapping/properties/data/optionalProperties/author/properties/id/type",
                                                "Expected string at /data/author/id",
                                            );
                                        }
                                        if (
                                            typeof json.data.author.name ===
                                            "string"
                                        ) {
                                            __D3.name = json.data.author.name;
                                        } else {
                                            $fallback(
                                                "/data/author/name",
                                                "/mapping/properties/data/optionalProperties/author/properties/name/type",
                                                "Expected string at /data/author/name",
                                            );
                                        }
                                        if (json.data.author.bio === null) {
                                            __D3.bio = json.data.author.bio;
                                        } else {
                                            if (
                                                typeof json.data.author.bio ===
                                                "string"
                                            ) {
                                                __D3.bio = json.data.author.bio;
                                            } else {
                                                $fallback(
                                                    "/data/author/bio",
                                                    "/mapping/properties/data/optionalProperties/author/properties/bio/type",
                                                    "Expected string at /data/author/bio",
                                                );
                                            }
                                        }
                                        if (
                                            typeof json.data.author
                                                .createdAt === "object" &&
                                            json.data.author
                                                .createdAt instanceof Date
                                        ) {
                                            __D3.createdAt =
                                                json.data.author.createdAt;
                                        } else if (
                                            typeof json.data.author
                                                .createdAt === "string"
                                        ) {
                                            __D3.createdAt = new Date(
                                                json.data.author.createdAt,
                                            );
                                        } else {
                                            $fallback(
                                                "/data/author/createdAt",
                                                "/mapping/properties/data/optionalProperties/author/properties/createdAt",
                                                "Expected instanceof Date or ISO Date string at /data/author/createdAt",
                                            );
                                        }
                                        if (
                                            typeof json.data.author
                                                .updatedAt === "object" &&
                                            json.data.author
                                                .updatedAt instanceof Date
                                        ) {
                                            __D3.updatedAt =
                                                json.data.author.updatedAt;
                                        } else if (
                                            typeof json.data.author
                                                .updatedAt === "string"
                                        ) {
                                            __D3.updatedAt = new Date(
                                                json.data.author.updatedAt,
                                            );
                                        } else {
                                            $fallback(
                                                "/data/author/updatedAt",
                                                "/mapping/properties/data/optionalProperties/author/properties/updatedAt",
                                                "Expected instanceof Date or ISO Date string at /data/author/updatedAt",
                                            );
                                        }
                                        __D2.author = __D3;
                                    } else {
                                        $fallback(
                                            "/data/author",
                                            "/mapping/properties/data/optionalProperties/author",
                                            "Expected object",
                                        );
                                    }
                                }
                                if (
                                    typeof json.data.createdAt === "undefined"
                                ) {
                                    // ignore undefined
                                } else {
                                    if (
                                        typeof json.data.createdAt ===
                                            "object" &&
                                        json.data.createdAt instanceof Date
                                    ) {
                                        __D2.createdAt = json.data.createdAt;
                                    } else if (
                                        typeof json.data.createdAt === "string"
                                    ) {
                                        __D2.createdAt = new Date(
                                            json.data.createdAt,
                                        );
                                    } else {
                                        $fallback(
                                            "/data/createdAt",
                                            "/mapping/properties/data/optionalProperties/createdAt",
                                            "Expected instanceof Date or ISO Date string at /data/createdAt",
                                        );
                                    }
                                }
                                if (
                                    typeof json.data.updatedAt === "undefined"
                                ) {
                                    // ignore undefined
                                } else {
                                    if (
                                        typeof json.data.updatedAt ===
                                            "object" &&
                                        json.data.updatedAt instanceof Date
                                    ) {
                                        __D2.updatedAt = json.data.updatedAt;
                                    } else if (
                                        typeof json.data.updatedAt === "string"
                                    ) {
                                        __D2.updatedAt = new Date(
                                            json.data.updatedAt,
                                        );
                                    } else {
                                        $fallback(
                                            "/data/updatedAt",
                                            "/mapping/properties/data/optionalProperties/updatedAt",
                                            "Expected instanceof Date or ISO Date string at /data/updatedAt",
                                        );
                                    }
                                }
                                __D1.data = __D2;
                            } else {
                                $fallback(
                                    "/data",
                                    "/mapping/properties/data",
                                    "Expected object",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "POST_LIKED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.eventType = "POST_LIKED";
                            if (typeof json.postId === "string") {
                                __D1.postId = json.postId;
                            } else {
                                $fallback(
                                    "/postId",
                                    "/mapping/properties/postId/type",
                                    "Expected string at /postId",
                                );
                            }
                            if (
                                typeof json.timestamp === "object" &&
                                json.timestamp instanceof Date
                            ) {
                                __D1.timestamp = json.timestamp;
                            } else if (typeof json.timestamp === "string") {
                                __D1.timestamp = new Date(json.timestamp);
                            } else {
                                $fallback(
                                    "/timestamp",
                                    "/mapping/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /timestamp",
                                );
                            }
                            if (typeof json.postLikeId === "string") {
                                __D1.postLikeId = json.postLikeId;
                            } else {
                                $fallback(
                                    "/postLikeId",
                                    "/mapping/properties/postLikeId/type",
                                    "Expected string at /postLikeId",
                                );
                            }
                            if (
                                typeof json.postLikeCount === "number" &&
                                Number.isInteger(json.postLikeCount) &&
                                json.postLikeCount >= 0 &&
                                json.postLikeCount <= 4294967295
                            ) {
                                __D1.postLikeCount = json.postLikeCount;
                            } else {
                                $fallback(
                                    "/postLikeCount",
                                    "/mapping/properties/postLikeCount",
                                    "Expected valid integer between 0 and 4294967295",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    case "POST_COMMENTED": {
                        if (typeof json === "object" && json !== null) {
                            const __D1 = {};
                            __D1.eventType = "POST_COMMENTED";
                            if (typeof json.postId === "string") {
                                __D1.postId = json.postId;
                            } else {
                                $fallback(
                                    "/postId",
                                    "/mapping/properties/postId/type",
                                    "Expected string at /postId",
                                );
                            }
                            if (
                                typeof json.timestamp === "object" &&
                                json.timestamp instanceof Date
                            ) {
                                __D1.timestamp = json.timestamp;
                            } else if (typeof json.timestamp === "string") {
                                __D1.timestamp = new Date(json.timestamp);
                            } else {
                                $fallback(
                                    "/timestamp",
                                    "/mapping/properties/timestamp",
                                    "Expected instanceof Date or ISO Date string at /timestamp",
                                );
                            }
                            if (typeof json.commentId === "string") {
                                __D1.commentId = json.commentId;
                            } else {
                                $fallback(
                                    "/commentId",
                                    "/mapping/properties/commentId/type",
                                    "Expected string at /commentId",
                                );
                            }
                            if (typeof json.commentText === "string") {
                                __D1.commentText = json.commentText;
                            } else {
                                $fallback(
                                    "/commentText",
                                    "/mapping/properties/commentText/type",
                                    "Expected string at /commentText",
                                );
                            }
                            if (
                                typeof json.commentCount === "number" &&
                                Number.isInteger(json.commentCount) &&
                                json.commentCount >= 0 &&
                                json.commentCount <= 4294967295
                            ) {
                                __D1.commentCount = json.commentCount;
                            } else {
                                $fallback(
                                    "/commentCount",
                                    "/mapping/properties/commentCount",
                                    "Expected valid integer between 0 and 4294967295",
                                );
                            }
                            result = __D1;
                        } else {
                            $fallback("", "/mapping", "Expected object");
                        }
                        break;
                    }
                    default:
                        $fallback(
                            "",
                            "/mapping",
                            "json.eventType did not match one of the specified values",
                        );
                        break;
                }
            } else {
                $fallback("", "", "Expected Object.");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            switch (input.eventType) {
                case "POST_CREATED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.eventType = "POST_CREATED";
                        if (typeof input.postId === "string") {
                            __D1.postId = input.postId;
                        } else {
                            $fallback(
                                "/postId",
                                "/mapping/properties/postId/type",
                                "Expected string at /postId",
                            );
                        }
                        if (
                            typeof input.timestamp === "object" &&
                            input.timestamp instanceof Date
                        ) {
                            __D1.timestamp = input.timestamp;
                        } else if (typeof input.timestamp === "string") {
                            __D1.timestamp = new Date(input.timestamp);
                        } else {
                            $fallback(
                                "/timestamp",
                                "/mapping/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /timestamp",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "POST_DELETED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.eventType = "POST_DELETED";
                        if (typeof input.postId === "string") {
                            __D1.postId = input.postId;
                        } else {
                            $fallback(
                                "/postId",
                                "/mapping/properties/postId/type",
                                "Expected string at /postId",
                            );
                        }
                        if (
                            typeof input.timestamp === "object" &&
                            input.timestamp instanceof Date
                        ) {
                            __D1.timestamp = input.timestamp;
                        } else if (typeof input.timestamp === "string") {
                            __D1.timestamp = new Date(input.timestamp);
                        } else {
                            $fallback(
                                "/timestamp",
                                "/mapping/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /timestamp",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "POST_UPDATED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.eventType = "POST_UPDATED";
                        if (typeof input.postId === "string") {
                            __D1.postId = input.postId;
                        } else {
                            $fallback(
                                "/postId",
                                "/mapping/properties/postId/type",
                                "Expected string at /postId",
                            );
                        }
                        if (
                            typeof input.timestamp === "object" &&
                            input.timestamp instanceof Date
                        ) {
                            __D1.timestamp = input.timestamp;
                        } else if (typeof input.timestamp === "string") {
                            __D1.timestamp = new Date(input.timestamp);
                        } else {
                            $fallback(
                                "/timestamp",
                                "/mapping/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /timestamp",
                            );
                        }
                        if (
                            typeof input.data === "object" &&
                            input.data !== null
                        ) {
                            const __D2 = {};
                            if (typeof input.data.id === "undefined") {
                                // ignore undefined
                            } else {
                                if (typeof input.data.id === "string") {
                                    __D2.id = input.data.id;
                                } else {
                                    $fallback(
                                        "/data/id",
                                        "/mapping/properties/data/optionalProperties/id/type",
                                        "Expected string at /data/id",
                                    );
                                }
                            }
                            if (typeof input.data.title === "undefined") {
                                // ignore undefined
                            } else {
                                if (typeof input.data.title === "string") {
                                    __D2.title = input.data.title;
                                } else {
                                    $fallback(
                                        "/data/title",
                                        "/mapping/properties/data/optionalProperties/title/type",
                                        "Expected string at /data/title",
                                    );
                                }
                            }
                            if (typeof input.data.type === "undefined") {
                                // ignore undefined
                            } else {
                                if (typeof input.data.type === "string") {
                                    if (
                                        input.data.type === "text" ||
                                        input.data.type === "image" ||
                                        input.data.type === "video"
                                    ) {
                                        __D2.type = input.data.type;
                                    } else {
                                        $fallback(
                                            "/data/type",
                                            "/mapping/properties/data/optionalProperties/type",
                                            "Expected one of the following values: [text, image, video] at /data/type.",
                                        );
                                    }
                                } else {
                                    $fallback(
                                        "/data/type",
                                        "/mapping/properties/data/optionalProperties/type",
                                        "Expected one of the following values: [text, image, video] at /data/type.",
                                    );
                                }
                            }
                            if (typeof input.data.description === "undefined") {
                                // ignore undefined
                            } else {
                                if (input.data.description === null) {
                                    __D2.description = input.data.description;
                                } else {
                                    if (
                                        typeof input.data.description ===
                                        "string"
                                    ) {
                                        __D2.description =
                                            input.data.description;
                                    } else {
                                        $fallback(
                                            "/data/description",
                                            "/mapping/properties/data/optionalProperties/description/type",
                                            "Expected string at /data/description",
                                        );
                                    }
                                }
                            }
                            if (typeof input.data.content === "undefined") {
                                // ignore undefined
                            } else {
                                if (typeof input.data.content === "string") {
                                    __D2.content = input.data.content;
                                } else {
                                    $fallback(
                                        "/data/content",
                                        "/mapping/properties/data/optionalProperties/content/type",
                                        "Expected string at /data/content",
                                    );
                                }
                            }
                            if (typeof input.data.tags === "undefined") {
                                // ignore undefined
                            } else {
                                if (Array.isArray(input.data.tags)) {
                                    const __D3 = [];
                                    for (const __D3AItem of input.data.tags) {
                                        let __D3AItemAResult;
                                        if (typeof __D3AItem === "string") {
                                            __D3AItemAResult = __D3AItem;
                                        } else {
                                            $fallback(
                                                "/data/tags/[0]",
                                                "/mapping/properties/data/optionalProperties/tags/elements/type",
                                                "Expected string at /data/tags/[0]",
                                            );
                                        }
                                        __D3.push(__D3AItemAResult);
                                    }
                                    __D2.tags = __D3;
                                } else {
                                    $fallback(
                                        "/data/tags",
                                        "/mapping/properties/data/optionalProperties/tags",
                                        "Expected Array",
                                    );
                                }
                            }
                            if (typeof input.data.authorId === "undefined") {
                                // ignore undefined
                            } else {
                                if (typeof input.data.authorId === "string") {
                                    __D2.authorId = input.data.authorId;
                                } else {
                                    $fallback(
                                        "/data/authorId",
                                        "/mapping/properties/data/optionalProperties/authorId/type",
                                        "Expected string at /data/authorId",
                                    );
                                }
                            }
                            if (typeof input.data.author === "undefined") {
                                // ignore undefined
                            } else {
                                if (
                                    typeof input.data.author === "object" &&
                                    input.data.author !== null
                                ) {
                                    const __D3 = {};
                                    if (
                                        typeof input.data.author.id === "string"
                                    ) {
                                        __D3.id = input.data.author.id;
                                    } else {
                                        $fallback(
                                            "/data/author/id",
                                            "/mapping/properties/data/optionalProperties/author/properties/id/type",
                                            "Expected string at /data/author/id",
                                        );
                                    }
                                    if (
                                        typeof input.data.author.name ===
                                        "string"
                                    ) {
                                        __D3.name = input.data.author.name;
                                    } else {
                                        $fallback(
                                            "/data/author/name",
                                            "/mapping/properties/data/optionalProperties/author/properties/name/type",
                                            "Expected string at /data/author/name",
                                        );
                                    }
                                    if (input.data.author.bio === null) {
                                        __D3.bio = input.data.author.bio;
                                    } else {
                                        if (
                                            typeof input.data.author.bio ===
                                            "string"
                                        ) {
                                            __D3.bio = input.data.author.bio;
                                        } else {
                                            $fallback(
                                                "/data/author/bio",
                                                "/mapping/properties/data/optionalProperties/author/properties/bio/type",
                                                "Expected string at /data/author/bio",
                                            );
                                        }
                                    }
                                    if (
                                        typeof input.data.author.createdAt ===
                                            "object" &&
                                        input.data.author.createdAt instanceof
                                            Date
                                    ) {
                                        __D3.createdAt =
                                            input.data.author.createdAt;
                                    } else if (
                                        typeof input.data.author.createdAt ===
                                        "string"
                                    ) {
                                        __D3.createdAt = new Date(
                                            input.data.author.createdAt,
                                        );
                                    } else {
                                        $fallback(
                                            "/data/author/createdAt",
                                            "/mapping/properties/data/optionalProperties/author/properties/createdAt",
                                            "Expected instanceof Date or ISO Date string at /data/author/createdAt",
                                        );
                                    }
                                    if (
                                        typeof input.data.author.updatedAt ===
                                            "object" &&
                                        input.data.author.updatedAt instanceof
                                            Date
                                    ) {
                                        __D3.updatedAt =
                                            input.data.author.updatedAt;
                                    } else if (
                                        typeof input.data.author.updatedAt ===
                                        "string"
                                    ) {
                                        __D3.updatedAt = new Date(
                                            input.data.author.updatedAt,
                                        );
                                    } else {
                                        $fallback(
                                            "/data/author/updatedAt",
                                            "/mapping/properties/data/optionalProperties/author/properties/updatedAt",
                                            "Expected instanceof Date or ISO Date string at /data/author/updatedAt",
                                        );
                                    }
                                    __D2.author = __D3;
                                } else {
                                    $fallback(
                                        "/data/author",
                                        "/mapping/properties/data/optionalProperties/author",
                                        "Expected object",
                                    );
                                }
                            }
                            if (typeof input.data.createdAt === "undefined") {
                                // ignore undefined
                            } else {
                                if (
                                    typeof input.data.createdAt === "object" &&
                                    input.data.createdAt instanceof Date
                                ) {
                                    __D2.createdAt = input.data.createdAt;
                                } else if (
                                    typeof input.data.createdAt === "string"
                                ) {
                                    __D2.createdAt = new Date(
                                        input.data.createdAt,
                                    );
                                } else {
                                    $fallback(
                                        "/data/createdAt",
                                        "/mapping/properties/data/optionalProperties/createdAt",
                                        "Expected instanceof Date or ISO Date string at /data/createdAt",
                                    );
                                }
                            }
                            if (typeof input.data.updatedAt === "undefined") {
                                // ignore undefined
                            } else {
                                if (
                                    typeof input.data.updatedAt === "object" &&
                                    input.data.updatedAt instanceof Date
                                ) {
                                    __D2.updatedAt = input.data.updatedAt;
                                } else if (
                                    typeof input.data.updatedAt === "string"
                                ) {
                                    __D2.updatedAt = new Date(
                                        input.data.updatedAt,
                                    );
                                } else {
                                    $fallback(
                                        "/data/updatedAt",
                                        "/mapping/properties/data/optionalProperties/updatedAt",
                                        "Expected instanceof Date or ISO Date string at /data/updatedAt",
                                    );
                                }
                            }
                            __D1.data = __D2;
                        } else {
                            $fallback(
                                "/data",
                                "/mapping/properties/data",
                                "Expected object",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "POST_LIKED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.eventType = "POST_LIKED";
                        if (typeof input.postId === "string") {
                            __D1.postId = input.postId;
                        } else {
                            $fallback(
                                "/postId",
                                "/mapping/properties/postId/type",
                                "Expected string at /postId",
                            );
                        }
                        if (
                            typeof input.timestamp === "object" &&
                            input.timestamp instanceof Date
                        ) {
                            __D1.timestamp = input.timestamp;
                        } else if (typeof input.timestamp === "string") {
                            __D1.timestamp = new Date(input.timestamp);
                        } else {
                            $fallback(
                                "/timestamp",
                                "/mapping/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /timestamp",
                            );
                        }
                        if (typeof input.postLikeId === "string") {
                            __D1.postLikeId = input.postLikeId;
                        } else {
                            $fallback(
                                "/postLikeId",
                                "/mapping/properties/postLikeId/type",
                                "Expected string at /postLikeId",
                            );
                        }
                        if (
                            typeof input.postLikeCount === "number" &&
                            Number.isInteger(input.postLikeCount) &&
                            input.postLikeCount >= 0 &&
                            input.postLikeCount <= 4294967295
                        ) {
                            __D1.postLikeCount = input.postLikeCount;
                        } else {
                            $fallback(
                                "/postLikeCount",
                                "/mapping/properties/postLikeCount",
                                "Expected valid integer between 0 and 4294967295",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                case "POST_COMMENTED": {
                    if (typeof input === "object" && input !== null) {
                        const __D1 = {};
                        __D1.eventType = "POST_COMMENTED";
                        if (typeof input.postId === "string") {
                            __D1.postId = input.postId;
                        } else {
                            $fallback(
                                "/postId",
                                "/mapping/properties/postId/type",
                                "Expected string at /postId",
                            );
                        }
                        if (
                            typeof input.timestamp === "object" &&
                            input.timestamp instanceof Date
                        ) {
                            __D1.timestamp = input.timestamp;
                        } else if (typeof input.timestamp === "string") {
                            __D1.timestamp = new Date(input.timestamp);
                        } else {
                            $fallback(
                                "/timestamp",
                                "/mapping/properties/timestamp",
                                "Expected instanceof Date or ISO Date string at /timestamp",
                            );
                        }
                        if (typeof input.commentId === "string") {
                            __D1.commentId = input.commentId;
                        } else {
                            $fallback(
                                "/commentId",
                                "/mapping/properties/commentId/type",
                                "Expected string at /commentId",
                            );
                        }
                        if (typeof input.commentText === "string") {
                            __D1.commentText = input.commentText;
                        } else {
                            $fallback(
                                "/commentText",
                                "/mapping/properties/commentText/type",
                                "Expected string at /commentText",
                            );
                        }
                        if (
                            typeof input.commentCount === "number" &&
                            Number.isInteger(input.commentCount) &&
                            input.commentCount >= 0 &&
                            input.commentCount <= 4294967295
                        ) {
                            __D1.commentCount = input.commentCount;
                        } else {
                            $fallback(
                                "/commentCount",
                                "/mapping/properties/commentCount",
                                "Expected valid integer between 0 and 4294967295",
                            );
                        }
                        result = __D1;
                    } else {
                        $fallback("", "/mapping", "Expected object");
                    }
                    break;
                }
                default:
                    $fallback(
                        "",
                        "/mapping",
                        "input.eventType did not match one of the specified values",
                    );
                    break;
            }
        } else {
            $fallback("", "", "Expected Object.");
        }
        return result;
    },
    serialize(input: PostEvent): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        switch (input.eventType) {
            case "POST_CREATED": {
                json += "{";
                json += `"eventType":"POST_CREATED"`;
                json += `,"postId":`;
                if (input.postId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postId.length; i++) {
                        __point__ = input.postId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postId}"`;
                        } else {
                            json += `"${__result__}${input.postId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postId.length < 5000 &&
                    !STR_ESCAPE.test(input.postId)
                ) {
                    json += `"${input.postId}"`;
                } else {
                    json += JSON.stringify(input.postId);
                }
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
                json += "}";
                break;
            }
            case "POST_DELETED": {
                json += "{";
                json += `"eventType":"POST_DELETED"`;
                json += `,"postId":`;
                if (input.postId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postId.length; i++) {
                        __point__ = input.postId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postId}"`;
                        } else {
                            json += `"${__result__}${input.postId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postId.length < 5000 &&
                    !STR_ESCAPE.test(input.postId)
                ) {
                    json += `"${input.postId}"`;
                } else {
                    json += JSON.stringify(input.postId);
                }
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
                json += "}";
                break;
            }
            case "POST_UPDATED": {
                json += "{";
                json += `"eventType":"POST_UPDATED"`;
                json += `,"postId":`;
                if (input.postId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postId.length; i++) {
                        __point__ = input.postId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postId}"`;
                        } else {
                            json += `"${__result__}${input.postId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postId.length < 5000 &&
                    !STR_ESCAPE.test(input.postId)
                ) {
                    json += `"${input.postId}"`;
                } else {
                    json += JSON.stringify(input.postId);
                }
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
                json += ',"data":{';
                let dataHasFields = false;
                if (typeof input.data.id !== "undefined") {
                    if (dataHasFields) {
                        json += `,"id":`;
                        if (input.data.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (let i = 0; i < input.data.id.length; i++) {
                                __point__ = input.data.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.id);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.id.slice(__last__, i) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.id}"`;
                                } else {
                                    json += `"${__result__}${input.data.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.id.length < 5000 &&
                            !STR_ESCAPE.test(input.data.id)
                        ) {
                            json += `"${input.data.id}"`;
                        } else {
                            json += JSON.stringify(input.data.id);
                        }
                    } else {
                        json += `"id":`;
                        if (input.data.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (let i = 0; i < input.data.id.length; i++) {
                                __point__ = input.data.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.id);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.id.slice(__last__, i) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.id}"`;
                                } else {
                                    json += `"${__result__}${input.data.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.id.length < 5000 &&
                            !STR_ESCAPE.test(input.data.id)
                        ) {
                            json += `"${input.data.id}"`;
                        } else {
                            json += JSON.stringify(input.data.id);
                        }
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.title !== "undefined") {
                    if (dataHasFields) {
                        json += `,"title":`;
                        if (input.data.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (let i = 0; i < input.data.title.length; i++) {
                                __point__ = input.data.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.title);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.title.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.title}"`;
                                } else {
                                    json += `"${__result__}${input.data.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.title.length < 5000 &&
                            !STR_ESCAPE.test(input.data.title)
                        ) {
                            json += `"${input.data.title}"`;
                        } else {
                            json += JSON.stringify(input.data.title);
                        }
                    } else {
                        json += `"title":`;
                        if (input.data.title.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (let i = 0; i < input.data.title.length; i++) {
                                __point__ = input.data.title.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.title);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.title.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.title}"`;
                                } else {
                                    json += `"${__result__}${input.data.title.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.title.length < 5000 &&
                            !STR_ESCAPE.test(input.data.title)
                        ) {
                            json += `"${input.data.title}"`;
                        } else {
                            json += JSON.stringify(input.data.title);
                        }
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.type !== "undefined") {
                    if (dataHasFields) {
                        json += `,"type":"${input.data.type}"`;
                    } else {
                        json += `"type":"${input.data.type}"`;
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.description !== "undefined") {
                    if (dataHasFields) {
                        if (typeof input.data.description === "string") {
                            json += `,"description":`;
                            if (input.data.description.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < input.data.description.length;
                                    i++
                                ) {
                                    __point__ =
                                        input.data.description.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json += JSON.stringify(
                                            input.data.description,
                                        );
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            input.data.description.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${input.data.description}"`;
                                    } else {
                                        json += `"${__result__}${input.data.description.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                input.data.description.length < 5000 &&
                                !STR_ESCAPE.test(input.data.description)
                            ) {
                                json += `"${input.data.description}"`;
                            } else {
                                json += JSON.stringify(input.data.description);
                            }
                        } else {
                            json += ',"description":null';
                        }
                    } else {
                        if (typeof input.data.description === "string") {
                            json += `"description":`;
                            if (input.data.description.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < input.data.description.length;
                                    i++
                                ) {
                                    __point__ =
                                        input.data.description.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json += JSON.stringify(
                                            input.data.description,
                                        );
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            input.data.description.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${input.data.description}"`;
                                    } else {
                                        json += `"${__result__}${input.data.description.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                input.data.description.length < 5000 &&
                                !STR_ESCAPE.test(input.data.description)
                            ) {
                                json += `"${input.data.description}"`;
                            } else {
                                json += JSON.stringify(input.data.description);
                            }
                        } else {
                            json += '"description":null';
                        }
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.content !== "undefined") {
                    if (dataHasFields) {
                        json += `,"content":`;
                        if (input.data.content.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.content.length;
                                i++
                            ) {
                                __point__ = input.data.content.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.content);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.content.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.content}"`;
                                } else {
                                    json += `"${__result__}${input.data.content.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.content.length < 5000 &&
                            !STR_ESCAPE.test(input.data.content)
                        ) {
                            json += `"${input.data.content}"`;
                        } else {
                            json += JSON.stringify(input.data.content);
                        }
                    } else {
                        json += `"content":`;
                        if (input.data.content.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.content.length;
                                i++
                            ) {
                                __point__ = input.data.content.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.content);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.content.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.content}"`;
                                } else {
                                    json += `"${__result__}${input.data.content.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.content.length < 5000 &&
                            !STR_ESCAPE.test(input.data.content)
                        ) {
                            json += `"${input.data.content}"`;
                        } else {
                            json += JSON.stringify(input.data.content);
                        }
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.tags !== "undefined") {
                    if (dataHasFields) {
                        json += ',"tags":[';
                        for (let i = 0; i < input.data.tags.length; i++) {
                            const inputDataTagsItem = input.data.tags[i];
                            if (i !== 0) {
                                json += ",";
                            }
                            json += ``;
                            if (inputDataTagsItem.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < inputDataTagsItem.length;
                                    i++
                                ) {
                                    __point__ = inputDataTagsItem.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json +=
                                            JSON.stringify(inputDataTagsItem);
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            inputDataTagsItem.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${inputDataTagsItem}"`;
                                    } else {
                                        json += `"${__result__}${inputDataTagsItem.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                inputDataTagsItem.length < 5000 &&
                                !STR_ESCAPE.test(inputDataTagsItem)
                            ) {
                                json += `"${inputDataTagsItem}"`;
                            } else {
                                json += JSON.stringify(inputDataTagsItem);
                            }
                        }
                        json += "]";
                    } else {
                        json += '"tags":[';
                        for (let i = 0; i < input.data.tags.length; i++) {
                            const inputDataTagsItem = input.data.tags[i];
                            if (i !== 0) {
                                json += ",";
                            }
                            json += ``;
                            if (inputDataTagsItem.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < inputDataTagsItem.length;
                                    i++
                                ) {
                                    __point__ = inputDataTagsItem.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json +=
                                            JSON.stringify(inputDataTagsItem);
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            inputDataTagsItem.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${inputDataTagsItem}"`;
                                    } else {
                                        json += `"${__result__}${inputDataTagsItem.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                inputDataTagsItem.length < 5000 &&
                                !STR_ESCAPE.test(inputDataTagsItem)
                            ) {
                                json += `"${inputDataTagsItem}"`;
                            } else {
                                json += JSON.stringify(inputDataTagsItem);
                            }
                        }
                        json += "]";
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.authorId !== "undefined") {
                    if (dataHasFields) {
                        json += `,"authorId":`;
                        if (input.data.authorId.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.authorId.length;
                                i++
                            ) {
                                __point__ = input.data.authorId.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.authorId);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.authorId.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.authorId}"`;
                                } else {
                                    json += `"${__result__}${input.data.authorId.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.authorId.length < 5000 &&
                            !STR_ESCAPE.test(input.data.authorId)
                        ) {
                            json += `"${input.data.authorId}"`;
                        } else {
                            json += JSON.stringify(input.data.authorId);
                        }
                    } else {
                        json += `"authorId":`;
                        if (input.data.authorId.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.authorId.length;
                                i++
                            ) {
                                __point__ = input.data.authorId.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(input.data.authorId);
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.authorId.slice(__last__, i) +
                                        "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.authorId}"`;
                                } else {
                                    json += `"${__result__}${input.data.authorId.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.authorId.length < 5000 &&
                            !STR_ESCAPE.test(input.data.authorId)
                        ) {
                            json += `"${input.data.authorId}"`;
                        } else {
                            json += JSON.stringify(input.data.authorId);
                        }
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.author !== "undefined") {
                    if (dataHasFields) {
                        json += ',"author":{';
                        json += `"id":`;
                        if (input.data.author.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.author.id.length;
                                i++
                            ) {
                                __point__ = input.data.author.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.data.author.id,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.author.id.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.author.id}"`;
                                } else {
                                    json += `"${__result__}${input.data.author.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.author.id.length < 5000 &&
                            !STR_ESCAPE.test(input.data.author.id)
                        ) {
                            json += `"${input.data.author.id}"`;
                        } else {
                            json += JSON.stringify(input.data.author.id);
                        }
                        json += `,"name":`;
                        if (input.data.author.name.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.author.name.length;
                                i++
                            ) {
                                __point__ =
                                    input.data.author.name.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.data.author.name,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.author.name.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.author.name}"`;
                                } else {
                                    json += `"${__result__}${input.data.author.name.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.author.name.length < 5000 &&
                            !STR_ESCAPE.test(input.data.author.name)
                        ) {
                            json += `"${input.data.author.name}"`;
                        } else {
                            json += JSON.stringify(input.data.author.name);
                        }
                        if (typeof input.data.author.bio === "string") {
                            json += `,"bio":`;
                            if (input.data.author.bio.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < input.data.author.bio.length;
                                    i++
                                ) {
                                    __point__ =
                                        input.data.author.bio.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json += JSON.stringify(
                                            input.data.author.bio,
                                        );
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            input.data.author.bio.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${input.data.author.bio}"`;
                                    } else {
                                        json += `"${__result__}${input.data.author.bio.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                input.data.author.bio.length < 5000 &&
                                !STR_ESCAPE.test(input.data.author.bio)
                            ) {
                                json += `"${input.data.author.bio}"`;
                            } else {
                                json += JSON.stringify(input.data.author.bio);
                            }
                        } else {
                            json += ',"bio":null';
                        }
                        json += `,"createdAt":"${input.data.author.createdAt.toISOString()}"`;
                        json += `,"updatedAt":"${input.data.author.updatedAt.toISOString()}"`;
                        json += "}";
                    } else {
                        json += '"author":{';
                        json += `"id":`;
                        if (input.data.author.id.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.author.id.length;
                                i++
                            ) {
                                __point__ = input.data.author.id.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.data.author.id,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.author.id.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.author.id}"`;
                                } else {
                                    json += `"${__result__}${input.data.author.id.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.author.id.length < 5000 &&
                            !STR_ESCAPE.test(input.data.author.id)
                        ) {
                            json += `"${input.data.author.id}"`;
                        } else {
                            json += JSON.stringify(input.data.author.id);
                        }
                        json += `,"name":`;
                        if (input.data.author.name.length < 42) {
                            let __result__ = "";
                            let __last__ = -1;
                            let __point__ = 255;
                            let __finished__ = false;
                            for (
                                let i = 0;
                                i < input.data.author.name.length;
                                i++
                            ) {
                                __point__ =
                                    input.data.author.name.charCodeAt(i);
                                if (
                                    __point__ < 32 ||
                                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                                ) {
                                    json += JSON.stringify(
                                        input.data.author.name,
                                    );
                                    __finished__ = true;
                                    break;
                                }
                                if (__point__ === 0x22 || __point__ === 0x5c) {
                                    __last__ === -1 && (__last__ = 0);
                                    __result__ +=
                                        input.data.author.name.slice(
                                            __last__,
                                            i,
                                        ) + "\\";
                                    __last__ = i;
                                }
                            }
                            if (!__finished__) {
                                if (__last__ === -1) {
                                    json += `"${input.data.author.name}"`;
                                } else {
                                    json += `"${__result__}${input.data.author.name.slice(__last__)}"`;
                                }
                            }
                        } else if (
                            input.data.author.name.length < 5000 &&
                            !STR_ESCAPE.test(input.data.author.name)
                        ) {
                            json += `"${input.data.author.name}"`;
                        } else {
                            json += JSON.stringify(input.data.author.name);
                        }
                        if (typeof input.data.author.bio === "string") {
                            json += `,"bio":`;
                            if (input.data.author.bio.length < 42) {
                                let __result__ = "";
                                let __last__ = -1;
                                let __point__ = 255;
                                let __finished__ = false;
                                for (
                                    let i = 0;
                                    i < input.data.author.bio.length;
                                    i++
                                ) {
                                    __point__ =
                                        input.data.author.bio.charCodeAt(i);
                                    if (
                                        __point__ < 32 ||
                                        (__point__ >= 0xd800 &&
                                            __point__ <= 0xdfff)
                                    ) {
                                        json += JSON.stringify(
                                            input.data.author.bio,
                                        );
                                        __finished__ = true;
                                        break;
                                    }
                                    if (
                                        __point__ === 0x22 ||
                                        __point__ === 0x5c
                                    ) {
                                        __last__ === -1 && (__last__ = 0);
                                        __result__ +=
                                            input.data.author.bio.slice(
                                                __last__,
                                                i,
                                            ) + "\\";
                                        __last__ = i;
                                    }
                                }
                                if (!__finished__) {
                                    if (__last__ === -1) {
                                        json += `"${input.data.author.bio}"`;
                                    } else {
                                        json += `"${__result__}${input.data.author.bio.slice(__last__)}"`;
                                    }
                                }
                            } else if (
                                input.data.author.bio.length < 5000 &&
                                !STR_ESCAPE.test(input.data.author.bio)
                            ) {
                                json += `"${input.data.author.bio}"`;
                            } else {
                                json += JSON.stringify(input.data.author.bio);
                            }
                        } else {
                            json += ',"bio":null';
                        }
                        json += `,"createdAt":"${input.data.author.createdAt.toISOString()}"`;
                        json += `,"updatedAt":"${input.data.author.updatedAt.toISOString()}"`;
                        json += "}";
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.createdAt !== "undefined") {
                    if (dataHasFields) {
                        json += `,"createdAt":"${input.data.createdAt.toISOString()}"`;
                    } else {
                        json += `"createdAt":"${input.data.createdAt.toISOString()}"`;
                        dataHasFields = true;
                    }
                }
                if (typeof input.data.updatedAt !== "undefined") {
                    if (dataHasFields) {
                        json += `,"updatedAt":"${input.data.updatedAt.toISOString()}"`;
                    } else {
                        json += `"updatedAt":"${input.data.updatedAt.toISOString()}"`;
                        dataHasFields = true;
                    }
                }
                json += "}";
                json += "}";
                break;
            }
            case "POST_LIKED": {
                json += "{";
                json += `"eventType":"POST_LIKED"`;
                json += `,"postId":`;
                if (input.postId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postId.length; i++) {
                        __point__ = input.postId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postId}"`;
                        } else {
                            json += `"${__result__}${input.postId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postId.length < 5000 &&
                    !STR_ESCAPE.test(input.postId)
                ) {
                    json += `"${input.postId}"`;
                } else {
                    json += JSON.stringify(input.postId);
                }
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
                json += `,"postLikeId":`;
                if (input.postLikeId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postLikeId.length; i++) {
                        __point__ = input.postLikeId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postLikeId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postLikeId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postLikeId}"`;
                        } else {
                            json += `"${__result__}${input.postLikeId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postLikeId.length < 5000 &&
                    !STR_ESCAPE.test(input.postLikeId)
                ) {
                    json += `"${input.postLikeId}"`;
                } else {
                    json += JSON.stringify(input.postLikeId);
                }

                if (Number.isNaN(input.postLikeCount)) {
                    throw new Error(
                        "Expected number at /postLikeCount got NaN",
                    );
                }
                json += `,"postLikeCount":${input.postLikeCount}`;
                json += "}";
                break;
            }
            case "POST_COMMENTED": {
                json += "{";
                json += `"eventType":"POST_COMMENTED"`;
                json += `,"postId":`;
                if (input.postId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.postId.length; i++) {
                        __point__ = input.postId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.postId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.postId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.postId}"`;
                        } else {
                            json += `"${__result__}${input.postId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.postId.length < 5000 &&
                    !STR_ESCAPE.test(input.postId)
                ) {
                    json += `"${input.postId}"`;
                } else {
                    json += JSON.stringify(input.postId);
                }
                json += `,"timestamp":"${input.timestamp.toISOString()}"`;
                json += `,"commentId":`;
                if (input.commentId.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.commentId.length; i++) {
                        __point__ = input.commentId.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.commentId);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.commentId.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.commentId}"`;
                        } else {
                            json += `"${__result__}${input.commentId.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.commentId.length < 5000 &&
                    !STR_ESCAPE.test(input.commentId)
                ) {
                    json += `"${input.commentId}"`;
                } else {
                    json += JSON.stringify(input.commentId);
                }
                json += `,"commentText":`;
                if (input.commentText.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.commentText.length; i++) {
                        __point__ = input.commentText.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.commentText);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.commentText.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.commentText}"`;
                        } else {
                            json += `"${__result__}${input.commentText.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.commentText.length < 5000 &&
                    !STR_ESCAPE.test(input.commentText)
                ) {
                    json += `"${input.commentText}"`;
                } else {
                    json += JSON.stringify(input.commentText);
                }

                if (Number.isNaN(input.commentCount)) {
                    throw new Error("Expected number at /commentCount got NaN");
                }
                json += `,"commentCount":${input.commentCount}`;
                json += "}";
                break;
            }
        }
        return json;
    },
};
export interface PostEventPostCreated {
    eventType: "POST_CREATED";
    postId: string;
    timestamp: Date;
}

export interface PostEventPostDeleted {
    eventType: "POST_DELETED";
    postId: string;
    timestamp: Date;
}

export interface PostEventPostUpdated {
    eventType: "POST_UPDATED";
    postId: string;
    timestamp: Date;
    data: PostEventPostUpdatedData;
}

export interface PostEventPostUpdatedData {
    id?: string;
    title?: string;
    type?: PostType;
    description?: string | null;
    content?: string;
    tags?: Array<string>;
    authorId?: string;
    author?: Author;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface PostEventPostLiked {
    eventType: "POST_LIKED";
    postId: string;
    timestamp: Date;
    postLikeId: string;
    postLikeCount: number;
}

export interface PostEventPostCommented {
    eventType: "POST_COMMENTED";
    postId: string;
    timestamp: Date;
    commentId: string;
    commentText: string;
    commentCount: number;
}

export interface LogPostEventResponse {
    success: boolean;
    message: string;
}
const $$LogPostEventResponse = {
    parse(input: Record<any, any>): LogPostEventResponse {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.success === "boolean") {
                    __D1.success = json.success;
                } else {
                    $fallback(
                        "/success",
                        "/properties/success/type",
                        "Expected boolean for /success",
                    );
                }
                if (typeof json.message === "string") {
                    __D1.message = json.message;
                } else {
                    $fallback(
                        "/message",
                        "/properties/message/type",
                        "Expected string at /message",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.success === "boolean") {
                __D1.success = input.success;
            } else {
                $fallback(
                    "/success",
                    "/properties/success/type",
                    "Expected boolean for /success",
                );
            }
            if (typeof input.message === "string") {
                __D1.message = input.message;
            } else {
                $fallback(
                    "/message",
                    "/properties/message/type",
                    "Expected string at /message",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: LogPostEventResponse): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"success":${input.success}`;
        json += `,"message":`;
        if (input.message.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.message.length; i++) {
                __point__ = input.message.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.message);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.message.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.message}"`;
                } else {
                    json += `"${__result__}${input.message.slice(__last__)}"`;
                }
            }
        } else if (
            input.message.length < 5000 &&
            !STR_ESCAPE.test(input.message)
        ) {
            json += `"${input.message}"`;
        } else {
            json += JSON.stringify(input.message);
        }
        json += "}";
        return json;
    },
};

export interface UpdatePostParams {
    postId: string;
    data: UpdatePostParamsData;
}
const $$UpdatePostParams = {
    parse(input: Record<any, any>): UpdatePostParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.postId === "string") {
                    __D1.postId = json.postId;
                } else {
                    $fallback(
                        "/postId",
                        "/properties/postId/type",
                        "Expected string at /postId",
                    );
                }
                if (typeof json.data === "object" && json.data !== null) {
                    const __D2 = {};
                    if (typeof json.data.title === "undefined") {
                        // ignore undefined
                    } else {
                        if (typeof json.data.title === "string") {
                            __D2.title = json.data.title;
                        } else {
                            $fallback(
                                "/data/title",
                                "/properties/data/optionalProperties/title/type",
                                "Expected string at /data/title",
                            );
                        }
                    }
                    if (typeof json.data.description === "undefined") {
                        // ignore undefined
                    } else {
                        if (json.data.description === null) {
                            __D2.description = json.data.description;
                        } else {
                            if (typeof json.data.description === "string") {
                                __D2.description = json.data.description;
                            } else {
                                $fallback(
                                    "/data/description",
                                    "/properties/data/optionalProperties/description/type",
                                    "Expected string at /data/description",
                                );
                            }
                        }
                    }
                    if (typeof json.data.content === "undefined") {
                        // ignore undefined
                    } else {
                        if (typeof json.data.content === "string") {
                            __D2.content = json.data.content;
                        } else {
                            $fallback(
                                "/data/content",
                                "/properties/data/optionalProperties/content/type",
                                "Expected string at /data/content",
                            );
                        }
                    }
                    if (typeof json.data.tags === "undefined") {
                        // ignore undefined
                    } else {
                        if (Array.isArray(json.data.tags)) {
                            const __D3 = [];
                            for (const __D3AItem of json.data.tags) {
                                let __D3AItemAResult;
                                if (typeof __D3AItem === "string") {
                                    __D3AItemAResult = __D3AItem;
                                } else {
                                    $fallback(
                                        "/data/tags/[0]",
                                        "/properties/data/optionalProperties/tags/elements/type",
                                        "Expected string at /data/tags/[0]",
                                    );
                                }
                                __D3.push(__D3AItemAResult);
                            }
                            __D2.tags = __D3;
                        } else {
                            $fallback(
                                "/data/tags",
                                "/properties/data/optionalProperties/tags",
                                "Expected Array",
                            );
                        }
                    }
                    __D1.data = __D2;
                } else {
                    $fallback("/data", "/properties/data", "Expected object");
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.postId === "string") {
                __D1.postId = input.postId;
            } else {
                $fallback(
                    "/postId",
                    "/properties/postId/type",
                    "Expected string at /postId",
                );
            }
            if (typeof input.data === "object" && input.data !== null) {
                const __D2 = {};
                if (typeof input.data.title === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof input.data.title === "string") {
                        __D2.title = input.data.title;
                    } else {
                        $fallback(
                            "/data/title",
                            "/properties/data/optionalProperties/title/type",
                            "Expected string at /data/title",
                        );
                    }
                }
                if (typeof input.data.description === "undefined") {
                    // ignore undefined
                } else {
                    if (input.data.description === null) {
                        __D2.description = input.data.description;
                    } else {
                        if (typeof input.data.description === "string") {
                            __D2.description = input.data.description;
                        } else {
                            $fallback(
                                "/data/description",
                                "/properties/data/optionalProperties/description/type",
                                "Expected string at /data/description",
                            );
                        }
                    }
                }
                if (typeof input.data.content === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof input.data.content === "string") {
                        __D2.content = input.data.content;
                    } else {
                        $fallback(
                            "/data/content",
                            "/properties/data/optionalProperties/content/type",
                            "Expected string at /data/content",
                        );
                    }
                }
                if (typeof input.data.tags === "undefined") {
                    // ignore undefined
                } else {
                    if (Array.isArray(input.data.tags)) {
                        const __D3 = [];
                        for (const __D3AItem of input.data.tags) {
                            let __D3AItemAResult;
                            if (typeof __D3AItem === "string") {
                                __D3AItemAResult = __D3AItem;
                            } else {
                                $fallback(
                                    "/data/tags/[0]",
                                    "/properties/data/optionalProperties/tags/elements/type",
                                    "Expected string at /data/tags/[0]",
                                );
                            }
                            __D3.push(__D3AItemAResult);
                        }
                        __D2.tags = __D3;
                    } else {
                        $fallback(
                            "/data/tags",
                            "/properties/data/optionalProperties/tags",
                            "Expected Array",
                        );
                    }
                }
                __D1.data = __D2;
            } else {
                $fallback("/data", "/properties/data", "Expected object");
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: UpdatePostParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"postId":`;
        if (input.postId.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.postId.length; i++) {
                __point__ = input.postId.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.postId);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.postId.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.postId}"`;
                } else {
                    json += `"${__result__}${input.postId.slice(__last__)}"`;
                }
            }
        } else if (
            input.postId.length < 5000 &&
            !STR_ESCAPE.test(input.postId)
        ) {
            json += `"${input.postId}"`;
        } else {
            json += JSON.stringify(input.postId);
        }
        json += ',"data":{';
        let dataHasFields = false;
        if (typeof input.data.title !== "undefined") {
            if (dataHasFields) {
                json += `,"title":`;
                if (input.data.title.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.data.title.length; i++) {
                        __point__ = input.data.title.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.title);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.title.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.title}"`;
                        } else {
                            json += `"${__result__}${input.data.title.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.title.length < 5000 &&
                    !STR_ESCAPE.test(input.data.title)
                ) {
                    json += `"${input.data.title}"`;
                } else {
                    json += JSON.stringify(input.data.title);
                }
            } else {
                json += `"title":`;
                if (input.data.title.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.data.title.length; i++) {
                        __point__ = input.data.title.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.title);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.title.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.title}"`;
                        } else {
                            json += `"${__result__}${input.data.title.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.title.length < 5000 &&
                    !STR_ESCAPE.test(input.data.title)
                ) {
                    json += `"${input.data.title}"`;
                } else {
                    json += JSON.stringify(input.data.title);
                }
                dataHasFields = true;
            }
        }
        if (typeof input.data.description !== "undefined") {
            if (dataHasFields) {
                if (typeof input.data.description === "string") {
                    json += `,"description":`;
                    if (input.data.description.length < 42) {
                        let __result__ = "";
                        let __last__ = -1;
                        let __point__ = 255;
                        let __finished__ = false;
                        for (
                            let i = 0;
                            i < input.data.description.length;
                            i++
                        ) {
                            __point__ = input.data.description.charCodeAt(i);
                            if (
                                __point__ < 32 ||
                                (__point__ >= 0xd800 && __point__ <= 0xdfff)
                            ) {
                                json += JSON.stringify(input.data.description);
                                __finished__ = true;
                                break;
                            }
                            if (__point__ === 0x22 || __point__ === 0x5c) {
                                __last__ === -1 && (__last__ = 0);
                                __result__ +=
                                    input.data.description.slice(__last__, i) +
                                    "\\";
                                __last__ = i;
                            }
                        }
                        if (!__finished__) {
                            if (__last__ === -1) {
                                json += `"${input.data.description}"`;
                            } else {
                                json += `"${__result__}${input.data.description.slice(__last__)}"`;
                            }
                        }
                    } else if (
                        input.data.description.length < 5000 &&
                        !STR_ESCAPE.test(input.data.description)
                    ) {
                        json += `"${input.data.description}"`;
                    } else {
                        json += JSON.stringify(input.data.description);
                    }
                } else {
                    json += ',"description":null';
                }
            } else {
                if (typeof input.data.description === "string") {
                    json += `"description":`;
                    if (input.data.description.length < 42) {
                        let __result__ = "";
                        let __last__ = -1;
                        let __point__ = 255;
                        let __finished__ = false;
                        for (
                            let i = 0;
                            i < input.data.description.length;
                            i++
                        ) {
                            __point__ = input.data.description.charCodeAt(i);
                            if (
                                __point__ < 32 ||
                                (__point__ >= 0xd800 && __point__ <= 0xdfff)
                            ) {
                                json += JSON.stringify(input.data.description);
                                __finished__ = true;
                                break;
                            }
                            if (__point__ === 0x22 || __point__ === 0x5c) {
                                __last__ === -1 && (__last__ = 0);
                                __result__ +=
                                    input.data.description.slice(__last__, i) +
                                    "\\";
                                __last__ = i;
                            }
                        }
                        if (!__finished__) {
                            if (__last__ === -1) {
                                json += `"${input.data.description}"`;
                            } else {
                                json += `"${__result__}${input.data.description.slice(__last__)}"`;
                            }
                        }
                    } else if (
                        input.data.description.length < 5000 &&
                        !STR_ESCAPE.test(input.data.description)
                    ) {
                        json += `"${input.data.description}"`;
                    } else {
                        json += JSON.stringify(input.data.description);
                    }
                } else {
                    json += '"description":null';
                }
                dataHasFields = true;
            }
        }
        if (typeof input.data.content !== "undefined") {
            if (dataHasFields) {
                json += `,"content":`;
                if (input.data.content.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.data.content.length; i++) {
                        __point__ = input.data.content.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.content);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.content.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.content}"`;
                        } else {
                            json += `"${__result__}${input.data.content.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.content.length < 5000 &&
                    !STR_ESCAPE.test(input.data.content)
                ) {
                    json += `"${input.data.content}"`;
                } else {
                    json += JSON.stringify(input.data.content);
                }
            } else {
                json += `"content":`;
                if (input.data.content.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (let i = 0; i < input.data.content.length; i++) {
                        __point__ = input.data.content.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.content);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.content.slice(__last__, i) + "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.content}"`;
                        } else {
                            json += `"${__result__}${input.data.content.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.content.length < 5000 &&
                    !STR_ESCAPE.test(input.data.content)
                ) {
                    json += `"${input.data.content}"`;
                } else {
                    json += JSON.stringify(input.data.content);
                }
                dataHasFields = true;
            }
        }
        if (typeof input.data.tags !== "undefined") {
            if (dataHasFields) {
                json += ',"tags":[';
                for (let i = 0; i < input.data.tags.length; i++) {
                    const inputDataTagsItem = input.data.tags[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += ``;
                    if (inputDataTagsItem.length < 42) {
                        let __result__ = "";
                        let __last__ = -1;
                        let __point__ = 255;
                        let __finished__ = false;
                        for (let i = 0; i < inputDataTagsItem.length; i++) {
                            __point__ = inputDataTagsItem.charCodeAt(i);
                            if (
                                __point__ < 32 ||
                                (__point__ >= 0xd800 && __point__ <= 0xdfff)
                            ) {
                                json += JSON.stringify(inputDataTagsItem);
                                __finished__ = true;
                                break;
                            }
                            if (__point__ === 0x22 || __point__ === 0x5c) {
                                __last__ === -1 && (__last__ = 0);
                                __result__ +=
                                    inputDataTagsItem.slice(__last__, i) + "\\";
                                __last__ = i;
                            }
                        }
                        if (!__finished__) {
                            if (__last__ === -1) {
                                json += `"${inputDataTagsItem}"`;
                            } else {
                                json += `"${__result__}${inputDataTagsItem.slice(__last__)}"`;
                            }
                        }
                    } else if (
                        inputDataTagsItem.length < 5000 &&
                        !STR_ESCAPE.test(inputDataTagsItem)
                    ) {
                        json += `"${inputDataTagsItem}"`;
                    } else {
                        json += JSON.stringify(inputDataTagsItem);
                    }
                }
                json += "]";
            } else {
                json += '"tags":[';
                for (let i = 0; i < input.data.tags.length; i++) {
                    const inputDataTagsItem = input.data.tags[i];
                    if (i !== 0) {
                        json += ",";
                    }
                    json += ``;
                    if (inputDataTagsItem.length < 42) {
                        let __result__ = "";
                        let __last__ = -1;
                        let __point__ = 255;
                        let __finished__ = false;
                        for (let i = 0; i < inputDataTagsItem.length; i++) {
                            __point__ = inputDataTagsItem.charCodeAt(i);
                            if (
                                __point__ < 32 ||
                                (__point__ >= 0xd800 && __point__ <= 0xdfff)
                            ) {
                                json += JSON.stringify(inputDataTagsItem);
                                __finished__ = true;
                                break;
                            }
                            if (__point__ === 0x22 || __point__ === 0x5c) {
                                __last__ === -1 && (__last__ = 0);
                                __result__ +=
                                    inputDataTagsItem.slice(__last__, i) + "\\";
                                __last__ = i;
                            }
                        }
                        if (!__finished__) {
                            if (__last__ === -1) {
                                json += `"${inputDataTagsItem}"`;
                            } else {
                                json += `"${__result__}${inputDataTagsItem.slice(__last__)}"`;
                            }
                        }
                    } else if (
                        inputDataTagsItem.length < 5000 &&
                        !STR_ESCAPE.test(inputDataTagsItem)
                    ) {
                        json += `"${inputDataTagsItem}"`;
                    } else {
                        json += JSON.stringify(inputDataTagsItem);
                    }
                }
                json += "]";
                dataHasFields = true;
            }
        }
        json += "}";
        json += "}";
        return json;
    },
};
export interface UpdatePostParamsData {
    title?: string;
    description?: string | null;
    content?: string;
    tags?: Array<string>;
}

export interface AnnotationId {
    id: string;
    version: string;
}
const $$AnnotationId = {
    parse(input: Record<any, any>): AnnotationId {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.id === "string") {
                    __D1.id = json.id;
                } else {
                    $fallback(
                        "/id",
                        "/properties/id/type",
                        "Expected string at /id",
                    );
                }
                if (typeof json.version === "string") {
                    __D1.version = json.version;
                } else {
                    $fallback(
                        "/version",
                        "/properties/version/type",
                        "Expected string at /version",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.id === "string") {
                __D1.id = input.id;
            } else {
                $fallback(
                    "/id",
                    "/properties/id/type",
                    "Expected string at /id",
                );
            }
            if (typeof input.version === "string") {
                __D1.version = input.version;
            } else {
                $fallback(
                    "/version",
                    "/properties/version/type",
                    "Expected string at /version",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: AnnotationId): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"id":`;
        if (input.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.id.length; i++) {
                __point__ = input.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.id}"`;
                } else {
                    json += `"${__result__}${input.id.slice(__last__)}"`;
                }
            }
        } else if (input.id.length < 5000 && !STR_ESCAPE.test(input.id)) {
            json += `"${input.id}"`;
        } else {
            json += JSON.stringify(input.id);
        }
        json += `,"version":`;
        if (input.version.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.version.length; i++) {
                __point__ = input.version.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.version);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.version.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.version}"`;
                } else {
                    json += `"${__result__}${input.version.slice(__last__)}"`;
                }
            }
        } else if (
            input.version.length < 5000 &&
            !STR_ESCAPE.test(input.version)
        ) {
            json += `"${input.version}"`;
        } else {
            json += JSON.stringify(input.version);
        }
        json += "}";
        return json;
    },
};

export interface Annotation {
    annotation_id: AnnotationId;
    associated_id: AssociatedId;
    annotation_type: AnnotationAnnotationType;
    annotation_type_version: number;
    metadata: any;
    box_type_range: AnnotationBoxTypeRange;
}
const $$Annotation = {
    parse(input: Record<any, any>): Annotation {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (
                    typeof json.annotation_id === "object" &&
                    json.annotation_id !== null
                ) {
                    const __D2 = {};
                    if (typeof json.annotation_id.id === "string") {
                        __D2.id = json.annotation_id.id;
                    } else {
                        $fallback(
                            "/annotation_id/id",
                            "/properties/annotation_id/properties/id/type",
                            "Expected string at /annotation_id/id",
                        );
                    }
                    if (typeof json.annotation_id.version === "string") {
                        __D2.version = json.annotation_id.version;
                    } else {
                        $fallback(
                            "/annotation_id/version",
                            "/properties/annotation_id/properties/version/type",
                            "Expected string at /annotation_id/version",
                        );
                    }
                    __D1.annotation_id = __D2;
                } else {
                    $fallback(
                        "/annotation_id",
                        "/properties/annotation_id",
                        "Expected object",
                    );
                }
                if (
                    typeof json.associated_id === "object" &&
                    json.associated_id !== null
                ) {
                    const __D2 = {};
                    if (typeof json.associated_id.entity_type === "string") {
                        if (
                            json.associated_id.entity_type === "MOVIE_ID" ||
                            json.associated_id.entity_type === "SHOW_ID"
                        ) {
                            __D2.entity_type = json.associated_id.entity_type;
                        } else {
                            $fallback(
                                "/associated_id/entity_type",
                                "/properties/associated_id/properties/entity_type",
                                "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
                            );
                        }
                    } else {
                        $fallback(
                            "/associated_id/entity_type",
                            "/properties/associated_id/properties/entity_type",
                            "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
                        );
                    }
                    if (typeof json.associated_id.id === "string") {
                        __D2.id = json.associated_id.id;
                    } else {
                        $fallback(
                            "/associated_id/id",
                            "/properties/associated_id/properties/id/type",
                            "Expected string at /associated_id/id",
                        );
                    }
                    __D1.associated_id = __D2;
                } else {
                    $fallback(
                        "/associated_id",
                        "/properties/associated_id",
                        "Expected object",
                    );
                }
                if (typeof json.annotation_type === "string") {
                    if (json.annotation_type === "ANNOTATION_BOUNDINGBOX") {
                        __D1.annotation_type = json.annotation_type;
                    } else {
                        $fallback(
                            "/annotation_type",
                            "/properties/annotation_type",
                            "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
                        );
                    }
                } else {
                    $fallback(
                        "/annotation_type",
                        "/properties/annotation_type",
                        "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
                    );
                }
                if (
                    typeof json.annotation_type_version === "number" &&
                    Number.isInteger(json.annotation_type_version) &&
                    json.annotation_type_version >= 0 &&
                    json.annotation_type_version <= 65535
                ) {
                    __D1.annotation_type_version = json.annotation_type_version;
                } else {
                    $fallback(
                        "/annotation_type_version",
                        "/properties/annotation_type_version",
                        "Expected valid integer between 0 and 65535",
                    );
                }
                __D1.metadata = json.metadata;
                if (
                    typeof json.box_type_range === "object" &&
                    json.box_type_range !== null
                ) {
                    const __D2 = {};
                    if (
                        typeof json.box_type_range.start_time_in_nano_sec ===
                            "string" ||
                        typeof json.box_type_range.start_time_in_nano_sec ===
                            "number"
                    ) {
                        try {
                            const val = BigInt(
                                json.box_type_range.start_time_in_nano_sec,
                            );
                            __D2.start_time_in_nano_sec = val;
                        } catch (err) {
                            $fallback(
                                "/box_type_range/start_time_in_nano_sec",
                                "/properties/box_type_range/properties/start_time_in_nano_sec",
                                "Unable to parse BigInt from json.box_type_range.start_time_in_nano_sec.",
                            );
                        }
                    } else if (
                        typeof json.box_type_range.start_time_in_nano_sec ===
                        "bigint"
                    ) {
                        __D2.start_time_in_nano_sec =
                            json.box_type_range.start_time_in_nano_sec;
                    } else {
                        $fallback(
                            "/box_type_range/start_time_in_nano_sec",
                            "/properties/box_type_range/properties/start_time_in_nano_sec",
                            "Expected BigInt or Integer string. Got ${json.box_type_range.start_time_in_nano_sec}",
                        );
                    }
                    if (
                        typeof json.box_type_range.end_time_in_nano_sec ===
                            "string" ||
                        typeof json.box_type_range.end_time_in_nano_sec ===
                            "number"
                    ) {
                        try {
                            const val = BigInt(
                                json.box_type_range.end_time_in_nano_sec,
                            );
                            if (val >= BigInt("0")) {
                                __D2.end_time_in_nano_sec = val;
                            } else {
                                $fallback(
                                    "/box_type_range/end_time_in_nano_sec",
                                    "/properties/box_type_range/properties/end_time_in_nano_sec",
                                    "Unsigned int must be greater than or equal to 0.",
                                );
                            }
                        } catch (err) {
                            $fallback(
                                "/box_type_range/end_time_in_nano_sec",
                                "/properties/box_type_range/properties/end_time_in_nano_sec",
                                "Unable to parse BigInt from json.box_type_range.end_time_in_nano_sec.",
                            );
                        }
                    } else if (
                        typeof json.box_type_range.end_time_in_nano_sec ===
                        "bigint"
                    ) {
                        if (
                            json.box_type_range.end_time_in_nano_sec >=
                            BigInt("0")
                        ) {
                            __D2.end_time_in_nano_sec =
                                json.box_type_range.end_time_in_nano_sec;
                        } else {
                            $fallback(
                                "/box_type_range/end_time_in_nano_sec",
                                "/properties/box_type_range/properties/end_time_in_nano_sec",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } else {
                        $fallback(
                            "/box_type_range/end_time_in_nano_sec",
                            "/properties/box_type_range/properties/end_time_in_nano_sec",
                            "Expected BigInt or Integer string. Got ${json.box_type_range.end_time_in_nano_sec}",
                        );
                    }
                    __D1.box_type_range = __D2;
                } else {
                    $fallback(
                        "/box_type_range",
                        "/properties/box_type_range",
                        "Expected object",
                    );
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (
                typeof input.annotation_id === "object" &&
                input.annotation_id !== null
            ) {
                const __D2 = {};
                if (typeof input.annotation_id.id === "string") {
                    __D2.id = input.annotation_id.id;
                } else {
                    $fallback(
                        "/annotation_id/id",
                        "/properties/annotation_id/properties/id/type",
                        "Expected string at /annotation_id/id",
                    );
                }
                if (typeof input.annotation_id.version === "string") {
                    __D2.version = input.annotation_id.version;
                } else {
                    $fallback(
                        "/annotation_id/version",
                        "/properties/annotation_id/properties/version/type",
                        "Expected string at /annotation_id/version",
                    );
                }
                __D1.annotation_id = __D2;
            } else {
                $fallback(
                    "/annotation_id",
                    "/properties/annotation_id",
                    "Expected object",
                );
            }
            if (
                typeof input.associated_id === "object" &&
                input.associated_id !== null
            ) {
                const __D2 = {};
                if (typeof input.associated_id.entity_type === "string") {
                    if (
                        input.associated_id.entity_type === "MOVIE_ID" ||
                        input.associated_id.entity_type === "SHOW_ID"
                    ) {
                        __D2.entity_type = input.associated_id.entity_type;
                    } else {
                        $fallback(
                            "/associated_id/entity_type",
                            "/properties/associated_id/properties/entity_type",
                            "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
                        );
                    }
                } else {
                    $fallback(
                        "/associated_id/entity_type",
                        "/properties/associated_id/properties/entity_type",
                        "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /associated_id/entity_type.",
                    );
                }
                if (typeof input.associated_id.id === "string") {
                    __D2.id = input.associated_id.id;
                } else {
                    $fallback(
                        "/associated_id/id",
                        "/properties/associated_id/properties/id/type",
                        "Expected string at /associated_id/id",
                    );
                }
                __D1.associated_id = __D2;
            } else {
                $fallback(
                    "/associated_id",
                    "/properties/associated_id",
                    "Expected object",
                );
            }
            if (typeof input.annotation_type === "string") {
                if (input.annotation_type === "ANNOTATION_BOUNDINGBOX") {
                    __D1.annotation_type = input.annotation_type;
                } else {
                    $fallback(
                        "/annotation_type",
                        "/properties/annotation_type",
                        "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
                    );
                }
            } else {
                $fallback(
                    "/annotation_type",
                    "/properties/annotation_type",
                    "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /annotation_type.",
                );
            }
            if (
                typeof input.annotation_type_version === "number" &&
                Number.isInteger(input.annotation_type_version) &&
                input.annotation_type_version >= 0 &&
                input.annotation_type_version <= 65535
            ) {
                __D1.annotation_type_version = input.annotation_type_version;
            } else {
                $fallback(
                    "/annotation_type_version",
                    "/properties/annotation_type_version",
                    "Expected valid integer between 0 and 65535",
                );
            }
            __D1.metadata = input.metadata;
            if (
                typeof input.box_type_range === "object" &&
                input.box_type_range !== null
            ) {
                const __D2 = {};
                if (
                    typeof input.box_type_range.start_time_in_nano_sec ===
                        "string" ||
                    typeof input.box_type_range.start_time_in_nano_sec ===
                        "number"
                ) {
                    try {
                        const val = BigInt(
                            input.box_type_range.start_time_in_nano_sec,
                        );
                        __D2.start_time_in_nano_sec = val;
                    } catch (err) {
                        $fallback(
                            "/box_type_range/start_time_in_nano_sec",
                            "/properties/box_type_range/properties/start_time_in_nano_sec",
                            "Unable to parse BigInt from input.box_type_range.start_time_in_nano_sec.",
                        );
                    }
                } else if (
                    typeof input.box_type_range.start_time_in_nano_sec ===
                    "bigint"
                ) {
                    __D2.start_time_in_nano_sec =
                        input.box_type_range.start_time_in_nano_sec;
                } else {
                    $fallback(
                        "/box_type_range/start_time_in_nano_sec",
                        "/properties/box_type_range/properties/start_time_in_nano_sec",
                        "Expected BigInt or Integer string. Got ${input.box_type_range.start_time_in_nano_sec}",
                    );
                }
                if (
                    typeof input.box_type_range.end_time_in_nano_sec ===
                        "string" ||
                    typeof input.box_type_range.end_time_in_nano_sec ===
                        "number"
                ) {
                    try {
                        const val = BigInt(
                            input.box_type_range.end_time_in_nano_sec,
                        );
                        if (val >= BigInt("0")) {
                            __D2.end_time_in_nano_sec = val;
                        } else {
                            $fallback(
                                "/box_type_range/end_time_in_nano_sec",
                                "/properties/box_type_range/properties/end_time_in_nano_sec",
                                "Unsigned int must be greater than or equal to 0.",
                            );
                        }
                    } catch (err) {
                        $fallback(
                            "/box_type_range/end_time_in_nano_sec",
                            "/properties/box_type_range/properties/end_time_in_nano_sec",
                            "Unable to parse BigInt from input.box_type_range.end_time_in_nano_sec.",
                        );
                    }
                } else if (
                    typeof input.box_type_range.end_time_in_nano_sec ===
                    "bigint"
                ) {
                    if (
                        input.box_type_range.end_time_in_nano_sec >= BigInt("0")
                    ) {
                        __D2.end_time_in_nano_sec =
                            input.box_type_range.end_time_in_nano_sec;
                    } else {
                        $fallback(
                            "/box_type_range/end_time_in_nano_sec",
                            "/properties/box_type_range/properties/end_time_in_nano_sec",
                            "Unsigned int must be greater than or equal to 0.",
                        );
                    }
                } else {
                    $fallback(
                        "/box_type_range/end_time_in_nano_sec",
                        "/properties/box_type_range/properties/end_time_in_nano_sec",
                        "Expected BigInt or Integer string. Got ${input.box_type_range.end_time_in_nano_sec}",
                    );
                }
                __D1.box_type_range = __D2;
            } else {
                $fallback(
                    "/box_type_range",
                    "/properties/box_type_range",
                    "Expected object",
                );
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: Annotation): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += '"annotation_id":{';
        json += `"id":`;
        if (input.annotation_id.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.annotation_id.id.length; i++) {
                __point__ = input.annotation_id.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.annotation_id.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.annotation_id.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.annotation_id.id}"`;
                } else {
                    json += `"${__result__}${input.annotation_id.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.annotation_id.id.length < 5000 &&
            !STR_ESCAPE.test(input.annotation_id.id)
        ) {
            json += `"${input.annotation_id.id}"`;
        } else {
            json += JSON.stringify(input.annotation_id.id);
        }
        json += `,"version":`;
        if (input.annotation_id.version.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.annotation_id.version.length; i++) {
                __point__ = input.annotation_id.version.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.annotation_id.version);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.annotation_id.version.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.annotation_id.version}"`;
                } else {
                    json += `"${__result__}${input.annotation_id.version.slice(__last__)}"`;
                }
            }
        } else if (
            input.annotation_id.version.length < 5000 &&
            !STR_ESCAPE.test(input.annotation_id.version)
        ) {
            json += `"${input.annotation_id.version}"`;
        } else {
            json += JSON.stringify(input.annotation_id.version);
        }
        json += "}";
        json += ',"associated_id":{';
        json += `"entity_type":"${input.associated_id.entity_type}"`;
        json += `,"id":`;
        if (input.associated_id.id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.associated_id.id.length; i++) {
                __point__ = input.associated_id.id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.associated_id.id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.associated_id.id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.associated_id.id}"`;
                } else {
                    json += `"${__result__}${input.associated_id.id.slice(__last__)}"`;
                }
            }
        } else if (
            input.associated_id.id.length < 5000 &&
            !STR_ESCAPE.test(input.associated_id.id)
        ) {
            json += `"${input.associated_id.id}"`;
        } else {
            json += JSON.stringify(input.associated_id.id);
        }
        json += "}";
        json += `,"annotation_type":"${input.annotation_type}"`;

        if (Number.isNaN(input.annotation_type_version)) {
            throw new Error(
                "Expected number at /annotation_type_version got NaN",
            );
        }
        json += `,"annotation_type_version":${input.annotation_type_version}`;
        if (typeof input.metadata !== "undefined") {
            json += ',"metadata":' + JSON.stringify(input.metadata);
        }
        json += ',"box_type_range":{';
        json += `"start_time_in_nano_sec":"${input.box_type_range.start_time_in_nano_sec.toString()}"`;
        json += `,"end_time_in_nano_sec":"${input.box_type_range.end_time_in_nano_sec.toString()}"`;
        json += "}";
        json += "}";
        return json;
    },
};
export interface AssociatedId {
    entity_type: AnnotationAssociatedIdEntityType;
    id: string;
}

export type AnnotationAssociatedIdEntityType = "MOVIE_ID" | "SHOW_ID";
export type AnnotationAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface AnnotationBoxTypeRange {
    start_time_in_nano_sec: bigint;
    end_time_in_nano_sec: bigint;
}

export interface UpdateAnnotationParams {
    annotation_id: string;
    annotation_id_version: string;
    data: UpdateAnnotationData;
}
const $$UpdateAnnotationParams = {
    parse(input: Record<any, any>): UpdateAnnotationParams {
        function $fallback(instancePath, schemaPath) {
            throw new Error(
                `Error parsing input. InstancePath: "${instancePath}". SchemaPath: "${schemaPath}"`,
            );
        }

        if (typeof input === "string") {
            const json = JSON.parse(input);
            let result = {};
            if (typeof json === "object" && json !== null) {
                const __D1 = {};
                if (typeof json.annotation_id === "string") {
                    __D1.annotation_id = json.annotation_id;
                } else {
                    $fallback(
                        "/annotation_id",
                        "/properties/annotation_id/type",
                        "Expected string at /annotation_id",
                    );
                }
                if (typeof json.annotation_id_version === "string") {
                    __D1.annotation_id_version = json.annotation_id_version;
                } else {
                    $fallback(
                        "/annotation_id_version",
                        "/properties/annotation_id_version/type",
                        "Expected string at /annotation_id_version",
                    );
                }
                if (typeof json.data === "object" && json.data !== null) {
                    const __D2 = {};
                    if (typeof json.data.associated_id === "undefined") {
                        // ignore undefined
                    } else {
                        if (
                            typeof json.data.associated_id === "object" &&
                            json.data.associated_id !== null
                        ) {
                            const __D3 = {};
                            if (
                                typeof json.data.associated_id.entity_type ===
                                "string"
                            ) {
                                if (
                                    json.data.associated_id.entity_type ===
                                        "MOVIE_ID" ||
                                    json.data.associated_id.entity_type ===
                                        "SHOW_ID"
                                ) {
                                    __D3.entity_type =
                                        json.data.associated_id.entity_type;
                                } else {
                                    $fallback(
                                        "/data/associated_id/entity_type",
                                        "/properties/data/optionalProperties/associated_id/properties/entity_type",
                                        "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                                    );
                                }
                            } else {
                                $fallback(
                                    "/data/associated_id/entity_type",
                                    "/properties/data/optionalProperties/associated_id/properties/entity_type",
                                    "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                                );
                            }
                            if (
                                typeof json.data.associated_id.id === "string"
                            ) {
                                __D3.id = json.data.associated_id.id;
                            } else {
                                $fallback(
                                    "/data/associated_id/id",
                                    "/properties/data/optionalProperties/associated_id/properties/id/type",
                                    "Expected string at /data/associated_id/id",
                                );
                            }
                            __D2.associated_id = __D3;
                        } else {
                            $fallback(
                                "/data/associated_id",
                                "/properties/data/optionalProperties/associated_id",
                                "Expected object",
                            );
                        }
                    }
                    if (typeof json.data.annotation_type === "undefined") {
                        // ignore undefined
                    } else {
                        if (typeof json.data.annotation_type === "string") {
                            if (
                                json.data.annotation_type ===
                                "ANNOTATION_BOUNDINGBOX"
                            ) {
                                __D2.annotation_type =
                                    json.data.annotation_type;
                            } else {
                                $fallback(
                                    "/data/annotation_type",
                                    "/properties/data/optionalProperties/annotation_type",
                                    "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
                                );
                            }
                        } else {
                            $fallback(
                                "/data/annotation_type",
                                "/properties/data/optionalProperties/annotation_type",
                                "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
                            );
                        }
                    }
                    if (
                        typeof json.data.annotation_type_version === "undefined"
                    ) {
                        // ignore undefined
                    } else {
                        if (
                            typeof json.data.annotation_type_version ===
                                "number" &&
                            Number.isInteger(
                                json.data.annotation_type_version,
                            ) &&
                            json.data.annotation_type_version >= 0 &&
                            json.data.annotation_type_version <= 65535
                        ) {
                            __D2.annotation_type_version =
                                json.data.annotation_type_version;
                        } else {
                            $fallback(
                                "/data/annotation_type_version",
                                "/properties/data/optionalProperties/annotation_type_version",
                                "Expected valid integer between 0 and 65535",
                            );
                        }
                    }
                    if (typeof json.data.metadata === "undefined") {
                        // ignore undefined
                    } else {
                        __D2.metadata = json.data.metadata;
                    }
                    if (typeof json.data.box_type_range === "undefined") {
                        // ignore undefined
                    } else {
                        if (
                            typeof json.data.box_type_range === "object" &&
                            json.data.box_type_range !== null
                        ) {
                            const __D3 = {};
                            if (
                                typeof json.data.box_type_range
                                    .start_time_in_nano_sec === "string" ||
                                typeof json.data.box_type_range
                                    .start_time_in_nano_sec === "number"
                            ) {
                                try {
                                    const val = BigInt(
                                        json.data.box_type_range
                                            .start_time_in_nano_sec,
                                    );
                                    __D3.start_time_in_nano_sec = val;
                                } catch (err) {
                                    $fallback(
                                        "/data/box_type_range/start_time_in_nano_sec",
                                        "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                                        "Unable to parse BigInt from json.data.box_type_range.start_time_in_nano_sec.",
                                    );
                                }
                            } else if (
                                typeof json.data.box_type_range
                                    .start_time_in_nano_sec === "bigint"
                            ) {
                                __D3.start_time_in_nano_sec =
                                    json.data.box_type_range.start_time_in_nano_sec;
                            } else {
                                $fallback(
                                    "/data/box_type_range/start_time_in_nano_sec",
                                    "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                                    "Expected BigInt or Integer string. Got ${json.data.box_type_range.start_time_in_nano_sec}",
                                );
                            }
                            if (
                                typeof json.data.box_type_range
                                    .end_time_in_nano_sec === "string" ||
                                typeof json.data.box_type_range
                                    .end_time_in_nano_sec === "number"
                            ) {
                                try {
                                    const val = BigInt(
                                        json.data.box_type_range
                                            .end_time_in_nano_sec,
                                    );
                                    if (val >= BigInt("0")) {
                                        __D3.end_time_in_nano_sec = val;
                                    } else {
                                        $fallback(
                                            "/data/box_type_range/end_time_in_nano_sec",
                                            "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                            "Unsigned int must be greater than or equal to 0.",
                                        );
                                    }
                                } catch (err) {
                                    $fallback(
                                        "/data/box_type_range/end_time_in_nano_sec",
                                        "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                        "Unable to parse BigInt from json.data.box_type_range.end_time_in_nano_sec.",
                                    );
                                }
                            } else if (
                                typeof json.data.box_type_range
                                    .end_time_in_nano_sec === "bigint"
                            ) {
                                if (
                                    json.data.box_type_range
                                        .end_time_in_nano_sec >= BigInt("0")
                                ) {
                                    __D3.end_time_in_nano_sec =
                                        json.data.box_type_range.end_time_in_nano_sec;
                                } else {
                                    $fallback(
                                        "/data/box_type_range/end_time_in_nano_sec",
                                        "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                        "Unsigned int must be greater than or equal to 0.",
                                    );
                                }
                            } else {
                                $fallback(
                                    "/data/box_type_range/end_time_in_nano_sec",
                                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                    "Expected BigInt or Integer string. Got ${json.data.box_type_range.end_time_in_nano_sec}",
                                );
                            }
                            __D2.box_type_range = __D3;
                        } else {
                            $fallback(
                                "/data/box_type_range",
                                "/properties/data/optionalProperties/box_type_range",
                                "Expected object",
                            );
                        }
                    }
                    __D1.data = __D2;
                } else {
                    $fallback("/data", "/properties/data", "Expected object");
                }
                result = __D1;
            } else {
                $fallback("", "", "Expected object");
            }
            return result;
        }
        let result = {};
        if (typeof input === "object" && input !== null) {
            const __D1 = {};
            if (typeof input.annotation_id === "string") {
                __D1.annotation_id = input.annotation_id;
            } else {
                $fallback(
                    "/annotation_id",
                    "/properties/annotation_id/type",
                    "Expected string at /annotation_id",
                );
            }
            if (typeof input.annotation_id_version === "string") {
                __D1.annotation_id_version = input.annotation_id_version;
            } else {
                $fallback(
                    "/annotation_id_version",
                    "/properties/annotation_id_version/type",
                    "Expected string at /annotation_id_version",
                );
            }
            if (typeof input.data === "object" && input.data !== null) {
                const __D2 = {};
                if (typeof input.data.associated_id === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof input.data.associated_id === "object" &&
                        input.data.associated_id !== null
                    ) {
                        const __D3 = {};
                        if (
                            typeof input.data.associated_id.entity_type ===
                            "string"
                        ) {
                            if (
                                input.data.associated_id.entity_type ===
                                    "MOVIE_ID" ||
                                input.data.associated_id.entity_type ===
                                    "SHOW_ID"
                            ) {
                                __D3.entity_type =
                                    input.data.associated_id.entity_type;
                            } else {
                                $fallback(
                                    "/data/associated_id/entity_type",
                                    "/properties/data/optionalProperties/associated_id/properties/entity_type",
                                    "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                                );
                            }
                        } else {
                            $fallback(
                                "/data/associated_id/entity_type",
                                "/properties/data/optionalProperties/associated_id/properties/entity_type",
                                "Expected one of the following values: [MOVIE_ID, SHOW_ID] at /data/associated_id/entity_type.",
                            );
                        }
                        if (typeof input.data.associated_id.id === "string") {
                            __D3.id = input.data.associated_id.id;
                        } else {
                            $fallback(
                                "/data/associated_id/id",
                                "/properties/data/optionalProperties/associated_id/properties/id/type",
                                "Expected string at /data/associated_id/id",
                            );
                        }
                        __D2.associated_id = __D3;
                    } else {
                        $fallback(
                            "/data/associated_id",
                            "/properties/data/optionalProperties/associated_id",
                            "Expected object",
                        );
                    }
                }
                if (typeof input.data.annotation_type === "undefined") {
                    // ignore undefined
                } else {
                    if (typeof input.data.annotation_type === "string") {
                        if (
                            input.data.annotation_type ===
                            "ANNOTATION_BOUNDINGBOX"
                        ) {
                            __D2.annotation_type = input.data.annotation_type;
                        } else {
                            $fallback(
                                "/data/annotation_type",
                                "/properties/data/optionalProperties/annotation_type",
                                "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
                            );
                        }
                    } else {
                        $fallback(
                            "/data/annotation_type",
                            "/properties/data/optionalProperties/annotation_type",
                            "Expected one of the following values: [ANNOTATION_BOUNDINGBOX] at /data/annotation_type.",
                        );
                    }
                }
                if (typeof input.data.annotation_type_version === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof input.data.annotation_type_version ===
                            "number" &&
                        Number.isInteger(input.data.annotation_type_version) &&
                        input.data.annotation_type_version >= 0 &&
                        input.data.annotation_type_version <= 65535
                    ) {
                        __D2.annotation_type_version =
                            input.data.annotation_type_version;
                    } else {
                        $fallback(
                            "/data/annotation_type_version",
                            "/properties/data/optionalProperties/annotation_type_version",
                            "Expected valid integer between 0 and 65535",
                        );
                    }
                }
                if (typeof input.data.metadata === "undefined") {
                    // ignore undefined
                } else {
                    __D2.metadata = input.data.metadata;
                }
                if (typeof input.data.box_type_range === "undefined") {
                    // ignore undefined
                } else {
                    if (
                        typeof input.data.box_type_range === "object" &&
                        input.data.box_type_range !== null
                    ) {
                        const __D3 = {};
                        if (
                            typeof input.data.box_type_range
                                .start_time_in_nano_sec === "string" ||
                            typeof input.data.box_type_range
                                .start_time_in_nano_sec === "number"
                        ) {
                            try {
                                const val = BigInt(
                                    input.data.box_type_range
                                        .start_time_in_nano_sec,
                                );
                                __D3.start_time_in_nano_sec = val;
                            } catch (err) {
                                $fallback(
                                    "/data/box_type_range/start_time_in_nano_sec",
                                    "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                                    "Unable to parse BigInt from input.data.box_type_range.start_time_in_nano_sec.",
                                );
                            }
                        } else if (
                            typeof input.data.box_type_range
                                .start_time_in_nano_sec === "bigint"
                        ) {
                            __D3.start_time_in_nano_sec =
                                input.data.box_type_range.start_time_in_nano_sec;
                        } else {
                            $fallback(
                                "/data/box_type_range/start_time_in_nano_sec",
                                "/properties/data/optionalProperties/box_type_range/properties/start_time_in_nano_sec",
                                "Expected BigInt or Integer string. Got ${input.data.box_type_range.start_time_in_nano_sec}",
                            );
                        }
                        if (
                            typeof input.data.box_type_range
                                .end_time_in_nano_sec === "string" ||
                            typeof input.data.box_type_range
                                .end_time_in_nano_sec === "number"
                        ) {
                            try {
                                const val = BigInt(
                                    input.data.box_type_range
                                        .end_time_in_nano_sec,
                                );
                                if (val >= BigInt("0")) {
                                    __D3.end_time_in_nano_sec = val;
                                } else {
                                    $fallback(
                                        "/data/box_type_range/end_time_in_nano_sec",
                                        "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                        "Unsigned int must be greater than or equal to 0.",
                                    );
                                }
                            } catch (err) {
                                $fallback(
                                    "/data/box_type_range/end_time_in_nano_sec",
                                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                    "Unable to parse BigInt from input.data.box_type_range.end_time_in_nano_sec.",
                                );
                            }
                        } else if (
                            typeof input.data.box_type_range
                                .end_time_in_nano_sec === "bigint"
                        ) {
                            if (
                                input.data.box_type_range
                                    .end_time_in_nano_sec >= BigInt("0")
                            ) {
                                __D3.end_time_in_nano_sec =
                                    input.data.box_type_range.end_time_in_nano_sec;
                            } else {
                                $fallback(
                                    "/data/box_type_range/end_time_in_nano_sec",
                                    "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                    "Unsigned int must be greater than or equal to 0.",
                                );
                            }
                        } else {
                            $fallback(
                                "/data/box_type_range/end_time_in_nano_sec",
                                "/properties/data/optionalProperties/box_type_range/properties/end_time_in_nano_sec",
                                "Expected BigInt or Integer string. Got ${input.data.box_type_range.end_time_in_nano_sec}",
                            );
                        }
                        __D2.box_type_range = __D3;
                    } else {
                        $fallback(
                            "/data/box_type_range",
                            "/properties/data/optionalProperties/box_type_range",
                            "Expected object",
                        );
                    }
                }
                __D1.data = __D2;
            } else {
                $fallback("/data", "/properties/data", "Expected object");
            }
            result = __D1;
        } else {
            $fallback("", "", "Expected object");
        }
        return result;
    },
    serialize(input: UpdateAnnotationParams): string {
        let json = "";
        const STR_ESCAPE =
            /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
        json += "{";
        json += `"annotation_id":`;
        if (input.annotation_id.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.annotation_id.length; i++) {
                __point__ = input.annotation_id.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.annotation_id);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ += input.annotation_id.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.annotation_id}"`;
                } else {
                    json += `"${__result__}${input.annotation_id.slice(__last__)}"`;
                }
            }
        } else if (
            input.annotation_id.length < 5000 &&
            !STR_ESCAPE.test(input.annotation_id)
        ) {
            json += `"${input.annotation_id}"`;
        } else {
            json += JSON.stringify(input.annotation_id);
        }
        json += `,"annotation_id_version":`;
        if (input.annotation_id_version.length < 42) {
            let __result__ = "";
            let __last__ = -1;
            let __point__ = 255;
            let __finished__ = false;
            for (let i = 0; i < input.annotation_id_version.length; i++) {
                __point__ = input.annotation_id_version.charCodeAt(i);
                if (
                    __point__ < 32 ||
                    (__point__ >= 0xd800 && __point__ <= 0xdfff)
                ) {
                    json += JSON.stringify(input.annotation_id_version);
                    __finished__ = true;
                    break;
                }
                if (__point__ === 0x22 || __point__ === 0x5c) {
                    __last__ === -1 && (__last__ = 0);
                    __result__ +=
                        input.annotation_id_version.slice(__last__, i) + "\\";
                    __last__ = i;
                }
            }
            if (!__finished__) {
                if (__last__ === -1) {
                    json += `"${input.annotation_id_version}"`;
                } else {
                    json += `"${__result__}${input.annotation_id_version.slice(__last__)}"`;
                }
            }
        } else if (
            input.annotation_id_version.length < 5000 &&
            !STR_ESCAPE.test(input.annotation_id_version)
        ) {
            json += `"${input.annotation_id_version}"`;
        } else {
            json += JSON.stringify(input.annotation_id_version);
        }
        json += ',"data":{';
        let dataHasFields = false;
        if (typeof input.data.associated_id !== "undefined") {
            if (dataHasFields) {
                json += ',"associated_id":{';
                json += `"entity_type":"${input.data.associated_id.entity_type}"`;
                json += `,"id":`;
                if (input.data.associated_id.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.data.associated_id.id.length;
                        i++
                    ) {
                        __point__ = input.data.associated_id.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.associated_id.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.associated_id.id.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.associated_id.id}"`;
                        } else {
                            json += `"${__result__}${input.data.associated_id.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.associated_id.id.length < 5000 &&
                    !STR_ESCAPE.test(input.data.associated_id.id)
                ) {
                    json += `"${input.data.associated_id.id}"`;
                } else {
                    json += JSON.stringify(input.data.associated_id.id);
                }
                json += "}";
            } else {
                json += '"associated_id":{';
                json += `"entity_type":"${input.data.associated_id.entity_type}"`;
                json += `,"id":`;
                if (input.data.associated_id.id.length < 42) {
                    let __result__ = "";
                    let __last__ = -1;
                    let __point__ = 255;
                    let __finished__ = false;
                    for (
                        let i = 0;
                        i < input.data.associated_id.id.length;
                        i++
                    ) {
                        __point__ = input.data.associated_id.id.charCodeAt(i);
                        if (
                            __point__ < 32 ||
                            (__point__ >= 0xd800 && __point__ <= 0xdfff)
                        ) {
                            json += JSON.stringify(input.data.associated_id.id);
                            __finished__ = true;
                            break;
                        }
                        if (__point__ === 0x22 || __point__ === 0x5c) {
                            __last__ === -1 && (__last__ = 0);
                            __result__ +=
                                input.data.associated_id.id.slice(__last__, i) +
                                "\\";
                            __last__ = i;
                        }
                    }
                    if (!__finished__) {
                        if (__last__ === -1) {
                            json += `"${input.data.associated_id.id}"`;
                        } else {
                            json += `"${__result__}${input.data.associated_id.id.slice(__last__)}"`;
                        }
                    }
                } else if (
                    input.data.associated_id.id.length < 5000 &&
                    !STR_ESCAPE.test(input.data.associated_id.id)
                ) {
                    json += `"${input.data.associated_id.id}"`;
                } else {
                    json += JSON.stringify(input.data.associated_id.id);
                }
                json += "}";
                dataHasFields = true;
            }
        }
        if (typeof input.data.annotation_type !== "undefined") {
            if (dataHasFields) {
                json += `,"annotation_type":"${input.data.annotation_type}"`;
            } else {
                json += `"annotation_type":"${input.data.annotation_type}"`;
                dataHasFields = true;
            }
        }
        if (typeof input.data.annotation_type_version !== "undefined") {
            if (dataHasFields) {
                if (Number.isNaN(input.data.annotation_type_version)) {
                    throw new Error(
                        "Expected number at /data/annotation_type_version got NaN",
                    );
                }
                json += `,"annotation_type_version":${input.data.annotation_type_version}`;
            } else {
                if (Number.isNaN(input.data.annotation_type_version)) {
                    throw new Error(
                        "Expected number at /data/annotation_type_version got NaN",
                    );
                }
                json += `"annotation_type_version":${input.data.annotation_type_version}`;
                dataHasFields = true;
            }
        }
        if (typeof input.data.metadata !== "undefined") {
            if (dataHasFields) {
                if (typeof input.data.metadata !== "undefined") {
                    json +=
                        ',"metadata":' + JSON.stringify(input.data.metadata);
                }
            } else {
                if (typeof input.data.metadata !== "undefined") {
                    json += '"metadata":' + JSON.stringify(input.data.metadata);
                }
                dataHasFields = true;
            }
        }
        if (typeof input.data.box_type_range !== "undefined") {
            if (dataHasFields) {
                json += ',"box_type_range":{';
                json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
                json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
                json += "}";
            } else {
                json += '"box_type_range":{';
                json += `"start_time_in_nano_sec":"${input.data.box_type_range.start_time_in_nano_sec.toString()}"`;
                json += `,"end_time_in_nano_sec":"${input.data.box_type_range.end_time_in_nano_sec.toString()}"`;
                json += "}";
                dataHasFields = true;
            }
        }
        json += "}";
        json += "}";
        return json;
    },
};
export interface UpdateAnnotationData {
    associated_id?: AssociatedId;
    annotation_type?: UpdateAnnotationParamsDataAnnotationType;
    annotation_type_version?: number;
    metadata?: any;
    box_type_range?: UpdateAnnotationParamsDataBoxTypeRange;
}

export type UpdateAnnotationParamsDataAnnotationType = "ANNOTATION_BOUNDINGBOX";
export interface UpdateAnnotationParamsDataBoxTypeRange {
    start_time_in_nano_sec: bigint;
    end_time_in_nano_sec: bigint;
}
