// This file was autogenerated by @arrirpc/codegen-ts. Do not modify directly.
// For more information visit https://github.com/modiimedia/arri

/* eslint-disable */
// @ts-nocheck
import {
  ArriEnumValidator,
  ArriModelValidator,
  arriRequest,
  arriSseRequest,
  type EventSourceController,
  INT8_MAX,
  INT8_MIN,
  INT16_MAX,
  INT16_MIN,
  INT32_MAX,
  INT32_MIN,
  INT64_MAX,
  INT64_MIN,
  isObject,
  serializeString,
  type SseOptions,
  UINT8_MAX,
  UINT16_MAX,
  UINT32_MAX,
  UINT64_MAX,
} from "@arrirpc/client";

type HeaderMap = Record<string, string | undefined>;
export class Client {
  private readonly _baseUrl: string;
  private readonly _headers: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);

  constructor(
    options: {
      baseUrl?: string;
      headers?: HeaderMap | (() => HeaderMap | Promise<HeaderMap>);
    } = {},
  ) {
    this._baseUrl = options.baseUrl ?? "";
    this._headers = options.headers ?? {};
  }
  WatchMessages(
    params: WatchMessagesParams,
    options: SseOptions<Message> = {},
  ): EventSourceController {
    return arriSseRequest<Message, WatchMessagesParams>(
      {
        url: `${this._baseUrl}/watch-messages`,
        method: "post",
        headers: this._headers,
        params: params,
        responseFromJson: $$Message.fromJson,
        responseFromString: $$Message.fromJsonString,
        serializer: $$WatchMessagesParams.toJsonString,
        clientVersion: "",
      },
      options,
    );
  }
}

export interface WatchMessagesParams {
  channelId: string;
}
export const $$WatchMessagesParams: ArriModelValidator<WatchMessagesParams> = {
  new(): WatchMessagesParams {
    return {
      channelId: "",
    };
  },
  validate(input): input is WatchMessagesParams {
    return isObject(input) && typeof input.channelId === "string";
  },
  fromJson(input): WatchMessagesParams {
    let _channelId: string;
    if (typeof input.channelId === "string") {
      _channelId = input.channelId;
    } else {
      _channelId = "";
    }
    return {
      channelId: _channelId,
    };
  },
  fromJsonString(input): WatchMessagesParams {
    return $$WatchMessagesParams.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"channelId":';
    json += serializeString(input.channelId);
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`channelId=${input.channelId}`);
    return queryParts.join("&");
  },
};

export interface Message {
  id: string;
  text: string;
  createdAt: Date;
}
export const $$Message: ArriModelValidator<Message> = {
  new(): Message {
    return {
      id: "",
      text: "",
      createdAt: new Date(),
    };
  },
  validate(input): input is Message {
    return (
      isObject(input) &&
      typeof input.id === "string" &&
      typeof input.text === "string" &&
      input.createdAt instanceof Date
    );
  },
  fromJson(input): Message {
    let _id: string;
    if (typeof input.id === "string") {
      _id = input.id;
    } else {
      _id = "";
    }
    let _text: string;
    if (typeof input.text === "string") {
      _text = input.text;
    } else {
      _text = "";
    }
    let _createdAt: Date;
    if (typeof input.createdAt === "string") {
      _createdAt = new Date(input.createdAt);
    } else if (input.createdAt instanceof Date) {
      _createdAt = input.createdAt;
    } else {
      _createdAt = new Date();
    }
    return {
      id: _id,
      text: _text,
      createdAt: _createdAt,
    };
  },
  fromJsonString(input): Message {
    return $$Message.fromJson(JSON.parse(input));
  },
  toJsonString(input): string {
    let json = "{";
    json += '"id":';
    json += serializeString(input.id);
    json += ',"text":';
    json += serializeString(input.text);
    json += ',"createdAt":';
    json += `"${input.createdAt.toISOString()}"`;
    json += "}";
    return json;
  },
  toUrlQueryString(input): string {
    const queryParts: string[] = [];
    queryParts.push(`id=${input.id}`);
    queryParts.push(`text=${input.text}`);
    queryParts.push(`createdAt=${input.createdAt.toISOString()}`);
    return queryParts.join("&");
  },
};
