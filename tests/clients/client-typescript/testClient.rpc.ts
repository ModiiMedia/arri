// this file was autogenerated by arri-codegen-ts
/* eslint-disable */
import { arriRequest } from "arri-client";

interface TestClientOptions {
  baseUrl?: string;
  headers?: Record<string, string>;
}

export class TestClient {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;
  posts: TestClientPostsService;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
    this.posts = new TestClientPostsService(options);
  }
}

export class TestClientPostsService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
  }
  getPost(params: PostParams) {
    return arriRequest<Post, PostParams>({
      url: `${this.baseUrl}/rpcs/posts/get-post`,
      method: "get",
      headers: this.headers,
      params,
      parser: (input) => $$Post.parse(JSON.parse(input)),
      serializer: $$PostParams.serialize,
    });
  }
  getPosts(params: PostListParams) {
    return arriRequest<PostListResponse, PostListParams>({
      url: `${this.baseUrl}/rpcs/posts/get-posts`,
      method: "get",
      headers: this.headers,
      params,
      parser: (input) => $$PostListResponse.parse(JSON.parse(input)),
      serializer: $$PostListParams.serialize,
    });
  }
  updatePost(params: UpdatePostParams) {
    return arriRequest<Post, UpdatePostParams>({
      url: `${this.baseUrl}/rpcs/posts/update-post`,
      method: "post",
      headers: this.headers,
      params,
      parser: (input) => $$Post.parse(JSON.parse(input)),
      serializer: $$UpdatePostParams.serialize,
    });
  }
}

export interface PostParams {
  postId: string;
}
export const $$PostParams = {
  parse(input: Record<any, any>): PostParams {
    return {
      postId: typeof input.postId === "string" ? input.postId : "",
    };
  },
  serialize(input: PostParams): string {
    return JSON.stringify(input);
  },
};

export interface Post {
  id: string;
  title: string;
  type: PostType;
  description: string | null;
  content: string;
  tags: Array<string>;
  authorId: string;
  author: Author;
  createdAt: Date;
  updatedAt: Date;
}
export const $$Post = {
  parse(input: Record<any, any>): Post {
    return {
      id: typeof input.id === "string" ? input.id : "",
      title: typeof input.title === "string" ? input.title : "",
      type: $$PostType.parse(input.type),
      description:
        typeof input.description === "string" ? input.description : null,
      content: typeof input.content === "string" ? input.content : "",
      tags: Array.isArray(input.tags)
        ? input.tags.map((item) => (typeof item === "string" ? item : ""))
        : [],
      authorId: typeof input.authorId === "string" ? input.authorId : "",
      author: $$Author.parse(input.author),
      createdAt:
        typeof input.createdAt === "string"
          ? new Date(input.createdAt)
          : new Date(0),
      updatedAt:
        typeof input.updatedAt === "string"
          ? new Date(input.updatedAt)
          : new Date(0),
    };
  },
  serialize(input: Post): string {
    return JSON.stringify(input);
  },
};
export type PostType = "text" | "image" | "video";
export const $$PostType = {
  parse(input: any): PostType {
    const vals = ["text", "image", "video"];
    if (typeof input !== "string" || !vals.includes(input)) {
      throw new Error(
        `Invalid input for PostType. Expected one of the following [text, image, video]. Got ${input}.`,
      );
    }
    return input as PostType;
  },
  serialize(input: PostType): string {
    return input;
  },
};
export interface Author {
  id: string;
  name: string;
  bio: string | null;
  createdAt: Date;
  updatedAt: Date;
}
export const $$Author = {
  parse(input: Record<any, any>): Author {
    return {
      id: typeof input.id === "string" ? input.id : "",
      name: typeof input.name === "string" ? input.name : "",
      bio: typeof input.bio === "string" ? input.bio : null,
      createdAt:
        typeof input.createdAt === "string"
          ? new Date(input.createdAt)
          : new Date(0),
      updatedAt:
        typeof input.updatedAt === "string"
          ? new Date(input.updatedAt)
          : new Date(0),
    };
  },
  serialize(input: Author): string {
    return JSON.stringify(input);
  },
};

export interface PostListParams {
  limit: number;
  type?: PostType;
}
export const $$PostListParams = {
  parse(input: Record<any, any>): PostListParams {
    return {
      limit: typeof input.limit === "number" ? input.limit : 0,
      type:
        typeof input.type === "string"
          ? $$PostType.parse(input.type)
          : undefined,
    };
  },
  serialize(input: PostListParams): string {
    return JSON.stringify(input);
  },
};

export interface PostListResponse {
  total: number;
  items: Array<Post>;
}
export const $$PostListResponse = {
  parse(input: Record<any, any>): PostListResponse {
    return {
      total: typeof input.total === "number" ? input.total : 0,
      items: Array.isArray(input.items)
        ? input.items.map((item) => $$Post.parse(item))
        : [],
    };
  },
  serialize(input: PostListResponse): string {
    return JSON.stringify(input);
  },
};

export interface UpdatePostParams {
  postId: string;
  data: UpdatePostParamsData;
}
export const $$UpdatePostParams = {
  parse(input: Record<any, any>): UpdatePostParams {
    return {
      postId: typeof input.postId === "string" ? input.postId : "",
      data: $$UpdatePostParamsData.parse(input.data),
    };
  },
  serialize(input: UpdatePostParams): string {
    return JSON.stringify(input);
  },
};
export interface UpdatePostParamsData {
  title?: string;
  description?: string | null;
  content?: string;
  tags?: Array<string>;
}
export const $$UpdatePostParamsData = {
  parse(input: Record<any, any>): UpdatePostParamsData {
    return {
      title: typeof input.title === "string" ? input.title : undefined,
      description:
        typeof input.description === "string" ? input.description : undefined,
      content: typeof input.content === "string" ? input.content : undefined,
      tags: Array.isArray(input.tags)
        ? input.tags.map((item) =>
            typeof item === "string" ? item : undefined,
          )
        : undefined,
    };
  },
  serialize(input: UpdatePostParamsData): string {
    return JSON.stringify(input);
  },
};

export interface TestClientError {
  statusCode: number;
  statusMessage: string;
  stack: Array<any>;
  data?: any;
}
export const $$TestClientError = {
  parse(input: Record<any, any>): TestClientError {
    return {
      statusCode: typeof input.statusCode === "number" ? input.statusCode : 0,
      statusMessage:
        typeof input.statusMessage === "string" ? input.statusMessage : "",
      stack: Array.isArray(input.stack) ? input.stack.map((item) => item) : [],
      data: input.data,
    };
  },
  serialize(input: TestClientError): string {
    return JSON.stringify(input);
  },
};
