// This code was autogenerated by arri. Do not modify directly.
import "dart:convert";
import "package:http/http.dart" as http;
import "package:arri_client/arri_client.dart";

class Blah {
  final String _baseUrl;
  final Map<String, String> _headers;
  const Blah({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _headers = headers,
        _baseUrl = baseUrl;
  Future<BlahSayHelloResponse> sayHello() {
    return parsedArriRequest(
      "$_baseUrl/say-hello",
      method: HttpMethod.get,
      headers: _headers,
      params: null,
      parser: (body) => BlahSayHelloResponse.fromJson(json.decode(body)),
    );
  }

  BlahV1Service get v1 {
    return BlahV1Service(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }

  BlahV2Service get v2 {
    return BlahV2Service(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }

  Future<http.Response> rawRequest(
    BlahEndpoints endpoint, {
    Map<String, String>? query,
    dynamic body,
    Map<String, String>? headers,
    Encoding? encoding,
  }) async {
    return arriRequest(
      "$_baseUrl${endpoint.path}",
      method: endpoint.method,
      headers: headers ?? _headers,
      body: body,
      query: query,
      encoding: encoding,
    );
  }
}

class BlahV1Service {
  final String _baseUrl;
  final Map<String, String> _headers;
  const BlahV1Service({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;
  BlahV1UsersService get users {
    return BlahV1UsersService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }

  BlahV1PostsService get posts {
    return BlahV1PostsService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }
}

class BlahV1UsersService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const BlahV1UsersService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<BlahUser> getUser(BlahUserParams params) {
    return parsedArriRequest(
      "$_baseUrl/v1/users/get-user",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => BlahUser.fromJson(json.decode(body)),
    );
  }

  Future<BlahUsersGetUsersResponse> getUsers(BlahUserListParams params) {
    return parsedArriRequest(
      "$_baseUrl/v1/users/get-users",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => BlahUsersGetUsersResponse.fromJson(json.decode(body)),
    );
  }
}

class BlahV1PostsService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const BlahV1PostsService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<BlahPost> getPost(BlahPostParams params) {
    return parsedArriRequest(
      "$_baseUrl/v1/posts/get-post",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => BlahPost.fromJson(json.decode(body)),
    );
  }

  Future<BlahPost> updatePost(BlahPostsUpdatePostParams params) {
    return parsedArriRequest(
      "$_baseUrl/v1/posts/update-post",
      method: HttpMethod.post,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => BlahPost.fromJson(json.decode(body)),
    );
  }

  Future<void> deletePost(BlahPostParams params) {
    return parsedArriRequest(
      "$_baseUrl/v1/posts/delete-posts",
      method: HttpMethod.delete,
      headers: _headers,
      params: params.toJson(),
      parser: (body) {},
    );
  }
}

class BlahV2Service {
  final String _baseUrl;
  final Map<String, String> _headers;
  const BlahV2Service({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;
  BlahV2UsersService get users {
    return BlahV2UsersService(
      baseUrl: _baseUrl,
      headers: _headers,
    );
  }
}

class BlahV2UsersService {
  final String _baseUrl;
  final Map<String, String> _headers;
  const BlahV2UsersService({
    String baseUrl = "",
    Map<String, String> headers = const {},
  })  : _baseUrl = baseUrl,
        _headers = headers;

  Future<BlahUserV2> getUser(BlahUserParams params) {
    return parsedArriRequest(
      "$_baseUrl/v2/users/get-user",
      method: HttpMethod.get,
      headers: _headers,
      params: params.toJson(),
      parser: (body) => BlahUserV2.fromJson(json.decode(body)),
    );
  }
}

class BlahSayHelloResponse {
  final String message;
  const BlahSayHelloResponse({
    required this.message,
  });
  factory BlahSayHelloResponse.fromJson(Map<String, dynamic> json) {
    return BlahSayHelloResponse(
      message: json["message"] is String ? json["message"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "message": message,
    };
  }

  BlahSayHelloResponse copyWith({
    String? message,
  }) {
    return BlahSayHelloResponse(
      message: message ?? this.message,
    );
  }
}

class BlahUser {
  final String metadata;
  final String id;
  final String? email;
  final int createdAt;
  final DateTime updatedAt;
  final BlahUserRole role;
  final BlahUserPreferredTheme? preferredTheme;
  const BlahUser({
    required this.metadata,
    required this.id,
    this.email,
    required this.createdAt,
    required this.updatedAt,
    required this.role,
    this.preferredTheme,
  });
  factory BlahUser.fromJson(Map<String, dynamic> json) {
    return BlahUser(
      metadata: json["_metadata"] is String ? json["_metadata"] : "",
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : null,
      createdAt: json["createdAt"] is int ? json["createdAt"] : 0,
      updatedAt: json["updatedAt"] is String
          ? DateTime.parse(json["updatedAt"])
          : DateTime(0),
      role: BlahUserRole.fromJson(json["role"]),
      preferredTheme: json["preferredTheme"] is Map<String, dynamic>
          ? BlahUserPreferredTheme.fromJson(json["preferredTheme"])
          : null,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "_metadata": metadata,
      "id": id,
      "email": email,
      "createdAt": createdAt,
      "updatedAt": updatedAt.toIso8601String(),
      "role": role.toJson(),
      "preferredTheme": preferredTheme?.toJson(),
    };
  }

  BlahUser copyWith({
    String? metadata,
    String? id,
    String? email,
    int? createdAt,
    DateTime? updatedAt,
    BlahUserRole? role,
    BlahUserPreferredTheme? preferredTheme,
  }) {
    return BlahUser(
      metadata: metadata ?? this.metadata,
      id: id ?? this.id,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      role: role ?? this.role,
      preferredTheme: preferredTheme ?? this.preferredTheme,
    );
  }
}

enum BlahUserRole implements Comparable<BlahUserRole> {
  standard("standard"),
  admin("admin");

  const BlahUserRole(this.value);
  final dynamic value;

  @override
  compareTo(BlahUserRole other) => name.compareTo(other.name);

  factory BlahUserRole.fromJson(dynamic input) {
    for (final val in values) {
      if (val.value == input) {
        return val;
      }
    }
    return standard;
  }

  dynamic toJson() {
    return value;
  }
}

enum BlahUserPreferredTheme implements Comparable<BlahUserPreferredTheme> {
  light("light"),
  dark("dark"),
  systemDefault("system-default");

  const BlahUserPreferredTheme(this.value);
  final dynamic value;

  @override
  compareTo(BlahUserPreferredTheme other) => name.compareTo(other.name);

  factory BlahUserPreferredTheme.fromJson(dynamic input) {
    for (final val in values) {
      if (val.value == input) {
        return val;
      }
    }
    return light;
  }

  dynamic toJson() {
    return value;
  }
}

class BlahUserV2 {
  final String id;
  final String email;
  final String username;
  final DateTime createdAt;
  final DateTime updatedAt;
  final BlahUserV2Role role;
  const BlahUserV2({
    required this.id,
    required this.email,
    required this.username,
    required this.createdAt,
    required this.updatedAt,
    required this.role,
  });
  factory BlahUserV2.fromJson(Map<String, dynamic> json) {
    return BlahUserV2(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
      username: json["username"] is String ? json["username"] : "",
      createdAt: json["createdAt"] is String
          ? DateTime.parse(json["createdAt"])
          : DateTime(0),
      updatedAt: json["updatedAt"] is String
          ? DateTime.parse(json["updatedAt"])
          : DateTime(0),
      role: BlahUserV2Role.fromJson(json["role"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
      "username": username,
      "createdAt": createdAt.toIso8601String(),
      "updatedAt": updatedAt.toIso8601String(),
      "role": role.toJson(),
    };
  }

  BlahUserV2 copyWith({
    String? id,
    String? email,
    String? username,
    DateTime? createdAt,
    DateTime? updatedAt,
    BlahUserV2Role? role,
  }) {
    return BlahUserV2(
      id: id ?? this.id,
      email: email ?? this.email,
      username: username ?? this.username,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      role: role ?? this.role,
    );
  }
}

enum BlahUserV2Role implements Comparable<BlahUserV2Role> {
  standard("standard"),
  admin("admin"),
  moderator("moderator");

  const BlahUserV2Role(this.value);
  final dynamic value;

  @override
  compareTo(BlahUserV2Role other) => name.compareTo(other.name);

  factory BlahUserV2Role.fromJson(dynamic input) {
    for (final val in values) {
      if (val.value == input) {
        return val;
      }
    }
    return standard;
  }

  dynamic toJson() {
    return value;
  }
}

class BlahUserParams {
  final String id;
  final String email;
  const BlahUserParams({
    required this.id,
    required this.email,
  });
  factory BlahUserParams.fromJson(Map<String, dynamic> json) {
    return BlahUserParams(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
    };
  }

  BlahUserParams copyWith({
    String? id,
    String? email,
  }) {
    return BlahUserParams(
      id: id ?? this.id,
      email: email ?? this.email,
    );
  }
}

class BlahUserListParams {
  final int limit;
  final int? skip;
  const BlahUserListParams({
    required this.limit,
    this.skip,
  });
  factory BlahUserListParams.fromJson(Map<String, dynamic> json) {
    return BlahUserListParams(
      limit: json["limit"] is int ? json["limit"] : 0,
      skip: json["skip"] is int ? json["skip"] : null,
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "limit": limit,
      "skip": skip,
    };
  }

  BlahUserListParams copyWith({
    int? limit,
    int? skip,
  }) {
    return BlahUserListParams(
      limit: limit ?? this.limit,
      skip: skip ?? this.skip,
    );
  }
}

class BlahUsersGetUsersResponse {
  final BlahUsersGetUsersResponseItems items;
  const BlahUsersGetUsersResponse({
    required this.items,
  });
  factory BlahUsersGetUsersResponse.fromJson(Map<String, dynamic> json) {
    return BlahUsersGetUsersResponse(
      items: BlahUsersGetUsersResponseItems.fromJson(json["items"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "items": items.toJson(),
    };
  }

  BlahUsersGetUsersResponse copyWith({
    BlahUsersGetUsersResponseItems? items,
  }) {
    return BlahUsersGetUsersResponse(
      items: items ?? this.items,
    );
  }
}

class BlahUsersGetUsersResponseItems {
  final String id;
  final String email;
  const BlahUsersGetUsersResponseItems({
    required this.id,
    required this.email,
  });
  factory BlahUsersGetUsersResponseItems.fromJson(Map<String, dynamic> json) {
    return BlahUsersGetUsersResponseItems(
      id: json["id"] is String ? json["id"] : "",
      email: json["email"] is String ? json["email"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "email": email,
    };
  }

  BlahUsersGetUsersResponseItems copyWith({
    String? id,
    String? email,
  }) {
    return BlahUsersGetUsersResponseItems(
      id: id ?? this.id,
      email: email ?? this.email,
    );
  }
}

class BlahPost {
  final String id;
  final String title;
  final String content;
  const BlahPost({
    required this.id,
    required this.title,
    required this.content,
  });
  factory BlahPost.fromJson(Map<String, dynamic> json) {
    return BlahPost(
      id: json["id"] is String ? json["id"] : "",
      title: json["title"] is String ? json["title"] : "",
      content: json["content"] is String ? json["content"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "id": id,
      "title": title,
      "content": content,
    };
  }

  BlahPost copyWith({
    String? id,
    String? title,
    String? content,
  }) {
    return BlahPost(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
    );
  }
}

class BlahPostParams {
  final String postId;
  const BlahPostParams({
    required this.postId,
  });
  factory BlahPostParams.fromJson(Map<String, dynamic> json) {
    return BlahPostParams(
      postId: json["postId"] is String ? json["postId"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "postId": postId,
    };
  }

  BlahPostParams copyWith({
    String? postId,
  }) {
    return BlahPostParams(
      postId: postId ?? this.postId,
    );
  }
}

class BlahPostsUpdatePostParams {
  final String postId;
  final BlahPostsUpdatePostParamsData data;
  const BlahPostsUpdatePostParams({
    required this.postId,
    required this.data,
  });
  factory BlahPostsUpdatePostParams.fromJson(Map<String, dynamic> json) {
    return BlahPostsUpdatePostParams(
      postId: json["postId"] is String ? json["postId"] : "",
      data: BlahPostsUpdatePostParamsData.fromJson(json["data"]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "postId": postId,
      "data": data.toJson(),
    };
  }

  BlahPostsUpdatePostParams copyWith({
    String? postId,
    BlahPostsUpdatePostParamsData? data,
  }) {
    return BlahPostsUpdatePostParams(
      postId: postId ?? this.postId,
      data: data ?? this.data,
    );
  }
}

class BlahPostsUpdatePostParamsData {
  final String title;
  final String content;
  const BlahPostsUpdatePostParamsData({
    required this.title,
    required this.content,
  });
  factory BlahPostsUpdatePostParamsData.fromJson(Map<String, dynamic> json) {
    return BlahPostsUpdatePostParamsData(
      title: json["title"] is String ? json["title"] : "",
      content: json["content"] is String ? json["content"] : "",
    );
  }
  Map<String, dynamic> toJson() {
    return {
      "title": title,
      "content": content,
    };
  }

  BlahPostsUpdatePostParamsData copyWith({
    String? title,
    String? content,
  }) {
    return BlahPostsUpdatePostParamsData(
      title: title ?? this.title,
      content: content ?? this.content,
    );
  }
}

enum BlahEndpoints implements Comparable<BlahEndpoints>, ArriEndpoint {
  sayHello(
    path: "/say-hello",
    method: HttpMethod.get,
  ),
  v1UsersGetUser(
    path: "/v1/users/get-user",
    method: HttpMethod.get,
  ),
  v1UsersGetUsers(
    path: "/v1/users/get-users",
    method: HttpMethod.get,
  ),
  v1PostsGetPost(
    path: "/v1/posts/get-post",
    method: HttpMethod.get,
  ),
  v1PostsUpdatePost(
    path: "/v1/posts/update-post",
    method: HttpMethod.post,
  ),
  v1PostsDeletePosts(
    path: "/v1/posts/delete-posts",
    method: HttpMethod.delete,
  ),
  v2UsersGetUser(
    path: "/v2/users/get-user",
    method: HttpMethod.get,
  );

  const BlahEndpoints({
    required this.path,
    required this.method,
  });
  @override
  final String path;
  @override
  final HttpMethod method;

  @override
  compareTo(BlahEndpoints other) => name.compareTo(other.name);
}
