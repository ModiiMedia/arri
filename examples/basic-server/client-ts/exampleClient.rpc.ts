// this file was autogenerated by arri-codegen-ts'
/* eslint-disable */
import { arriRequest, createRawJtdValidator } from "arri-client";

interface ExampleClientOptions {
    baseUrl?: string;
    headers?: Record<string, string>;
}

export class ExampleClient {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;
    test: ExampleClientTestService;
    users: ExampleClientUsersService;

    constructor(options: ExampleClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
        this.test = new ExampleClientTestService(options);
        this.users = new ExampleClientUsersService(options);
    }
}

export class ExampleClientTestService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: ExampleClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
    }
    getTest() {
        return arriRequest<TestGetTestResponse, undefined>({
            url: `${this.baseUrl}/test/get-test`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: _$TestGetTestResponseValidator.parse,
            serializer: (_) => {},
        });
    }
}

export class ExampleClientUsersService {
    private readonly baseUrl: string;
    private readonly headers: Record<string, string>;

    constructor(options: ExampleClientOptions = {}) {
        this.baseUrl = options.baseUrl ?? "";
        this.headers = options.headers ?? {};
    }
    deleteUser(params: UsersDeleteUserParams) {
        return arriRequest<UsersDeleteUserResponse, UsersDeleteUserParams>({
            url: `${this.baseUrl}/users/delete-user`,
            method: "get",
            headers: this.headers,
            params,
            parser: _$UsersDeleteUserResponseValidator.parse,
            serializer: _$UsersDeleteUserParamsValidator.serialize,
        });
    }
    getUser() {
        return arriRequest<UsersGetUserResponse, undefined>({
            url: `${this.baseUrl}/users/get-user`,
            method: "get",
            headers: this.headers,
            params: undefined,
            parser: _$UsersGetUserResponseValidator.parse,
            serializer: (_) => {},
        });
    }
    getUsers(params: UsersGetUsersParams) {
        return arriRequest<UsersGetUsersResponse, UsersGetUsersParams>({
            url: `${this.baseUrl}/users/get-users`,
            method: "get",
            headers: this.headers,
            params,
            parser: _$UsersGetUsersResponseValidator.parse,
            serializer: _$UsersGetUsersParamsValidator.serialize,
        });
    }
    updateUser(params: UsersUpdateUserParams) {
        return arriRequest<UsersUpdateUserResponse, UsersUpdateUserParams>({
            url: `${this.baseUrl}/users/update-user`,
            method: "get",
            headers: this.headers,
            params,
            parser: _$UsersUpdateUserResponseValidator.parse,
            serializer: _$UsersUpdateUserParamsValidator.serialize,
        });
    }
}

export interface TestGetTestResponse {
    message: string;
}
const _$TestGetTestResponseValidator =
    createRawJtdValidator<TestGetTestResponse>({
        properties: { message: { type: "string", metadata: {} } },
        metadata: {},
    });

export interface UsersDeleteUserParams {
    id: string;
}
const _$UsersDeleteUserParamsValidator =
    createRawJtdValidator<UsersDeleteUserParams>({
        properties: { id: { type: "string", metadata: {} } },
        metadata: {},
    });

export interface UsersDeleteUserResponse {
    id: string;
    name: string;
}
const _$UsersDeleteUserResponseValidator =
    createRawJtdValidator<UsersDeleteUserResponse>({
        properties: {
            id: { type: "string", metadata: {} },
            name: { type: "string", metadata: {} },
        },
        metadata: {},
    });

export interface UsersGetUserResponse {
    id: string;
    username: string;
    email: string;
    createdAt: number;
}
const _$UsersGetUserResponseValidator =
    createRawJtdValidator<UsersGetUserResponse>({
        properties: {
            id: { type: "string", metadata: {} },
            username: { type: "string", metadata: {} },
            email: { type: "string", metadata: {} },
            createdAt: { type: "int32", metadata: {} },
        },
        metadata: {},
    });

export interface UsersGetUsersParams {
    limit: number;
    type: UsersGetUsersParamsType;
}
const _$UsersGetUsersParamsValidator =
    createRawJtdValidator<UsersGetUsersParams>({
        properties: {
            limit: { type: "float64", metadata: {} },
            type: { enum: ["admin", "standard", "moderator"], metadata: {} },
        },
        metadata: {},
    });
export type UsersGetUsersParamsType = "admin" | "standard" | "moderator";
export interface UsersGetUsersResponse {
    total: number;
    items: Array<UserSchema>;
}
const _$UsersGetUsersResponseValidator =
    createRawJtdValidator<UsersGetUsersResponse>({
        properties: {
            total: { type: "int32", metadata: {} },
            items: {
                elements: {
                    properties: {
                        id: { type: "string", metadata: {} },
                        email: { type: "string", metadata: {} },
                        username: { type: "string", metadata: {} },
                    },
                    metadata: { id: "UserSchema" },
                },
                metadata: {},
            },
        },
        metadata: {},
    });
export interface UserSchema {
    id: string;
    email: string;
    username: string;
}

export interface UsersUpdateUserParams {
    userId: string;
}
const _$UsersUpdateUserParamsValidator =
    createRawJtdValidator<UsersUpdateUserParams>({
        properties: { userId: { type: "string", metadata: {} } },
        metadata: {},
    });

export interface UsersUpdateUserResponse {
    id: string;
    username: string;
    email: string;
}
const _$UsersUpdateUserResponseValidator =
    createRawJtdValidator<UsersUpdateUserResponse>({
        properties: {
            id: { type: "string", metadata: {} },
            username: { type: "string", metadata: {} },
            email: { type: "string", metadata: {} },
        },
        metadata: {},
    });
