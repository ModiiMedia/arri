// this file was autogenerated by arri-codegen-ts
/* eslint-disable */
import { arriRequest, createRawJtdValidator } from "arri-client";

interface TestClientOptions {
  baseUrl?: string;
  headers?: Record<string, string>;
}

export class TestClient {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;
  example: TestClientExampleService;
  users: TestClientUsersService;
  posts: TestClientPostsService;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
    this.example = new TestClientExampleService(options);
    this.users = new TestClientUsersService(options);
    this.posts = new TestClientPostsService(options);
  }
  getStatus() {
    return arriRequest<GetStatusResponse, undefined>({
      url: `${this.baseUrl}/rpcs/get-status`,
      method: "post",
      headers: this.headers,
      params: undefined,
      parser: _$GetStatusResponseValidator.parse,
      serializer: (_) => {},
    });
  }
}

export class TestClientExampleService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
  }
  helloWorld() {
    return arriRequest<undefined, undefined>({
      url: `${this.baseUrl}/rpcs/example/hello-world`,
      method: "post",
      headers: this.headers,
      params: undefined,
      parser: (_) => {},
      serializer: (_) => {},
    });
  }
}

export class TestClientUsersService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
  }
  SayHello() {
    return arriRequest<undefined, undefined>({
      url: `${this.baseUrl}/rpcs/users/say-hello`,
      method: "post",
      headers: this.headers,
      params: undefined,
      parser: (_) => {},
      serializer: (_) => {},
    });
  }
}

export class TestClientPostsService {
  private readonly baseUrl: string;
  private readonly headers: Record<string, string>;

  constructor(options: TestClientOptions = {}) {
    this.baseUrl = options.baseUrl ?? "";
    this.headers = options.headers ?? {};
  }
  getPost(params: PostsGetPostParams) {
    return arriRequest<Post, PostsGetPostParams>({
      url: `${this.baseUrl}/rpcs/posts/get-post`,
      method: "post",
      headers: this.headers,
      params,
      parser: _$PostValidator.parse,
      serializer: _$PostsGetPostParamsValidator.serialize,
    });
  }
  getPosts(params: PostsGetPostsParams) {
    return arriRequest<PostsGetPostsResponse, PostsGetPostsParams>({
      url: `${this.baseUrl}/rpcs/posts/get-posts`,
      method: "post",
      headers: this.headers,
      params,
      parser: _$PostsGetPostsResponseValidator.parse,
      serializer: _$PostsGetPostsParamsValidator.serialize,
    });
  }
  updatePost(params: PostsUpdatePostParams) {
    return arriRequest<Post, PostsUpdatePostParams>({
      url: `${this.baseUrl}/rpcs/posts/update-post`,
      method: "post",
      headers: this.headers,
      params,
      parser: _$PostValidator.parse,
      serializer: _$PostsUpdatePostParamsValidator.serialize,
    });
  }
}

export interface GetStatusResponse {
  message: string;
}
const _$GetStatusResponseValidator = createRawJtdValidator<GetStatusResponse>({
  properties: { message: { type: "string", metadata: {} } },
  metadata: {},
});

export interface PostsGetPostParams {
  postId: string;
}
const _$PostsGetPostParamsValidator = createRawJtdValidator<PostsGetPostParams>(
  { properties: { postId: { type: "string", metadata: {} } }, metadata: {} },
);

export interface Post {
  id: string;
  title: string;
  type: PostType;
  description: string | null;
  content: string;
  tags: Array<string>;
  authorId: string;
  author: Author;
  createdAt: Date;
  updatedAt: Date;
}
const _$PostValidator = createRawJtdValidator<Post>({
  properties: {
    id: { type: "string", metadata: {} },
    title: { type: "string", metadata: {} },
    type: { enum: ["text", "image", "video"], metadata: { id: "PostType" } },
    description: { type: "string", metadata: {}, nullable: true },
    content: { type: "string", metadata: {} },
    tags: { elements: { type: "string", metadata: {} }, metadata: {} },
    authorId: { type: "string", metadata: {} },
    author: {
      properties: {
        id: { type: "string", metadata: {} },
        name: { type: "string", metadata: {} },
        bio: { type: "string", metadata: {}, nullable: true },
        createdAt: { type: "timestamp", metadata: {} },
        updatedAt: { type: "timestamp", metadata: {} },
      },
      metadata: { id: "Author" },
    },
    createdAt: { type: "timestamp", metadata: {} },
    updatedAt: { type: "timestamp", metadata: {} },
  },
  metadata: { id: "Post" },
});
export type PostType = "text" | "image" | "video";
export interface Author {
  id: string;
  name: string;
  bio: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface PostsGetPostsParams {
  limit: number;
  type?: PostType;
}
const _$PostsGetPostsParamsValidator =
  createRawJtdValidator<PostsGetPostsParams>({
    properties: { limit: { type: "int8", metadata: {} } },
    optionalProperties: {
      type: { enum: ["text", "image", "video"], metadata: { id: "PostType" } },
    },
    metadata: {},
  });
export type PostType = "text" | "image" | "video";
export interface PostsGetPostsResponse {
  total: number;
  items: Array<Post>;
}
const _$PostsGetPostsResponseValidator =
  createRawJtdValidator<PostsGetPostsResponse>({
    properties: {
      total: { type: "int32", metadata: {} },
      items: {
        elements: {
          properties: {
            id: { type: "string", metadata: {} },
            title: { type: "string", metadata: {} },
            type: {
              enum: ["text", "image", "video"],
              metadata: { id: "PostType" },
            },
            description: { type: "string", metadata: {}, nullable: true },
            content: { type: "string", metadata: {} },
            tags: { elements: { type: "string", metadata: {} }, metadata: {} },
            authorId: { type: "string", metadata: {} },
            author: {
              properties: {
                id: { type: "string", metadata: {} },
                name: { type: "string", metadata: {} },
                bio: { type: "string", metadata: {}, nullable: true },
                createdAt: { type: "timestamp", metadata: {} },
                updatedAt: { type: "timestamp", metadata: {} },
              },
              metadata: { id: "Author" },
            },
            createdAt: { type: "timestamp", metadata: {} },
            updatedAt: { type: "timestamp", metadata: {} },
          },
          metadata: { id: "Post" },
        },
        metadata: {},
      },
    },
    metadata: {},
  });

export interface PostsUpdatePostParams {
  postId: string;
  data: PostsUpdatePostParamsData;
}
const _$PostsUpdatePostParamsValidator =
  createRawJtdValidator<PostsUpdatePostParams>({
    properties: {
      postId: { type: "string", metadata: {} },
      data: {
        properties: {
          title: { type: "string", metadata: {} },
          description: { type: "string", metadata: {}, nullable: true },
          content: { type: "string", metadata: {} },
          tags: { elements: { type: "string", metadata: {} }, metadata: {} },
        },
        metadata: {},
      },
    },
    metadata: {},
  });
export interface PostsUpdatePostParamsData {
  title: string;
  description: string | null;
  content: string;
  tags: Array<string>;
}
